/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11384.0, "minX": 0.0, "maxY": 21681.0, "series": [{"data": [[0.0, 11384.0], [0.1, 11384.0], [0.2, 11465.0], [0.3, 11465.0], [0.4, 11500.0], [0.5, 11500.0], [0.6, 11500.0], [0.7, 11501.0], [0.8, 11523.0], [0.9, 11523.0], [1.0, 11531.0], [1.1, 11531.0], [1.2, 11569.0], [1.3, 11569.0], [1.4, 11613.0], [1.5, 11613.0], [1.6, 11673.0], [1.7, 11673.0], [1.8, 11719.0], [1.9, 11719.0], [2.0, 11724.0], [2.1, 11724.0], [2.2, 11725.0], [2.3, 11725.0], [2.4, 11832.0], [2.5, 11832.0], [2.6, 12182.0], [2.7, 12182.0], [2.8, 12182.0], [2.9, 12204.0], [3.0, 12204.0], [3.1, 12230.0], [3.2, 12230.0], [3.3, 12443.0], [3.4, 12443.0], [3.5, 12445.0], [3.6, 12445.0], [3.7, 12454.0], [3.8, 12454.0], [3.9, 12465.0], [4.0, 12465.0], [4.1, 12506.0], [4.2, 12506.0], [4.3, 12580.0], [4.4, 12580.0], [4.5, 12598.0], [4.6, 12598.0], [4.7, 12602.0], [4.8, 12602.0], [4.9, 12627.0], [5.0, 12627.0], [5.1, 12671.0], [5.2, 12671.0], [5.3, 12717.0], [5.4, 12717.0], [5.5, 12727.0], [5.6, 12727.0], [5.7, 12730.0], [5.8, 12730.0], [5.9, 12785.0], [6.0, 12785.0], [6.1, 12791.0], [6.2, 12791.0], [6.3, 12821.0], [6.4, 12821.0], [6.5, 12846.0], [6.6, 12846.0], [6.7, 12854.0], [6.8, 12854.0], [6.9, 12886.0], [7.0, 12886.0], [7.1, 12891.0], [7.2, 12891.0], [7.3, 12913.0], [7.4, 12913.0], [7.5, 12914.0], [7.6, 12914.0], [7.7, 12930.0], [7.8, 12930.0], [7.9, 12965.0], [8.0, 12965.0], [8.1, 13045.0], [8.2, 13045.0], [8.3, 13108.0], [8.4, 13108.0], [8.5, 13119.0], [8.6, 13119.0], [8.7, 13144.0], [8.8, 13158.0], [8.9, 13158.0], [9.0, 13183.0], [9.1, 13183.0], [9.2, 13183.0], [9.3, 13183.0], [9.4, 13210.0], [9.5, 13210.0], [9.6, 13220.0], [9.7, 13220.0], [9.8, 13257.0], [9.9, 13257.0], [10.0, 13281.0], [10.1, 13281.0], [10.2, 13288.0], [10.3, 13288.0], [10.4, 13402.0], [10.5, 13402.0], [10.6, 13413.0], [10.7, 13413.0], [10.8, 13458.0], [10.9, 13458.0], [11.0, 13500.0], [11.1, 13500.0], [11.2, 13522.0], [11.3, 13522.0], [11.4, 13570.0], [11.5, 13570.0], [11.6, 13588.0], [11.7, 13588.0], [11.8, 13620.0], [11.9, 13620.0], [12.0, 13621.0], [12.1, 13621.0], [12.2, 13635.0], [12.3, 13635.0], [12.4, 13670.0], [12.5, 13670.0], [12.6, 13716.0], [12.7, 13716.0], [12.8, 13727.0], [12.9, 13727.0], [13.0, 13727.0], [13.1, 13727.0], [13.2, 13744.0], [13.3, 13744.0], [13.4, 13760.0], [13.5, 13760.0], [13.6, 13760.0], [13.7, 13760.0], [13.8, 13800.0], [13.9, 13800.0], [14.0, 13813.0], [14.1, 13813.0], [14.2, 13861.0], [14.3, 13861.0], [14.4, 13866.0], [14.5, 13866.0], [14.6, 13892.0], [14.7, 13892.0], [14.8, 13940.0], [14.9, 13940.0], [15.0, 13948.0], [15.1, 13948.0], [15.2, 13993.0], [15.3, 13993.0], [15.4, 14009.0], [15.5, 14009.0], [15.6, 14011.0], [15.7, 14011.0], [15.8, 14011.0], [15.9, 14011.0], [16.0, 14040.0], [16.1, 14040.0], [16.2, 14108.0], [16.3, 14108.0], [16.4, 14146.0], [16.5, 14146.0], [16.6, 14195.0], [16.7, 14195.0], [16.8, 14204.0], [16.9, 14204.0], [17.0, 14214.0], [17.1, 14214.0], [17.2, 14222.0], [17.3, 14222.0], [17.4, 14238.0], [17.5, 14238.0], [17.6, 14302.0], [17.7, 14302.0], [17.8, 14307.0], [17.9, 14307.0], [18.0, 14367.0], [18.1, 14367.0], [18.2, 14390.0], [18.3, 14390.0], [18.4, 14400.0], [18.5, 14400.0], [18.6, 14418.0], [18.7, 14418.0], [18.8, 14436.0], [18.9, 14436.0], [19.0, 14454.0], [19.1, 14454.0], [19.2, 14471.0], [19.3, 14471.0], [19.4, 14472.0], [19.5, 14472.0], [19.6, 14528.0], [19.7, 14528.0], [19.8, 14534.0], [19.9, 14534.0], [20.0, 14579.0], [20.1, 14579.0], [20.2, 14595.0], [20.3, 14595.0], [20.4, 14599.0], [20.5, 14599.0], [20.6, 14624.0], [20.7, 14624.0], [20.8, 14631.0], [20.9, 14631.0], [21.0, 14633.0], [21.1, 14633.0], [21.2, 14642.0], [21.3, 14642.0], [21.4, 14698.0], [21.5, 14698.0], [21.6, 14715.0], [21.7, 14715.0], [21.8, 14735.0], [21.9, 14735.0], [22.0, 14739.0], [22.1, 14739.0], [22.2, 14748.0], [22.3, 14748.0], [22.4, 14754.0], [22.5, 14754.0], [22.6, 14759.0], [22.7, 14759.0], [22.8, 14765.0], [22.9, 14765.0], [23.0, 14811.0], [23.1, 14811.0], [23.2, 14835.0], [23.3, 14835.0], [23.4, 14859.0], [23.5, 14859.0], [23.6, 14896.0], [23.7, 14896.0], [23.8, 14900.0], [23.9, 14900.0], [24.0, 14901.0], [24.1, 14901.0], [24.2, 14910.0], [24.3, 14910.0], [24.4, 14946.0], [24.5, 14946.0], [24.6, 14950.0], [24.7, 14950.0], [24.8, 14954.0], [24.9, 14954.0], [25.0, 15002.0], [25.1, 15002.0], [25.2, 15007.0], [25.3, 15007.0], [25.4, 15018.0], [25.5, 15018.0], [25.6, 15018.0], [25.7, 15018.0], [25.8, 15019.0], [25.9, 15019.0], [26.0, 15025.0], [26.1, 15025.0], [26.2, 15027.0], [26.3, 15027.0], [26.4, 15048.0], [26.5, 15048.0], [26.6, 15051.0], [26.7, 15051.0], [26.8, 15060.0], [26.9, 15060.0], [27.0, 15070.0], [27.1, 15070.0], [27.2, 15072.0], [27.3, 15072.0], [27.4, 15102.0], [27.5, 15102.0], [27.6, 15104.0], [27.7, 15104.0], [27.8, 15146.0], [27.9, 15146.0], [28.0, 15147.0], [28.1, 15147.0], [28.2, 15169.0], [28.3, 15169.0], [28.4, 15179.0], [28.5, 15179.0], [28.6, 15193.0], [28.7, 15193.0], [28.8, 15217.0], [28.9, 15217.0], [29.0, 15223.0], [29.1, 15223.0], [29.2, 15231.0], [29.3, 15231.0], [29.4, 15242.0], [29.5, 15242.0], [29.6, 15250.0], [29.7, 15250.0], [29.8, 15265.0], [29.9, 15265.0], [30.0, 15267.0], [30.1, 15267.0], [30.2, 15308.0], [30.3, 15308.0], [30.4, 15351.0], [30.5, 15351.0], [30.6, 15357.0], [30.7, 15357.0], [30.8, 15358.0], [30.9, 15358.0], [31.0, 15363.0], [31.1, 15363.0], [31.2, 15366.0], [31.3, 15366.0], [31.4, 15395.0], [31.5, 15395.0], [31.6, 15414.0], [31.7, 15414.0], [31.8, 15433.0], [31.9, 15433.0], [32.0, 15440.0], [32.1, 15440.0], [32.2, 15445.0], [32.3, 15445.0], [32.4, 15478.0], [32.5, 15478.0], [32.6, 15487.0], [32.7, 15487.0], [32.8, 15537.0], [32.9, 15537.0], [33.0, 15558.0], [33.1, 15558.0], [33.2, 15571.0], [33.3, 15571.0], [33.4, 15583.0], [33.5, 15583.0], [33.6, 15584.0], [33.7, 15584.0], [33.8, 15591.0], [33.9, 15591.0], [34.0, 15605.0], [34.1, 15605.0], [34.2, 15607.0], [34.3, 15607.0], [34.4, 15610.0], [34.5, 15610.0], [34.6, 15624.0], [34.7, 15624.0], [34.8, 15641.0], [34.9, 15641.0], [35.0, 15669.0], [35.1, 15669.0], [35.2, 15714.0], [35.3, 15714.0], [35.4, 15730.0], [35.5, 15730.0], [35.6, 15741.0], [35.7, 15741.0], [35.8, 15744.0], [35.9, 15744.0], [36.0, 15763.0], [36.1, 15763.0], [36.2, 15797.0], [36.3, 15797.0], [36.4, 15800.0], [36.5, 15800.0], [36.6, 15873.0], [36.7, 15873.0], [36.8, 15883.0], [36.9, 15883.0], [37.0, 15891.0], [37.1, 15891.0], [37.2, 15908.0], [37.3, 15908.0], [37.4, 15963.0], [37.5, 15963.0], [37.6, 15964.0], [37.7, 15964.0], [37.8, 15964.0], [37.9, 15971.0], [38.0, 15971.0], [38.1, 15982.0], [38.2, 15982.0], [38.3, 15982.0], [38.4, 15982.0], [38.5, 16017.0], [38.6, 16017.0], [38.7, 16025.0], [38.8, 16025.0], [38.9, 16044.0], [39.0, 16044.0], [39.1, 16053.0], [39.2, 16053.0], [39.3, 16079.0], [39.4, 16079.0], [39.5, 16084.0], [39.6, 16084.0], [39.7, 16093.0], [39.8, 16093.0], [39.9, 16110.0], [40.0, 16110.0], [40.1, 16117.0], [40.2, 16117.0], [40.3, 16120.0], [40.4, 16120.0], [40.5, 16132.0], [40.6, 16132.0], [40.7, 16137.0], [40.8, 16137.0], [40.9, 16137.0], [41.0, 16137.0], [41.1, 16156.0], [41.2, 16156.0], [41.3, 16163.0], [41.4, 16163.0], [41.5, 16165.0], [41.6, 16165.0], [41.7, 16207.0], [41.8, 16207.0], [41.9, 16225.0], [42.0, 16225.0], [42.1, 16231.0], [42.2, 16231.0], [42.3, 16235.0], [42.4, 16235.0], [42.5, 16258.0], [42.6, 16258.0], [42.7, 16277.0], [42.8, 16277.0], [42.9, 16319.0], [43.0, 16319.0], [43.1, 16357.0], [43.2, 16357.0], [43.3, 16361.0], [43.4, 16361.0], [43.5, 16443.0], [43.6, 16443.0], [43.7, 16444.0], [43.8, 16444.0], [43.9, 16454.0], [44.0, 16454.0], [44.1, 16493.0], [44.2, 16493.0], [44.3, 16502.0], [44.4, 16502.0], [44.5, 16517.0], [44.6, 16517.0], [44.7, 16523.0], [44.8, 16523.0], [44.9, 16533.0], [45.0, 16533.0], [45.1, 16545.0], [45.2, 16545.0], [45.3, 16546.0], [45.4, 16546.0], [45.5, 16561.0], [45.6, 16561.0], [45.7, 16562.0], [45.8, 16562.0], [45.9, 16582.0], [46.0, 16582.0], [46.1, 16649.0], [46.2, 16649.0], [46.3, 16655.0], [46.4, 16655.0], [46.5, 16669.0], [46.6, 16669.0], [46.7, 16687.0], [46.8, 16687.0], [46.9, 16729.0], [47.0, 16729.0], [47.1, 16752.0], [47.2, 16752.0], [47.3, 16771.0], [47.4, 16771.0], [47.5, 16773.0], [47.6, 16773.0], [47.7, 16780.0], [47.8, 16780.0], [47.9, 16796.0], [48.0, 16796.0], [48.1, 16802.0], [48.2, 16802.0], [48.3, 16803.0], [48.4, 16803.0], [48.5, 16808.0], [48.6, 16808.0], [48.7, 16850.0], [48.8, 16850.0], [48.9, 16867.0], [49.0, 16867.0], [49.1, 16873.0], [49.2, 16873.0], [49.3, 16882.0], [49.4, 16882.0], [49.5, 16912.0], [49.6, 16912.0], [49.7, 16963.0], [49.8, 16963.0], [49.9, 16975.0], [50.0, 16975.0], [50.1, 17009.0], [50.2, 17009.0], [50.3, 17034.0], [50.4, 17034.0], [50.5, 17040.0], [50.6, 17040.0], [50.7, 17072.0], [50.8, 17072.0], [50.9, 17073.0], [51.0, 17073.0], [51.1, 17099.0], [51.2, 17099.0], [51.3, 17112.0], [51.4, 17112.0], [51.5, 17134.0], [51.6, 17134.0], [51.7, 17138.0], [51.8, 17138.0], [51.9, 17139.0], [52.0, 17139.0], [52.1, 17184.0], [52.2, 17184.0], [52.3, 17186.0], [52.4, 17186.0], [52.5, 17193.0], [52.6, 17193.0], [52.7, 17219.0], [52.8, 17219.0], [52.9, 17219.0], [53.0, 17219.0], [53.1, 17226.0], [53.2, 17226.0], [53.3, 17243.0], [53.4, 17243.0], [53.5, 17252.0], [53.6, 17252.0], [53.7, 17270.0], [53.8, 17270.0], [53.9, 17311.0], [54.0, 17311.0], [54.1, 17318.0], [54.2, 17318.0], [54.3, 17322.0], [54.4, 17322.0], [54.5, 17371.0], [54.6, 17371.0], [54.7, 17374.0], [54.8, 17374.0], [54.9, 17403.0], [55.0, 17403.0], [55.1, 17411.0], [55.2, 17411.0], [55.3, 17451.0], [55.4, 17451.0], [55.5, 17479.0], [55.6, 17479.0], [55.7, 17486.0], [55.8, 17486.0], [55.9, 17502.0], [56.0, 17502.0], [56.1, 17527.0], [56.2, 17527.0], [56.3, 17566.0], [56.4, 17566.0], [56.5, 17592.0], [56.6, 17592.0], [56.7, 17629.0], [56.8, 17629.0], [56.9, 17650.0], [57.0, 17650.0], [57.1, 17658.0], [57.2, 17658.0], [57.3, 17704.0], [57.4, 17704.0], [57.5, 17714.0], [57.6, 17714.0], [57.7, 17719.0], [57.8, 17719.0], [57.9, 17729.0], [58.0, 17729.0], [58.1, 17733.0], [58.2, 17733.0], [58.3, 17734.0], [58.4, 17734.0], [58.5, 17767.0], [58.6, 17767.0], [58.7, 17780.0], [58.8, 17780.0], [58.9, 17802.0], [59.0, 17802.0], [59.1, 17829.0], [59.2, 17829.0], [59.3, 17844.0], [59.4, 17844.0], [59.5, 17871.0], [59.6, 17871.0], [59.7, 17905.0], [59.8, 17905.0], [59.9, 17912.0], [60.0, 17912.0], [60.1, 17915.0], [60.2, 17915.0], [60.3, 17968.0], [60.4, 17968.0], [60.5, 17970.0], [60.6, 17970.0], [60.7, 17995.0], [60.8, 17995.0], [60.9, 17998.0], [61.0, 17998.0], [61.1, 18023.0], [61.2, 18023.0], [61.3, 18025.0], [61.4, 18025.0], [61.5, 18056.0], [61.6, 18056.0], [61.7, 18071.0], [61.8, 18071.0], [61.9, 18081.0], [62.0, 18081.0], [62.1, 18130.0], [62.2, 18130.0], [62.3, 18145.0], [62.4, 18145.0], [62.5, 18187.0], [62.6, 18187.0], [62.7, 18260.0], [62.8, 18260.0], [62.9, 18294.0], [63.0, 18294.0], [63.1, 18307.0], [63.2, 18307.0], [63.3, 18309.0], [63.4, 18309.0], [63.5, 18317.0], [63.6, 18317.0], [63.7, 18325.0], [63.8, 18325.0], [63.9, 18325.0], [64.0, 18325.0], [64.1, 18341.0], [64.2, 18341.0], [64.3, 18349.0], [64.4, 18349.0], [64.5, 18357.0], [64.6, 18357.0], [64.7, 18360.0], [64.8, 18360.0], [64.9, 18388.0], [65.0, 18388.0], [65.1, 18456.0], [65.2, 18456.0], [65.3, 18459.0], [65.4, 18459.0], [65.5, 18511.0], [65.6, 18511.0], [65.7, 18565.0], [65.8, 18565.0], [65.9, 18567.0], [66.0, 18567.0], [66.1, 18613.0], [66.2, 18613.0], [66.3, 18624.0], [66.4, 18624.0], [66.5, 18632.0], [66.6, 18632.0], [66.7, 18659.0], [66.8, 18659.0], [66.9, 18667.0], [67.0, 18667.0], [67.1, 18679.0], [67.2, 18679.0], [67.3, 18700.0], [67.4, 18700.0], [67.5, 18701.0], [67.6, 18701.0], [67.7, 18706.0], [67.8, 18706.0], [67.9, 18723.0], [68.0, 18723.0], [68.1, 18728.0], [68.2, 18728.0], [68.3, 18735.0], [68.4, 18735.0], [68.5, 18743.0], [68.6, 18743.0], [68.7, 18752.0], [68.8, 18752.0], [68.9, 18794.0], [69.0, 18794.0], [69.1, 18802.0], [69.2, 18802.0], [69.3, 18818.0], [69.4, 18818.0], [69.5, 18818.0], [69.6, 18818.0], [69.7, 18833.0], [69.8, 18833.0], [69.9, 18908.0], [70.0, 18908.0], [70.1, 18911.0], [70.2, 18911.0], [70.3, 18938.0], [70.4, 18938.0], [70.5, 19018.0], [70.6, 19018.0], [70.7, 19050.0], [70.8, 19050.0], [70.9, 19071.0], [71.0, 19071.0], [71.1, 19201.0], [71.2, 19201.0], [71.3, 19211.0], [71.4, 19211.0], [71.5, 19224.0], [71.6, 19224.0], [71.7, 19239.0], [71.8, 19239.0], [71.9, 19248.0], [72.0, 19248.0], [72.1, 19288.0], [72.2, 19288.0], [72.3, 19325.0], [72.4, 19325.0], [72.5, 19413.0], [72.6, 19413.0], [72.7, 19434.0], [72.8, 19434.0], [72.9, 19446.0], [73.0, 19446.0], [73.1, 19480.0], [73.2, 19480.0], [73.3, 19485.0], [73.4, 19485.0], [73.5, 19487.0], [73.6, 19487.0], [73.7, 19516.0], [73.8, 19516.0], [73.9, 19517.0], [74.0, 19517.0], [74.1, 19538.0], [74.2, 19538.0], [74.3, 19560.0], [74.4, 19560.0], [74.5, 19566.0], [74.6, 19566.0], [74.7, 19671.0], [74.8, 19671.0], [74.9, 19869.0], [75.0, 19869.0], [75.1, 19869.0], [75.2, 19869.0], [75.3, 19870.0], [75.4, 19870.0], [75.5, 19875.0], [75.6, 19875.0], [75.7, 19893.0], [75.8, 19893.0], [75.9, 19895.0], [76.0, 19895.0], [76.1, 19918.0], [76.2, 19918.0], [76.3, 19936.0], [76.4, 19936.0], [76.5, 19950.0], [76.6, 19950.0], [76.7, 19976.0], [76.8, 19976.0], [76.9, 19994.0], [77.0, 19994.0], [77.1, 19997.0], [77.2, 19997.0], [77.3, 20017.0], [77.4, 20017.0], [77.5, 20025.0], [77.6, 20025.0], [77.7, 20060.0], [77.8, 20060.0], [77.9, 20065.0], [78.0, 20065.0], [78.1, 20142.0], [78.2, 20142.0], [78.3, 20166.0], [78.4, 20166.0], [78.5, 20175.0], [78.6, 20175.0], [78.7, 20238.0], [78.8, 20238.0], [78.9, 20242.0], [79.0, 20242.0], [79.1, 20253.0], [79.2, 20253.0], [79.3, 20255.0], [79.4, 20255.0], [79.5, 20272.0], [79.6, 20272.0], [79.7, 20292.0], [79.8, 20292.0], [79.9, 20379.0], [80.0, 20379.0], [80.1, 20379.0], [80.2, 20379.0], [80.3, 20405.0], [80.4, 20405.0], [80.5, 20413.0], [80.6, 20413.0], [80.7, 20415.0], [80.8, 20415.0], [80.9, 20417.0], [81.0, 20417.0], [81.1, 20450.0], [81.2, 20450.0], [81.3, 20450.0], [81.4, 20450.0], [81.5, 20468.0], [81.6, 20468.0], [81.7, 20494.0], [81.8, 20494.0], [81.9, 20498.0], [82.0, 20498.0], [82.1, 20503.0], [82.2, 20503.0], [82.3, 20515.0], [82.4, 20515.0], [82.5, 20520.0], [82.6, 20520.0], [82.7, 20533.0], [82.8, 20533.0], [82.9, 20546.0], [83.0, 20546.0], [83.1, 20572.0], [83.2, 20572.0], [83.3, 20576.0], [83.4, 20576.0], [83.5, 20577.0], [83.6, 20577.0], [83.7, 20585.0], [83.8, 20585.0], [83.9, 20626.0], [84.0, 20626.0], [84.1, 20642.0], [84.2, 20642.0], [84.3, 20644.0], [84.4, 20644.0], [84.5, 20655.0], [84.6, 20655.0], [84.7, 20665.0], [84.8, 20665.0], [84.9, 20666.0], [85.0, 20666.0], [85.1, 20672.0], [85.2, 20672.0], [85.3, 20683.0], [85.4, 20683.0], [85.5, 20683.0], [85.6, 20683.0], [85.7, 20684.0], [85.8, 20684.0], [85.9, 20703.0], [86.0, 20703.0], [86.1, 20705.0], [86.2, 20705.0], [86.3, 20714.0], [86.4, 20714.0], [86.5, 20715.0], [86.6, 20715.0], [86.7, 20725.0], [86.8, 20725.0], [86.9, 20727.0], [87.0, 20727.0], [87.1, 20737.0], [87.2, 20737.0], [87.3, 20740.0], [87.4, 20740.0], [87.5, 20750.0], [87.6, 20750.0], [87.7, 20757.0], [87.8, 20757.0], [87.9, 20759.0], [88.0, 20759.0], [88.1, 20761.0], [88.2, 20761.0], [88.3, 20767.0], [88.4, 20767.0], [88.5, 20769.0], [88.6, 20769.0], [88.7, 20781.0], [88.8, 20781.0], [88.9, 20788.0], [89.0, 20788.0], [89.1, 20810.0], [89.2, 20810.0], [89.3, 20828.0], [89.4, 20828.0], [89.5, 20829.0], [89.6, 20829.0], [89.7, 20829.0], [89.8, 20829.0], [89.9, 20845.0], [90.0, 20845.0], [90.1, 20858.0], [90.2, 20858.0], [90.3, 20865.0], [90.4, 20865.0], [90.5, 20867.0], [90.6, 20867.0], [90.7, 20875.0], [90.8, 20875.0], [90.9, 20880.0], [91.0, 20880.0], [91.1, 20902.0], [91.2, 20902.0], [91.3, 20904.0], [91.4, 20904.0], [91.5, 20909.0], [91.6, 20909.0], [91.7, 20910.0], [91.8, 20910.0], [91.9, 20919.0], [92.0, 20919.0], [92.1, 20933.0], [92.2, 20933.0], [92.3, 20937.0], [92.4, 20937.0], [92.5, 20947.0], [92.6, 20947.0], [92.7, 20948.0], [92.8, 20948.0], [92.9, 20952.0], [93.0, 20952.0], [93.1, 20983.0], [93.2, 20983.0], [93.3, 20984.0], [93.4, 20984.0], [93.5, 20987.0], [93.6, 20987.0], [93.7, 21001.0], [93.8, 21001.0], [93.9, 21004.0], [94.0, 21004.0], [94.1, 21006.0], [94.2, 21006.0], [94.3, 21007.0], [94.4, 21007.0], [94.5, 21012.0], [94.6, 21012.0], [94.7, 21042.0], [94.8, 21042.0], [94.9, 21045.0], [95.0, 21045.0], [95.1, 21048.0], [95.2, 21048.0], [95.3, 21049.0], [95.4, 21049.0], [95.5, 21054.0], [95.6, 21054.0], [95.7, 21065.0], [95.8, 21065.0], [95.9, 21075.0], [96.0, 21075.0], [96.1, 21078.0], [96.2, 21078.0], [96.3, 21089.0], [96.4, 21089.0], [96.5, 21092.0], [96.6, 21092.0], [96.7, 21103.0], [96.8, 21103.0], [96.9, 21105.0], [97.0, 21105.0], [97.1, 21117.0], [97.2, 21117.0], [97.3, 21133.0], [97.4, 21133.0], [97.5, 21134.0], [97.6, 21134.0], [97.7, 21147.0], [97.8, 21147.0], [97.9, 21147.0], [98.0, 21147.0], [98.1, 21156.0], [98.2, 21156.0], [98.3, 21170.0], [98.4, 21170.0], [98.5, 21173.0], [98.6, 21173.0], [98.7, 21176.0], [98.8, 21176.0], [98.9, 21181.0], [99.0, 21181.0], [99.1, 21191.0], [99.2, 21191.0], [99.3, 21242.0], [99.4, 21242.0], [99.5, 21270.0], [99.6, 21270.0], [99.7, 21415.0], [99.8, 21415.0], [99.9, 21681.0], [100.0, 21681.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 11300.0, "maxY": 16.0, "series": [{"data": [[11500.0, 5.0], [11300.0, 1.0], [11600.0, 2.0], [11400.0, 1.0], [11700.0, 3.0], [11800.0, 1.0], [12100.0, 1.0], [12200.0, 2.0], [12400.0, 4.0], [12500.0, 3.0], [12600.0, 3.0], [12700.0, 5.0], [12800.0, 5.0], [12900.0, 4.0], [13100.0, 6.0], [13000.0, 1.0], [13200.0, 5.0], [13500.0, 4.0], [13400.0, 3.0], [13600.0, 4.0], [13700.0, 6.0], [13800.0, 5.0], [13900.0, 3.0], [14000.0, 4.0], [14100.0, 3.0], [14200.0, 4.0], [14300.0, 4.0], [14400.0, 6.0], [14500.0, 5.0], [14600.0, 5.0], [14700.0, 7.0], [14800.0, 4.0], [14900.0, 6.0], [15000.0, 12.0], [15100.0, 7.0], [15200.0, 7.0], [15300.0, 7.0], [15400.0, 6.0], [15500.0, 6.0], [15600.0, 6.0], [15700.0, 6.0], [15800.0, 4.0], [15900.0, 6.0], [16000.0, 7.0], [16100.0, 9.0], [16200.0, 6.0], [16300.0, 3.0], [17200.0, 6.0], [16500.0, 9.0], [16400.0, 4.0], [16600.0, 4.0], [16700.0, 6.0], [16800.0, 7.0], [16900.0, 3.0], [17000.0, 6.0], [17100.0, 7.0], [17300.0, 5.0], [17400.0, 5.0], [18200.0, 2.0], [17500.0, 4.0], [17600.0, 3.0], [17700.0, 8.0], [17800.0, 4.0], [17900.0, 7.0], [18000.0, 5.0], [18100.0, 3.0], [18300.0, 10.0], [18400.0, 2.0], [18500.0, 3.0], [18600.0, 6.0], [18700.0, 9.0], [18800.0, 4.0], [18900.0, 3.0], [19000.0, 3.0], [19200.0, 6.0], [19300.0, 1.0], [19400.0, 6.0], [19500.0, 5.0], [19600.0, 1.0], [19800.0, 6.0], [19900.0, 6.0], [20000.0, 4.0], [20100.0, 3.0], [20200.0, 6.0], [20300.0, 2.0], [20400.0, 9.0], [20600.0, 10.0], [20500.0, 9.0], [20700.0, 16.0], [20800.0, 10.0], [20900.0, 13.0], [21000.0, 15.0], [21100.0, 13.0], [21200.0, 2.0], [21400.0, 1.0], [21600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 100.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 400.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 400.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 100.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 250.574, "minX": 1.6225707E12, "maxY": 250.574, "series": [{"data": [[1.6225707E12, 250.574]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6225707E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11384.0, "minX": 1.0, "maxY": 21681.0, "series": [{"data": [[2.0, 21415.0], [3.0, 21270.0], [4.0, 21117.0], [5.0, 21191.0], [6.0, 21105.0], [8.0, 21211.5], [9.0, 21089.0], [10.0, 21103.0], [12.0, 21124.0], [13.0, 21176.0], [14.0, 21092.0], [15.0, 20947.0], [16.0, 21170.0], [17.0, 21147.0], [18.0, 20919.0], [19.0, 21065.0], [20.0, 21012.0], [22.0, 21078.5], [23.0, 21004.0], [25.0, 21031.0], [26.0, 21133.0], [27.0, 21147.0], [28.0, 21134.0], [29.0, 20952.0], [30.0, 21006.0], [31.0, 21054.0], [33.0, 20781.0], [32.0, 21007.0], [36.0, 20951.333333333332], [39.0, 21042.0], [38.0, 20985.0], [41.0, 20904.0], [40.0, 20767.0], [43.0, 20875.0], [42.0, 21049.0], [45.0, 20725.0], [44.0, 20948.0], [47.0, 20684.0], [46.0, 20705.0], [48.0, 20683.0], [51.0, 20712.0], [53.0, 20865.0], [52.0, 20937.0], [55.0, 20802.5], [57.0, 20858.0], [56.0, 20666.0], [59.0, 20655.0], [58.0, 20880.0], [61.0, 20867.0], [60.0, 20845.0], [63.0, 20833.5], [67.0, 20829.0], [66.0, 20626.0], [65.0, 20902.0], [64.0, 20909.0], [71.0, 20769.0], [70.0, 20810.0], [69.0, 20828.0], [68.0, 20829.0], [75.0, 20546.0], [74.0, 20701.5], [72.0, 20727.0], [79.0, 20740.0], [78.0, 20576.0], [77.0, 20737.0], [76.0, 20750.0], [83.0, 20715.0], [82.0, 20714.0], [81.0, 20642.0], [80.0, 20572.0], [87.0, 20491.5], [85.0, 20577.0], [84.0, 20703.0], [91.0, 20520.0], [90.0, 20494.0], [89.0, 20585.0], [88.0, 20515.0], [95.0, 20498.0], [94.0, 20238.0], [93.0, 20503.0], [92.0, 20468.0], [99.0, 20413.0], [98.0, 20415.0], [97.0, 20450.0], [96.0, 20417.0], [103.0, 20255.0], [102.0, 20379.0], [100.0, 20405.0], [107.0, 20272.0], [106.0, 20242.0], [105.0, 20292.0], [104.0, 20253.0], [111.0, 20166.0], [110.0, 20175.0], [109.0, 20025.0], [108.0, 20142.0], [115.0, 20027.0], [113.0, 20065.0], [112.0, 20017.0], [119.0, 19895.0], [118.0, 19936.0], [117.0, 19997.0], [116.0, 19976.0], [123.0, 19875.0], [122.0, 19893.0], [121.0, 19950.0], [120.0, 19918.0], [127.0, 19671.0], [126.0, 19869.0], [125.0, 19869.0], [124.0, 19870.0], [135.0, 19538.0], [134.0, 19480.0], [133.0, 19516.5], [131.0, 19560.0], [130.0, 19485.0], [129.0, 19487.0], [128.0, 19566.0], [143.0, 19248.0], [142.0, 19211.0], [141.0, 19224.0], [140.0, 19325.0], [139.0, 19434.0], [138.0, 19288.0], [137.0, 19413.0], [136.0, 19446.0], [151.0, 18909.5], [149.0, 18938.0], [148.0, 19050.0], [147.0, 19018.0], [146.0, 19071.0], [145.0, 19239.0], [144.0, 19201.0], [159.0, 18723.0], [158.0, 18794.0], [157.0, 18752.0], [156.0, 18728.0], [155.0, 18802.0], [154.0, 18833.0], [153.0, 18818.0], [152.0, 18818.0], [167.0, 18578.5], [165.0, 18613.0], [164.0, 18706.0], [163.0, 18679.0], [162.0, 18700.0], [161.0, 18735.0], [160.0, 18743.0], [174.0, 18566.0], [172.0, 18341.0], [171.0, 18624.0], [170.0, 18632.0], [169.0, 18659.0], [168.0, 18667.0], [183.0, 18360.0], [182.0, 18388.0], [181.0, 18187.0], [180.0, 18288.5], [178.0, 18459.0], [177.0, 18511.0], [176.0, 18325.0], [191.0, 17998.0], [190.0, 18025.0], [189.0, 18294.0], [188.0, 18145.0], [187.0, 18309.0], [186.0, 18357.0], [185.0, 18307.0], [184.0, 18349.0], [199.0, 17780.0], [198.0, 18023.0], [197.0, 18071.0], [196.0, 18081.0], [195.0, 18130.0], [194.0, 17995.0], [193.0, 17970.0], [192.0, 18056.0], [207.0, 17802.0], [206.0, 17829.0], [205.0, 17871.0], [204.0, 17905.0], [203.0, 17879.5], [201.0, 17912.0], [200.0, 17968.0], [215.0, 17658.0], [214.0, 17719.0], [213.0, 17704.0], [212.0, 17727.0], [209.0, 17729.0], [208.0, 17767.0], [223.0, 17502.0], [222.0, 17451.0], [221.0, 17527.0], [220.0, 17486.0], [219.0, 17566.0], [218.0, 17629.0], [217.0, 17621.0], [231.0, 17311.0], [230.0, 17322.0], [229.0, 17318.0], [228.0, 17371.0], [227.0, 17403.0], [226.0, 17411.0], [225.0, 17374.0], [224.0, 17479.0], [239.0, 17186.0], [238.0, 17219.0], [237.0, 17226.0], [236.0, 17231.0], [234.0, 17252.0], [233.0, 17193.0], [232.0, 17270.0], [247.0, 17099.0], [246.0, 17072.0], [245.0, 17138.5], [243.0, 16963.0], [242.0, 17112.0], [241.0, 17184.0], [240.0, 17134.0], [255.0, 16912.0], [254.0, 16873.0], [253.0, 16780.0], [252.0, 16975.0], [251.0, 17009.0], [250.0, 17034.0], [249.0, 17040.0], [248.0, 17073.0], [270.0, 16729.0], [271.0, 16649.0], [269.0, 16771.0], [268.0, 16582.0], [267.0, 16796.0], [266.0, 16808.0], [265.0, 16729.0], [263.0, 16669.0], [257.0, 16687.0], [256.0, 16850.0], [259.0, 16867.0], [258.0, 16802.0], [262.0, 16752.0], [261.0, 16882.0], [260.0, 16773.0], [286.0, 16319.0], [287.0, 16165.0], [285.0, 16342.5], [275.0, 16545.0], [274.0, 16523.0], [273.0, 16562.0], [272.0, 16546.0], [283.0, 16357.0], [282.0, 16444.0], [281.0, 16502.0], [280.0, 16493.0], [279.0, 16443.0], [278.0, 16533.0], [277.0, 16561.0], [276.0, 16517.0], [302.0, 16137.0], [303.0, 16093.0], [301.0, 15982.0], [300.0, 16132.0], [299.0, 16120.0], [297.0, 16110.0], [296.0, 16117.0], [295.0, 16137.0], [289.0, 16319.0], [291.0, 16225.0], [290.0, 16258.0], [294.0, 16235.0], [293.0, 16163.0], [292.0, 16207.0], [317.0, 15873.0], [319.0, 15798.5], [316.0, 15883.0], [307.0, 16079.0], [306.0, 16025.0], [305.0, 16053.0], [304.0, 16120.0], [315.0, 15891.0], [314.0, 15945.0], [312.0, 16017.0], [311.0, 15964.0], [310.0, 15963.0], [309.0, 16044.0], [308.0, 15971.0], [334.0, 15607.0], [335.0, 15605.0], [333.0, 15610.0], [332.0, 15583.0], [331.0, 15584.0], [330.0, 15558.0], [329.0, 15624.0], [328.0, 15669.0], [327.0, 15744.0], [321.0, 15714.0], [320.0, 15763.0], [323.0, 15730.0], [322.0, 15571.0], [326.0, 15616.0], [324.0, 15741.0], [350.0, 15366.0], [351.0, 15242.0], [349.0, 15250.0], [348.0, 15265.0], [347.0, 15395.0], [346.0, 15351.0], [345.0, 15358.0], [344.0, 15357.0], [343.0, 15445.0], [337.0, 15487.0], [336.0, 15440.0], [339.0, 15537.0], [338.0, 15478.0], [342.0, 15363.0], [341.0, 15433.0], [340.0, 15414.0], [366.0, 15147.0], [367.0, 15048.0], [365.0, 15060.0], [364.0, 15179.0], [363.0, 15018.0], [362.0, 15102.0], [361.0, 15104.0], [360.0, 15051.0], [359.0, 15217.0], [353.0, 15231.0], [352.0, 15169.0], [355.0, 15308.0], [354.0, 15223.0], [358.0, 15146.0], [357.0, 15267.0], [356.0, 15193.0], [382.0, 14896.0], [383.0, 14633.0], [381.0, 14859.0], [380.0, 14954.0], [379.0, 14900.0], [378.0, 14910.0], [377.0, 15002.0], [376.0, 15025.0], [375.0, 15018.0], [369.0, 15072.0], [368.0, 15070.0], [371.0, 14950.0], [370.0, 15007.0], [374.0, 15019.0], [373.0, 15027.0], [372.0, 14946.0], [398.0, 14642.0], [399.0, 14599.0], [397.0, 14579.0], [396.0, 14631.0], [395.0, 14735.0], [394.0, 14754.0], [393.0, 14698.0], [392.0, 14715.0], [391.0, 14739.0], [385.0, 14901.0], [384.0, 14624.0], [387.0, 14835.0], [386.0, 14811.0], [390.0, 14748.0], [389.0, 14759.0], [388.0, 14765.0], [414.0, 14222.0], [415.0, 14195.0], [413.0, 14302.0], [412.0, 14307.0], [411.0, 14390.0], [410.0, 14367.0], [409.0, 14471.0], [408.0, 14238.0], [407.0, 14400.0], [401.0, 14595.0], [400.0, 14472.0], [403.0, 14534.0], [402.0, 14454.0], [406.0, 14528.0], [405.0, 14418.0], [404.0, 14436.0], [430.0, 13866.0], [431.0, 13760.0], [429.0, 13892.0], [428.0, 13993.0], [427.0, 13744.0], [426.0, 14009.0], [425.0, 14011.0], [424.0, 14011.0], [423.0, 14040.0], [417.0, 14204.0], [416.0, 14214.0], [419.0, 14146.0], [418.0, 13948.0], [422.0, 13813.0], [421.0, 13940.0], [420.0, 14108.0], [446.0, 13458.0], [447.0, 13522.0], [445.0, 13413.0], [444.0, 13402.0], [443.0, 13588.0], [442.0, 13620.0], [441.0, 13635.0], [440.0, 13670.0], [439.0, 13716.0], [433.0, 13760.0], [432.0, 13861.0], [435.0, 13727.0], [434.0, 13800.0], [438.0, 13621.0], [437.0, 13727.0], [436.0, 13570.0], [462.0, 12913.0], [463.0, 12965.0], [461.0, 12891.0], [460.0, 13108.0], [459.0, 13045.0], [458.0, 13119.0], [457.0, 13144.0], [456.0, 13158.0], [455.0, 13183.0], [449.0, 13288.0], [448.0, 13500.0], [451.0, 13257.0], [450.0, 13281.0], [454.0, 13210.0], [453.0, 13220.0], [452.0, 13183.0], [478.0, 12598.0], [479.0, 12580.0], [477.0, 12602.0], [476.0, 12627.0], [475.0, 12671.0], [474.0, 12727.0], [473.0, 12791.0], [472.0, 12730.0], [471.0, 12821.0], [465.0, 12886.0], [464.0, 12854.0], [467.0, 12930.0], [466.0, 12785.0], [470.0, 12717.0], [469.0, 12846.0], [468.0, 12914.0], [494.0, 11531.0], [495.0, 11465.0], [493.0, 11569.0], [492.0, 11724.0], [491.0, 11719.0], [490.0, 11832.0], [489.0, 11673.0], [488.0, 11725.0], [487.0, 12182.0], [481.0, 12506.0], [480.0, 12445.0], [483.0, 12465.0], [482.0, 12454.0], [486.0, 12204.0], [485.0, 12230.0], [484.0, 12443.0], [500.0, 11523.0], [499.0, 11384.0], [498.0, 11501.0], [497.0, 11613.0], [496.0, 11500.0], [1.0, 21681.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[250.574, 17087.591999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1900.0, "minX": 1.6225707E12, "maxY": 130030.96666666666, "series": [{"data": [[1.6225707E12, 130030.96666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6225707E12, 1900.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6225707E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17087.591999999997, "minX": 1.6225707E12, "maxY": 17087.591999999997, "series": [{"data": [[1.6225707E12, 17087.591999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6225707E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16803.836000000003, "minX": 1.6225707E12, "maxY": 16803.836000000003, "series": [{"data": [[1.6225707E12, 16803.836000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6225707E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8521.051999999998, "minX": 1.6225707E12, "maxY": 8521.051999999998, "series": [{"data": [[1.6225707E12, 8521.051999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6225707E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11384.0, "minX": 1.6225707E12, "maxY": 21681.0, "series": [{"data": [[1.6225707E12, 21681.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6225707E12, 20931.600000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6225707E12, 21241.49]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6225707E12, 21077.85]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6225707E12, 11384.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6225707E12, 17913.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6225707E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11569.0, "minX": 13.0, "maxY": 21111.0, "series": [{"data": [[33.0, 19516.0], [68.0, 15482.5], [40.0, 13284.5], [85.0, 20683.0], [24.0, 12649.0], [48.0, 14528.0], [49.0, 18511.0], [13.0, 11569.0], [52.0, 17465.0], [58.0, 16533.0], [30.0, 21111.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[68.0, 15360.5], [40.0, 13735.5], [48.0, 14624.0], [58.0, 16053.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 85.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11287.0, "minX": 13.0, "maxY": 20828.0, "series": [{"data": [[33.0, 19234.0], [68.0, 15195.0], [40.0, 13003.5], [85.0, 20401.0], [24.0, 12362.5], [48.0, 14247.0], [49.0, 18225.0], [13.0, 11287.0], [52.0, 17183.5], [58.0, 16241.0], [30.0, 20828.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[68.0, 15075.5], [40.0, 13455.5], [48.0, 14335.0], [58.0, 15763.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 85.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.6225707E12, "maxY": 8.333333333333334, "series": [{"data": [[1.6225707E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6225707E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.6225707E12, "maxY": 6.666666666666667, "series": [{"data": [[1.6225707E12, 6.666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6225707E12, 1.6666666666666667]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6225707E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.6225707E12, "maxY": 6.666666666666667, "series": [{"data": [[1.6225707E12, 6.666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6225707E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6225707E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.6225707E12, "maxY": 6.666666666666667, "series": [{"data": [[1.6225707E12, 6.666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6225707E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6225707E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

