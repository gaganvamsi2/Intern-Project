/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11097.0, "minX": 0.0, "maxY": 30827.0, "series": [{"data": [[0.0, 11097.0], [0.1, 11237.0], [0.2, 11342.0], [0.3, 11342.0], [0.4, 11388.0], [0.5, 11395.0], [0.6, 11399.0], [0.7, 11408.0], [0.8, 11414.0], [0.9, 11416.0], [1.0, 11475.0], [1.1, 11478.0], [1.2, 11492.0], [1.3, 11494.0], [1.4, 11494.0], [1.5, 11502.0], [1.6, 11506.0], [1.7, 11536.0], [1.8, 11543.0], [1.9, 11596.0], [2.0, 11637.0], [2.1, 11664.0], [2.2, 11695.0], [2.3, 11717.0], [2.4, 11723.0], [2.5, 11738.0], [2.6, 11740.0], [2.7, 11744.0], [2.8, 11763.0], [2.9, 11790.0], [3.0, 11805.0], [3.1, 11815.0], [3.2, 11824.0], [3.3, 11861.0], [3.4, 11874.0], [3.5, 11886.0], [3.6, 11886.0], [3.7, 11889.0], [3.8, 11903.0], [3.9, 11913.0], [4.0, 11921.0], [4.1, 11926.0], [4.2, 11942.0], [4.3, 11979.0], [4.4, 11982.0], [4.5, 12014.0], [4.6, 12017.0], [4.7, 12039.0], [4.8, 12086.0], [4.9, 12094.0], [5.0, 12096.0], [5.1, 12103.0], [5.2, 12190.0], [5.3, 12193.0], [5.4, 12201.0], [5.5, 12216.0], [5.6, 12254.0], [5.7, 12278.0], [5.8, 12281.0], [5.9, 12281.0], [6.0, 12312.0], [6.1, 12315.0], [6.2, 12329.0], [6.3, 12336.0], [6.4, 12346.0], [6.5, 12350.0], [6.6, 12364.0], [6.7, 12365.0], [6.8, 12369.0], [6.9, 12381.0], [7.0, 12395.0], [7.1, 12396.0], [7.2, 12411.0], [7.3, 12415.0], [7.4, 12425.0], [7.5, 12441.0], [7.6, 12458.0], [7.7, 12476.0], [7.8, 12484.0], [7.9, 12491.0], [8.0, 12498.0], [8.1, 12581.0], [8.2, 12587.0], [8.3, 12587.0], [8.4, 12598.0], [8.5, 12599.0], [8.6, 12612.0], [8.7, 12620.0], [8.8, 12654.0], [8.9, 12668.0], [9.0, 12688.0], [9.1, 12717.0], [9.2, 12721.0], [9.3, 12765.0], [9.4, 12776.0], [9.5, 12780.0], [9.6, 12825.0], [9.7, 12839.0], [9.8, 12854.0], [9.9, 12865.0], [10.0, 12887.0], [10.1, 12898.0], [10.2, 12907.0], [10.3, 12912.0], [10.4, 12913.0], [10.5, 12927.0], [10.6, 12928.0], [10.7, 12946.0], [10.8, 12959.0], [10.9, 12961.0], [11.0, 12996.0], [11.1, 13021.0], [11.2, 13040.0], [11.3, 13061.0], [11.4, 13069.0], [11.5, 13081.0], [11.6, 13088.0], [11.7, 13089.0], [11.8, 13105.0], [11.9, 13114.0], [12.0, 13125.0], [12.1, 13185.0], [12.2, 13210.0], [12.3, 13221.0], [12.4, 13261.0], [12.5, 13274.0], [12.6, 13303.0], [12.7, 13335.0], [12.8, 13341.0], [12.9, 13375.0], [13.0, 13383.0], [13.1, 13402.0], [13.2, 13412.0], [13.3, 13417.0], [13.4, 13420.0], [13.5, 13440.0], [13.6, 13444.0], [13.7, 13444.0], [13.8, 13474.0], [13.9, 13499.0], [14.0, 13528.0], [14.1, 13542.0], [14.2, 13543.0], [14.3, 13563.0], [14.4, 13572.0], [14.5, 13613.0], [14.6, 13623.0], [14.7, 13629.0], [14.8, 13653.0], [14.9, 13662.0], [15.0, 13668.0], [15.1, 13668.0], [15.2, 13682.0], [15.3, 13694.0], [15.4, 13695.0], [15.5, 13698.0], [15.6, 13738.0], [15.7, 13784.0], [15.8, 13784.0], [15.9, 13784.0], [16.0, 13816.0], [16.1, 13825.0], [16.2, 13842.0], [16.3, 13850.0], [16.4, 13851.0], [16.5, 13881.0], [16.6, 13883.0], [16.7, 13904.0], [16.8, 13906.0], [16.9, 13950.0], [17.0, 13982.0], [17.1, 13993.0], [17.2, 14000.0], [17.3, 14001.0], [17.4, 14002.0], [17.5, 14009.0], [17.6, 14019.0], [17.7, 14034.0], [17.8, 14058.0], [17.9, 14079.0], [18.0, 14089.0], [18.1, 14095.0], [18.2, 14098.0], [18.3, 14107.0], [18.4, 14121.0], [18.5, 14156.0], [18.6, 14206.0], [18.7, 14220.0], [18.8, 14260.0], [18.9, 14260.0], [19.0, 14263.0], [19.1, 14309.0], [19.2, 14319.0], [19.3, 14333.0], [19.4, 14336.0], [19.5, 14348.0], [19.6, 14356.0], [19.7, 14363.0], [19.8, 14364.0], [19.9, 14365.0], [20.0, 14385.0], [20.1, 14390.0], [20.2, 14409.0], [20.3, 14418.0], [20.4, 14432.0], [20.5, 14438.0], [20.6, 14452.0], [20.7, 14455.0], [20.8, 14456.0], [20.9, 14503.0], [21.0, 14511.0], [21.1, 14512.0], [21.2, 14514.0], [21.3, 14532.0], [21.4, 14540.0], [21.5, 14618.0], [21.6, 14622.0], [21.7, 14625.0], [21.8, 14627.0], [21.9, 14647.0], [22.0, 14653.0], [22.1, 14658.0], [22.2, 14693.0], [22.3, 14746.0], [22.4, 14750.0], [22.5, 14762.0], [22.6, 14784.0], [22.7, 14789.0], [22.8, 14798.0], [22.9, 14816.0], [23.0, 14821.0], [23.1, 14828.0], [23.2, 14922.0], [23.3, 14923.0], [23.4, 14923.0], [23.5, 14960.0], [23.6, 14965.0], [23.7, 14975.0], [23.8, 14990.0], [23.9, 14990.0], [24.0, 14994.0], [24.1, 15011.0], [24.2, 15012.0], [24.3, 15054.0], [24.4, 15059.0], [24.5, 15118.0], [24.6, 15126.0], [24.7, 15126.0], [24.8, 15126.0], [24.9, 15127.0], [25.0, 15144.0], [25.1, 15161.0], [25.2, 15190.0], [25.3, 15235.0], [25.4, 15244.0], [25.5, 15246.0], [25.6, 15255.0], [25.7, 15279.0], [25.8, 15317.0], [25.9, 15327.0], [26.0, 15334.0], [26.1, 15372.0], [26.2, 15374.0], [26.3, 15399.0], [26.4, 15400.0], [26.5, 15401.0], [26.6, 15412.0], [26.7, 15424.0], [26.8, 15433.0], [26.9, 15434.0], [27.0, 15452.0], [27.1, 15475.0], [27.2, 15479.0], [27.3, 15516.0], [27.4, 15535.0], [27.5, 15538.0], [27.6, 15544.0], [27.7, 15565.0], [27.8, 15568.0], [27.9, 15579.0], [28.0, 15580.0], [28.1, 15595.0], [28.2, 15600.0], [28.3, 15605.0], [28.4, 15613.0], [28.5, 15614.0], [28.6, 15654.0], [28.7, 15662.0], [28.8, 15673.0], [28.9, 15720.0], [29.0, 15739.0], [29.1, 15742.0], [29.2, 15752.0], [29.3, 15754.0], [29.4, 15755.0], [29.5, 15756.0], [29.6, 15768.0], [29.7, 15775.0], [29.8, 15776.0], [29.9, 15776.0], [30.0, 15790.0], [30.1, 15798.0], [30.2, 15814.0], [30.3, 15822.0], [30.4, 15830.0], [30.5, 15839.0], [30.6, 15840.0], [30.7, 15843.0], [30.8, 15847.0], [30.9, 15861.0], [31.0, 15862.0], [31.1, 15865.0], [31.2, 15907.0], [31.3, 15921.0], [31.4, 15950.0], [31.5, 15958.0], [31.6, 15960.0], [31.7, 15966.0], [31.8, 15985.0], [31.9, 15993.0], [32.0, 15997.0], [32.1, 16000.0], [32.2, 16001.0], [32.3, 16011.0], [32.4, 16028.0], [32.5, 16052.0], [32.6, 16091.0], [32.7, 16121.0], [32.8, 16137.0], [32.9, 16163.0], [33.0, 16175.0], [33.1, 16177.0], [33.2, 16190.0], [33.3, 16300.0], [33.4, 16323.0], [33.5, 16348.0], [33.6, 16349.0], [33.7, 16357.0], [33.8, 16361.0], [33.9, 16361.0], [34.0, 16396.0], [34.1, 16405.0], [34.2, 16449.0], [34.3, 16514.0], [34.4, 16531.0], [34.5, 16532.0], [34.6, 16534.0], [34.7, 16549.0], [34.8, 16552.0], [34.9, 16565.0], [35.0, 16570.0], [35.1, 16586.0], [35.2, 16602.0], [35.3, 16617.0], [35.4, 16630.0], [35.5, 16657.0], [35.6, 16669.0], [35.7, 16669.0], [35.8, 16670.0], [35.9, 16681.0], [36.0, 16681.0], [36.1, 16686.0], [36.2, 16709.0], [36.3, 16735.0], [36.4, 16743.0], [36.5, 16750.0], [36.6, 16758.0], [36.7, 16762.0], [36.8, 16779.0], [36.9, 16792.0], [37.0, 16795.0], [37.1, 16826.0], [37.2, 16833.0], [37.3, 16875.0], [37.4, 16881.0], [37.5, 16884.0], [37.6, 16904.0], [37.7, 16926.0], [37.8, 16930.0], [37.9, 16933.0], [38.0, 16939.0], [38.1, 16939.0], [38.2, 16945.0], [38.3, 16960.0], [38.4, 16985.0], [38.5, 17010.0], [38.6, 17017.0], [38.7, 17045.0], [38.8, 17058.0], [38.9, 17061.0], [39.0, 17070.0], [39.1, 17083.0], [39.2, 17092.0], [39.3, 17098.0], [39.4, 17135.0], [39.5, 17160.0], [39.6, 17161.0], [39.7, 17164.0], [39.8, 17166.0], [39.9, 17173.0], [40.0, 17195.0], [40.1, 17200.0], [40.2, 17211.0], [40.3, 17229.0], [40.4, 17242.0], [40.5, 17244.0], [40.6, 17244.0], [40.7, 17254.0], [40.8, 17274.0], [40.9, 17286.0], [41.0, 17307.0], [41.1, 17324.0], [41.2, 17332.0], [41.3, 17355.0], [41.4, 17378.0], [41.5, 17397.0], [41.6, 17407.0], [41.7, 17417.0], [41.8, 17452.0], [41.9, 17459.0], [42.0, 17469.0], [42.1, 17487.0], [42.2, 17487.0], [42.3, 17500.0], [42.4, 17515.0], [42.5, 17520.0], [42.6, 17521.0], [42.7, 17594.0], [42.8, 17614.0], [42.9, 17631.0], [43.0, 17633.0], [43.1, 17650.0], [43.2, 17650.0], [43.3, 17658.0], [43.4, 17673.0], [43.5, 17690.0], [43.6, 17693.0], [43.7, 17712.0], [43.8, 17720.0], [43.9, 17749.0], [44.0, 17796.0], [44.1, 17875.0], [44.2, 17927.0], [44.3, 17930.0], [44.4, 17945.0], [44.5, 17991.0], [44.6, 18001.0], [44.7, 18036.0], [44.8, 18041.0], [44.9, 18056.0], [45.0, 18061.0], [45.1, 18094.0], [45.2, 18098.0], [45.3, 18117.0], [45.4, 18122.0], [45.5, 18133.0], [45.6, 18195.0], [45.7, 18229.0], [45.8, 18278.0], [45.9, 18280.0], [46.0, 18295.0], [46.1, 18299.0], [46.2, 18301.0], [46.3, 18324.0], [46.4, 18358.0], [46.5, 18384.0], [46.6, 18389.0], [46.7, 18404.0], [46.8, 18412.0], [46.9, 18416.0], [47.0, 18418.0], [47.1, 18432.0], [47.2, 18437.0], [47.3, 18458.0], [47.4, 18491.0], [47.5, 18496.0], [47.6, 18505.0], [47.7, 18513.0], [47.8, 18518.0], [47.9, 18586.0], [48.0, 18639.0], [48.1, 18645.0], [48.2, 18678.0], [48.3, 18688.0], [48.4, 18698.0], [48.5, 18707.0], [48.6, 18719.0], [48.7, 18721.0], [48.8, 18724.0], [48.9, 18725.0], [49.0, 18727.0], [49.1, 18730.0], [49.2, 18742.0], [49.3, 18787.0], [49.4, 18797.0], [49.5, 18827.0], [49.6, 18834.0], [49.7, 18834.0], [49.8, 18845.0], [49.9, 18857.0], [50.0, 18863.0], [50.1, 18894.0], [50.2, 18894.0], [50.3, 18907.0], [50.4, 18917.0], [50.5, 18948.0], [50.6, 18949.0], [50.7, 18993.0], [50.8, 18994.0], [50.9, 19008.0], [51.0, 19028.0], [51.1, 19043.0], [51.2, 19071.0], [51.3, 19096.0], [51.4, 19099.0], [51.5, 19104.0], [51.6, 19113.0], [51.7, 19114.0], [51.8, 19126.0], [51.9, 19159.0], [52.0, 19163.0], [52.1, 19164.0], [52.2, 19174.0], [52.3, 19221.0], [52.4, 19228.0], [52.5, 19256.0], [52.6, 19310.0], [52.7, 19313.0], [52.8, 19314.0], [52.9, 19338.0], [53.0, 19344.0], [53.1, 19351.0], [53.2, 19379.0], [53.3, 19387.0], [53.4, 19413.0], [53.5, 19413.0], [53.6, 19427.0], [53.7, 19435.0], [53.8, 19449.0], [53.9, 19464.0], [54.0, 19481.0], [54.1, 19491.0], [54.2, 19494.0], [54.3, 19522.0], [54.4, 19527.0], [54.5, 19558.0], [54.6, 19572.0], [54.7, 19577.0], [54.8, 19586.0], [54.9, 19610.0], [55.0, 19644.0], [55.1, 19655.0], [55.2, 19656.0], [55.3, 19685.0], [55.4, 19696.0], [55.5, 19708.0], [55.6, 19732.0], [55.7, 19747.0], [55.8, 19762.0], [55.9, 19767.0], [56.0, 19782.0], [56.1, 19784.0], [56.2, 19794.0], [56.3, 19801.0], [56.4, 19812.0], [56.5, 19815.0], [56.6, 19835.0], [56.7, 19866.0], [56.8, 19883.0], [56.9, 19890.0], [57.0, 19918.0], [57.1, 19931.0], [57.2, 19959.0], [57.3, 20007.0], [57.4, 20008.0], [57.5, 20016.0], [57.6, 20022.0], [57.7, 20045.0], [57.8, 20056.0], [57.9, 20057.0], [58.0, 20081.0], [58.1, 20094.0], [58.2, 20103.0], [58.3, 20105.0], [58.4, 20138.0], [58.5, 20146.0], [58.6, 20179.0], [58.7, 20186.0], [58.8, 20194.0], [58.9, 20198.0], [59.0, 20219.0], [59.1, 20250.0], [59.2, 20277.0], [59.3, 20278.0], [59.4, 20282.0], [59.5, 20301.0], [59.6, 20342.0], [59.7, 20343.0], [59.8, 20349.0], [59.9, 20372.0], [60.0, 20377.0], [60.1, 20389.0], [60.2, 20397.0], [60.3, 20411.0], [60.4, 20466.0], [60.5, 20468.0], [60.6, 20468.0], [60.7, 20479.0], [60.8, 20481.0], [60.9, 20546.0], [61.0, 20546.0], [61.1, 20547.0], [61.2, 20555.0], [61.3, 20600.0], [61.4, 20601.0], [61.5, 20605.0], [61.6, 20609.0], [61.7, 20615.0], [61.8, 20628.0], [61.9, 20632.0], [62.0, 20650.0], [62.1, 20674.0], [62.2, 20725.0], [62.3, 20726.0], [62.4, 20727.0], [62.5, 20730.0], [62.6, 20742.0], [62.7, 20765.0], [62.8, 20769.0], [62.9, 20770.0], [63.0, 20790.0], [63.1, 20839.0], [63.2, 20864.0], [63.3, 20891.0], [63.4, 20897.0], [63.5, 20902.0], [63.6, 20918.0], [63.7, 20946.0], [63.8, 20964.0], [63.9, 20967.0], [64.0, 20994.0], [64.1, 20998.0], [64.2, 21007.0], [64.3, 21010.0], [64.4, 21030.0], [64.5, 21068.0], [64.6, 21077.0], [64.7, 21118.0], [64.8, 21136.0], [64.9, 21146.0], [65.0, 21156.0], [65.1, 21172.0], [65.2, 21191.0], [65.3, 21197.0], [65.4, 21215.0], [65.5, 21218.0], [65.6, 21223.0], [65.7, 21234.0], [65.8, 21251.0], [65.9, 21256.0], [66.0, 21284.0], [66.1, 21287.0], [66.2, 21288.0], [66.3, 21303.0], [66.4, 21334.0], [66.5, 21352.0], [66.6, 21357.0], [66.7, 21381.0], [66.8, 21388.0], [66.9, 21430.0], [67.0, 21440.0], [67.1, 21441.0], [67.2, 21455.0], [67.3, 21461.0], [67.4, 21490.0], [67.5, 21496.0], [67.6, 21507.0], [67.7, 21513.0], [67.8, 21523.0], [67.9, 21544.0], [68.0, 21578.0], [68.1, 21583.0], [68.2, 21611.0], [68.3, 21628.0], [68.4, 21629.0], [68.5, 21641.0], [68.6, 21662.0], [68.7, 21666.0], [68.8, 21687.0], [68.9, 21689.0], [69.0, 21727.0], [69.1, 21731.0], [69.2, 21770.0], [69.3, 21775.0], [69.4, 21784.0], [69.5, 21797.0], [69.6, 21807.0], [69.7, 21818.0], [69.8, 21827.0], [69.9, 21828.0], [70.0, 22953.0], [70.1, 23193.0], [70.2, 23277.0], [70.3, 23403.0], [70.4, 23416.0], [70.5, 23458.0], [70.6, 23528.0], [70.7, 23594.0], [70.8, 23600.0], [70.9, 23607.0], [71.0, 23652.0], [71.1, 23922.0], [71.2, 23980.0], [71.3, 23993.0], [71.4, 24034.0], [71.5, 24088.0], [71.6, 24124.0], [71.7, 24158.0], [71.8, 24171.0], [71.9, 24199.0], [72.0, 24208.0], [72.1, 24216.0], [72.2, 24226.0], [72.3, 24242.0], [72.4, 24253.0], [72.5, 24281.0], [72.6, 24303.0], [72.7, 24308.0], [72.8, 24313.0], [72.9, 24323.0], [73.0, 24366.0], [73.1, 24387.0], [73.2, 24413.0], [73.3, 24440.0], [73.4, 24453.0], [73.5, 24480.0], [73.6, 24528.0], [73.7, 24563.0], [73.8, 24575.0], [73.9, 24588.0], [74.0, 24588.0], [74.1, 24599.0], [74.2, 24609.0], [74.3, 24614.0], [74.4, 24642.0], [74.5, 24646.0], [74.6, 24661.0], [74.7, 24688.0], [74.8, 24800.0], [74.9, 24816.0], [75.0, 24824.0], [75.1, 24828.0], [75.2, 24844.0], [75.3, 24845.0], [75.4, 24876.0], [75.5, 24878.0], [75.6, 24891.0], [75.7, 24899.0], [75.8, 24901.0], [75.9, 24904.0], [76.0, 24908.0], [76.1, 24913.0], [76.2, 24914.0], [76.3, 24927.0], [76.4, 24934.0], [76.5, 24938.0], [76.6, 24944.0], [76.7, 24960.0], [76.8, 24993.0], [76.9, 25097.0], [77.0, 25103.0], [77.1, 25112.0], [77.2, 25306.0], [77.3, 25315.0], [77.4, 25347.0], [77.5, 25375.0], [77.6, 25379.0], [77.7, 25420.0], [77.8, 25477.0], [77.9, 25537.0], [78.0, 25579.0], [78.1, 25586.0], [78.2, 25593.0], [78.3, 25594.0], [78.4, 25597.0], [78.5, 25657.0], [78.6, 25664.0], [78.7, 25691.0], [78.8, 25692.0], [78.9, 25697.0], [79.0, 25785.0], [79.1, 25787.0], [79.2, 25810.0], [79.3, 25833.0], [79.4, 25834.0], [79.5, 25888.0], [79.6, 25934.0], [79.7, 25980.0], [79.8, 25986.0], [79.9, 25997.0], [80.0, 26002.0], [80.1, 26007.0], [80.2, 26009.0], [80.3, 26013.0], [80.4, 26025.0], [80.5, 26025.0], [80.6, 26073.0], [80.7, 26077.0], [80.8, 26081.0], [80.9, 26102.0], [81.0, 26180.0], [81.1, 26203.0], [81.2, 26208.0], [81.3, 26239.0], [81.4, 26246.0], [81.5, 26259.0], [81.6, 26284.0], [81.7, 26307.0], [81.8, 26329.0], [81.9, 26330.0], [82.0, 26362.0], [82.1, 26374.0], [82.2, 26380.0], [82.3, 26395.0], [82.4, 26417.0], [82.5, 26428.0], [82.6, 26431.0], [82.7, 26470.0], [82.8, 26482.0], [82.9, 26500.0], [83.0, 26507.0], [83.1, 26507.0], [83.2, 26510.0], [83.3, 26511.0], [83.4, 26515.0], [83.5, 26518.0], [83.6, 26519.0], [83.7, 26546.0], [83.8, 26568.0], [83.9, 26597.0], [84.0, 26607.0], [84.1, 26617.0], [84.2, 26627.0], [84.3, 26629.0], [84.4, 26650.0], [84.5, 26683.0], [84.6, 26694.0], [84.7, 26698.0], [84.8, 26722.0], [84.9, 26728.0], [85.0, 26734.0], [85.1, 26744.0], [85.2, 26771.0], [85.3, 26792.0], [85.4, 26808.0], [85.5, 26816.0], [85.6, 26833.0], [85.7, 26847.0], [85.8, 26854.0], [85.9, 26878.0], [86.0, 26887.0], [86.1, 26890.0], [86.2, 26895.0], [86.3, 26898.0], [86.4, 26901.0], [86.5, 26904.0], [86.6, 26905.0], [86.7, 26911.0], [86.8, 26918.0], [86.9, 26921.0], [87.0, 26921.0], [87.1, 26937.0], [87.2, 26984.0], [87.3, 27002.0], [87.4, 27007.0], [87.5, 27011.0], [87.6, 27012.0], [87.7, 27015.0], [87.8, 27040.0], [87.9, 27101.0], [88.0, 27104.0], [88.1, 27110.0], [88.2, 27110.0], [88.3, 27111.0], [88.4, 27112.0], [88.5, 27119.0], [88.6, 27120.0], [88.7, 27125.0], [88.8, 27134.0], [88.9, 27147.0], [89.0, 27149.0], [89.1, 27182.0], [89.2, 27198.0], [89.3, 27218.0], [89.4, 27218.0], [89.5, 27224.0], [89.6, 27226.0], [89.7, 27234.0], [89.8, 27234.0], [89.9, 27238.0], [90.0, 27239.0], [90.1, 27241.0], [90.2, 27252.0], [90.3, 27256.0], [90.4, 27288.0], [90.5, 27288.0], [90.6, 27303.0], [90.7, 27312.0], [90.8, 27315.0], [90.9, 27318.0], [91.0, 27321.0], [91.1, 27322.0], [91.2, 27328.0], [91.3, 27329.0], [91.4, 27335.0], [91.5, 27338.0], [91.6, 27341.0], [91.7, 27347.0], [91.8, 27386.0], [91.9, 27398.0], [92.0, 27412.0], [92.1, 27418.0], [92.2, 27421.0], [92.3, 27423.0], [92.4, 27428.0], [92.5, 27433.0], [92.6, 27433.0], [92.7, 27435.0], [92.8, 27443.0], [92.9, 27448.0], [93.0, 27453.0], [93.1, 27467.0], [93.2, 27476.0], [93.3, 27486.0], [93.4, 27497.0], [93.5, 27500.0], [93.6, 27502.0], [93.7, 27506.0], [93.8, 27507.0], [93.9, 27507.0], [94.0, 27509.0], [94.1, 27517.0], [94.2, 27517.0], [94.3, 27520.0], [94.4, 27521.0], [94.5, 27558.0], [94.6, 27602.0], [94.7, 27603.0], [94.8, 27604.0], [94.9, 27605.0], [95.0, 27613.0], [95.1, 27615.0], [95.2, 27621.0], [95.3, 27626.0], [95.4, 27626.0], [95.5, 27627.0], [95.6, 27632.0], [95.7, 27632.0], [95.8, 27633.0], [95.9, 27635.0], [96.0, 27638.0], [96.1, 27639.0], [96.2, 27640.0], [96.3, 27644.0], [96.4, 27647.0], [96.5, 27647.0], [96.6, 27651.0], [96.7, 27651.0], [96.8, 27654.0], [96.9, 27655.0], [97.0, 27657.0], [97.1, 27658.0], [97.2, 27662.0], [97.3, 27663.0], [97.4, 27664.0], [97.5, 27664.0], [97.6, 27667.0], [97.7, 27667.0], [97.8, 27669.0], [97.9, 27669.0], [98.0, 27673.0], [98.1, 27674.0], [98.2, 27677.0], [98.3, 27684.0], [98.4, 27690.0], [98.5, 27697.0], [98.6, 27699.0], [98.7, 27709.0], [98.8, 27714.0], [98.9, 27716.0], [99.0, 27723.0], [99.1, 27726.0], [99.2, 27734.0], [99.3, 27734.0], [99.4, 27738.0], [99.5, 27738.0], [99.6, 27745.0], [99.7, 27868.0], [99.8, 27942.0], [99.9, 30827.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 11000.0, "maxY": 41.0, "series": [{"data": [[11000.0, 1.0], [11200.0, 1.0], [11400.0, 7.0], [11300.0, 5.0], [11700.0, 7.0], [11500.0, 5.0], [11600.0, 3.0], [11800.0, 8.0], [11900.0, 8.0], [12000.0, 6.0], [12200.0, 6.0], [12100.0, 3.0], [12300.0, 12.0], [12400.0, 9.0], [12600.0, 5.0], [12500.0, 5.0], [12700.0, 5.0], [12800.0, 6.0], [12900.0, 9.0], [13000.0, 7.0], [13100.0, 4.0], [13200.0, 4.0], [13300.0, 5.0], [13400.0, 9.0], [13500.0, 5.0], [13600.0, 11.0], [13700.0, 4.0], [13800.0, 7.0], [13900.0, 5.0], [14000.0, 11.0], [14100.0, 3.0], [14200.0, 4.0], [14300.0, 11.0], [14400.0, 7.0], [14500.0, 6.0], [14600.0, 8.0], [14700.0, 6.0], [14800.0, 3.0], [14900.0, 9.0], [15000.0, 4.0], [15100.0, 8.0], [15200.0, 5.0], [15300.0, 6.0], [15400.0, 9.0], [15500.0, 9.0], [15600.0, 7.0], [15700.0, 13.0], [15800.0, 10.0], [15900.0, 9.0], [16000.0, 6.0], [16100.0, 6.0], [16300.0, 8.0], [17200.0, 9.0], [16500.0, 9.0], [16600.0, 10.0], [16400.0, 2.0], [16700.0, 9.0], [16800.0, 5.0], [16900.0, 9.0], [17000.0, 9.0], [17100.0, 7.0], [17300.0, 6.0], [17400.0, 7.0], [18200.0, 5.0], [17500.0, 5.0], [17600.0, 9.0], [17700.0, 4.0], [17900.0, 4.0], [18000.0, 7.0], [18100.0, 4.0], [18300.0, 5.0], [18400.0, 9.0], [17800.0, 1.0], [19200.0, 3.0], [18500.0, 4.0], [18600.0, 5.0], [18800.0, 8.0], [18900.0, 6.0], [18700.0, 10.0], [19000.0, 6.0], [19100.0, 8.0], [19300.0, 8.0], [19400.0, 9.0], [19600.0, 6.0], [19500.0, 6.0], [19700.0, 8.0], [19800.0, 7.0], [19900.0, 3.0], [20000.0, 9.0], [20100.0, 8.0], [20200.0, 5.0], [20300.0, 8.0], [20400.0, 6.0], [21300.0, 6.0], [20600.0, 9.0], [20500.0, 4.0], [20700.0, 9.0], [20800.0, 4.0], [20900.0, 7.0], [21000.0, 5.0], [21100.0, 7.0], [21200.0, 9.0], [21400.0, 7.0], [21500.0, 6.0], [21600.0, 8.0], [21700.0, 6.0], [21800.0, 4.0], [22900.0, 1.0], [23100.0, 1.0], [23500.0, 2.0], [23400.0, 3.0], [23200.0, 1.0], [23600.0, 3.0], [23900.0, 3.0], [24000.0, 2.0], [24200.0, 6.0], [24100.0, 4.0], [24300.0, 6.0], [24400.0, 4.0], [24500.0, 6.0], [24600.0, 6.0], [24800.0, 11.0], [24900.0, 11.0], [25100.0, 2.0], [25000.0, 1.0], [25400.0, 2.0], [25500.0, 6.0], [25300.0, 5.0], [25800.0, 4.0], [25600.0, 5.0], [25900.0, 4.0], [26000.0, 9.0], [26100.0, 2.0], [25700.0, 2.0], [26200.0, 6.0], [26500.0, 11.0], [26400.0, 5.0], [26600.0, 8.0], [26300.0, 7.0], [27400.0, 15.0], [26700.0, 6.0], [26800.0, 10.0], [26900.0, 9.0], [27000.0, 6.0], [27100.0, 14.0], [27200.0, 13.0], [27300.0, 14.0], [27500.0, 11.0], [27600.0, 41.0], [27700.0, 10.0], [27900.0, 1.0], [27800.0, 1.0], [30800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 30800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 399.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 601.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 601.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 399.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 205.60731707317046, "minX": 1.6225707E12, "maxY": 705.5525423728816, "series": [{"data": [[1.6225707E12, 705.5525423728816], [1.62257076E12, 205.60731707317046]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257076E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11097.0, "minX": 1.0, "maxY": 30827.0, "series": [{"data": [[2.0, 27868.0], [3.0, 27716.0], [5.0, 27741.5], [7.0, 27730.0], [8.0, 27699.0], [9.0, 27734.0], [12.0, 27714.666666666668], [13.0, 27723.0], [14.0, 27673.0], [15.0, 27684.0], [16.0, 27669.0], [17.0, 27677.0], [18.0, 27674.0], [19.0, 27647.0], [20.0, 27690.0], [21.0, 27664.0], [22.0, 27651.0], [23.0, 27663.0], [24.0, 27667.0], [25.0, 27662.0], [27.0, 27659.0], [28.0, 27664.0], [29.0, 27632.0], [30.0, 27658.0], [31.0, 27654.0], [32.0, 27644.0], [35.0, 27640.0], [34.0, 27658.0], [37.0, 27627.0], [36.0, 27633.0], [39.0, 27615.0], [38.0, 27626.0], [41.0, 27605.0], [40.0, 27613.0], [43.0, 27632.0], [42.0, 27635.0], [45.0, 27621.0], [44.0, 27626.0], [47.0, 27602.5], [49.0, 27517.0], [48.0, 27521.0], [51.0, 27509.0], [50.0, 27520.0], [52.0, 27486.0], [55.0, 27507.0], [54.0, 27506.5], [57.0, 27476.0], [56.0, 27497.0], [59.0, 27448.0], [58.0, 27453.0], [61.0, 27433.0], [60.0, 27467.0], [63.0, 27435.0], [62.0, 27443.0], [67.0, 27386.0], [66.0, 27430.5], [64.0, 27418.0], [71.0, 27333.5], [69.0, 27677.0], [75.0, 27322.0], [74.0, 27323.0], [72.0, 27335.0], [79.0, 27234.0], [78.0, 27252.0], [77.0, 27638.0], [76.0, 27288.0], [83.0, 27182.0], [82.0, 27604.0], [81.0, 27241.0], [80.0, 27238.0], [87.0, 27237.0], [85.0, 27211.0], [91.0, 27657.0], [90.0, 27147.0], [89.0, 27608.0], [95.0, 27110.0], [94.0, 27134.0], [93.0, 27390.0], [99.0, 27134.0], [97.0, 27500.0], [96.0, 27639.0], [103.0, 27104.0], [102.0, 27112.0], [101.0, 27423.0], [100.0, 27110.0], [107.0, 27517.0], [106.0, 27012.0], [105.0, 27398.0], [104.0, 27558.0], [111.0, 26911.0], [110.0, 27288.0], [109.0, 26918.0], [108.0, 27011.0], [115.0, 27161.0], [113.0, 26895.0], [112.0, 26937.0], [119.0, 27218.0], [118.0, 26866.0], [116.0, 26905.0], [122.0, 26827.5], [120.0, 27347.0], [127.0, 27321.0], [126.0, 27312.0], [125.0, 26833.0], [124.0, 27226.0], [135.0, 27007.0], [134.0, 26744.0], [133.0, 27226.0], [132.0, 27239.0], [131.0, 27234.0], [130.0, 27303.0], [129.0, 27065.5], [143.0, 26755.5], [141.0, 26875.5], [139.0, 26921.0], [138.0, 27002.0], [137.0, 26728.0], [136.0, 27015.0], [151.0, 27040.0], [150.0, 26568.0], [149.0, 26890.0], [148.0, 26627.0], [147.0, 26898.0], [146.0, 26629.0], [145.0, 26597.0], [144.0, 27120.0], [159.0, 26756.666666666668], [156.0, 26609.666666666668], [153.0, 26546.0], [152.0, 26507.0], [167.0, 26683.0], [166.0, 26428.0], [165.0, 26698.0], [164.0, 26694.0], [163.0, 26431.0], [162.0, 26921.0], [161.0, 26417.0], [160.0, 26722.0], [175.0, 26246.0], [174.0, 26259.0], [173.0, 26307.0], [172.0, 26330.0], [171.0, 26362.0], [170.0, 26329.0], [169.0, 26887.0], [168.0, 26395.0], [183.0, 26203.0], [182.0, 26482.0], [181.0, 26500.0], [180.0, 26208.0], [179.0, 26510.0], [178.0, 26470.0], [177.0, 26239.0], [176.0, 26734.0], [191.0, 26013.0], [190.0, 26511.0], [189.0, 26025.0], [188.0, 26081.0], [187.0, 26102.0], [186.0, 26374.0], [185.0, 26380.0], [184.0, 26617.0], [199.0, 26073.0], [198.0, 26002.0], [197.0, 26132.0], [195.0, 26009.0], [194.0, 26002.0], [192.0, 26507.0], [207.0, 25691.0], [206.0, 25692.0], [205.0, 25787.0], [204.0, 25785.0], [203.0, 25810.0], [202.0, 26077.0], [201.0, 25833.0], [200.0, 25834.0], [215.0, 25590.0], [213.0, 25593.0], [212.0, 25742.5], [210.0, 26025.0], [209.0, 25657.0], [208.0, 26180.0], [223.0, 25347.0], [222.0, 25664.0], [221.0, 25536.0], [219.0, 25379.0], [218.0, 25986.0], [217.0, 25934.0], [216.0, 25579.0], [231.0, 24960.0], [230.0, 25097.0], [229.0, 25112.0], [228.0, 25420.0], [227.0, 25477.0], [226.0, 25537.0], [225.0, 25306.0], [224.0, 25315.0], [239.0, 25008.0], [237.0, 24904.0], [236.0, 24927.0], [235.0, 24914.0], [234.0, 24934.0], [233.0, 24941.0], [247.0, 24844.0], [246.0, 24828.0], [245.0, 24831.0], [244.0, 24878.0], [243.0, 24901.0], [242.0, 24891.0], [241.0, 24908.0], [240.0, 24899.0], [255.0, 24661.0], [254.0, 24876.0], [253.0, 24688.0], [252.0, 24896.5], [250.0, 24824.0], [249.0, 24816.0], [248.0, 24845.0], [270.0, 24528.0], [271.0, 24323.0], [269.0, 24366.0], [268.0, 24387.0], [267.0, 24575.0], [266.0, 24413.0], [265.0, 24599.0], [264.0, 24609.0], [263.0, 24453.0], [257.0, 24646.0], [256.0, 24642.0], [259.0, 24588.0], [258.0, 24614.0], [262.0, 24480.0], [261.0, 24563.0], [260.0, 24588.0], [286.0, 24208.0], [287.0, 24034.0], [285.0, 24226.0], [284.0, 24088.0], [283.0, 24281.0], [282.0, 24124.0], [281.0, 24313.0], [280.0, 24158.0], [279.0, 24171.0], [273.0, 24303.0], [272.0, 24308.0], [275.0, 24253.0], [274.0, 24440.0], [278.0, 24199.0], [277.0, 24216.0], [276.0, 24242.0], [301.0, 22953.0], [303.0, 21827.5], [300.0, 23193.0], [291.0, 23652.0], [290.0, 23980.0], [289.0, 23922.0], [288.0, 23993.0], [299.0, 23594.0], [298.0, 23416.0], [297.0, 23403.0], [296.0, 23277.0], [295.0, 23528.0], [294.0, 23458.0], [293.0, 23600.0], [292.0, 23607.0], [318.0, 21629.0], [319.0, 21611.0], [317.0, 21628.0], [316.0, 21641.0], [315.0, 21662.0], [314.0, 21666.0], [313.0, 21687.0], [312.0, 21689.0], [311.0, 21727.0], [305.0, 21807.0], [304.0, 21818.0], [307.0, 21784.0], [306.0, 21797.0], [310.0, 21731.0], [309.0, 21770.0], [308.0, 21775.0], [334.0, 21381.0], [335.0, 21357.0], [333.0, 21388.0], [332.0, 21430.0], [331.0, 21440.5], [329.0, 21455.0], [328.0, 21461.0], [327.0, 21490.0], [321.0, 21578.0], [320.0, 21583.0], [323.0, 21523.0], [322.0, 21544.0], [326.0, 21496.0], [325.0, 21507.0], [324.0, 21513.0], [350.0, 21172.0], [351.0, 21156.0], [349.0, 21191.0], [348.0, 21197.0], [347.0, 21215.0], [346.0, 21218.0], [345.0, 21223.0], [344.0, 21234.0], [343.0, 21251.0], [337.0, 21334.0], [336.0, 21352.0], [339.0, 21288.0], [338.0, 21303.0], [342.0, 21256.0], [341.0, 21284.0], [340.0, 21287.0], [366.0, 20902.0], [367.0, 20897.0], [365.0, 20918.0], [364.0, 20946.0], [363.0, 20964.0], [362.0, 20967.0], [361.0, 20994.0], [360.0, 20998.0], [359.0, 21007.0], [353.0, 21136.0], [352.0, 21146.0], [355.0, 21077.0], [354.0, 21118.0], [358.0, 21010.0], [357.0, 21030.0], [356.0, 21068.0], [382.0, 20632.0], [383.0, 20628.0], [381.0, 20650.0], [380.0, 20674.0], [379.0, 20725.0], [378.0, 20726.0], [377.0, 20727.0], [376.0, 20730.0], [375.0, 20742.0], [369.0, 20864.0], [368.0, 20891.0], [371.0, 20790.0], [370.0, 20839.0], [374.0, 20765.0], [373.0, 20769.0], [372.0, 20770.0], [398.0, 20411.0], [399.0, 20397.0], [397.0, 20466.0], [396.0, 20468.0], [395.0, 20468.0], [394.0, 20479.0], [393.0, 20481.0], [392.0, 20546.333333333332], [389.0, 20555.0], [387.0, 20601.0], [386.0, 20605.0], [385.0, 20609.0], [384.0, 20615.0], [388.0, 20600.0], [414.0, 20186.0], [415.0, 20179.0], [413.0, 20194.0], [412.0, 20198.0], [411.0, 20219.0], [410.0, 20250.0], [409.0, 20277.0], [408.0, 20278.0], [407.0, 20282.0], [401.0, 20377.0], [400.0, 20389.0], [403.0, 20349.0], [402.0, 20372.0], [406.0, 20301.0], [405.0, 20342.0], [404.0, 20343.0], [430.0, 19931.0], [431.0, 19918.0], [429.0, 19959.0], [428.0, 20007.5], [426.0, 20016.0], [425.0, 20022.0], [424.0, 20045.0], [423.0, 20056.0], [417.0, 20138.0], [416.0, 20146.0], [419.0, 20103.0], [418.0, 20105.0], [422.0, 20057.0], [421.0, 20081.0], [420.0, 20094.0], [446.0, 19696.0], [447.0, 19708.0], [445.0, 19747.0], [444.0, 19732.0], [443.0, 19762.0], [442.0, 19767.0], [441.0, 19794.0], [440.0, 19782.0], [439.0, 19784.0], [433.0, 19883.0], [432.0, 19890.0], [435.0, 19835.0], [434.0, 19866.0], [438.0, 19801.0], [437.0, 19812.0], [436.0, 19815.0], [462.0, 19464.0], [463.0, 19449.0], [461.0, 19481.0], [460.0, 19491.0], [459.0, 19494.0], [458.0, 19522.0], [457.0, 19527.0], [456.0, 19558.0], [455.0, 19572.0], [449.0, 19656.0], [448.0, 19685.0], [451.0, 19644.0], [450.0, 19655.0], [454.0, 19577.0], [453.0, 19586.0], [452.0, 19610.0], [478.0, 19221.0], [479.0, 19174.0], [477.0, 19228.0], [476.0, 19256.0], [475.0, 19310.0], [474.0, 19313.0], [473.0, 19314.0], [472.0, 19338.0], [471.0, 19344.0], [465.0, 19427.0], [464.0, 19435.0], [467.0, 19413.0], [466.0, 19413.0], [470.0, 19351.0], [469.0, 19379.0], [468.0, 19387.0], [494.0, 18948.0], [495.0, 18949.0], [493.0, 18994.0], [492.0, 19008.0], [491.0, 19028.0], [490.0, 19043.0], [489.0, 19071.0], [488.0, 19096.0], [487.0, 19099.0], [481.0, 19163.0], [480.0, 19164.0], [483.0, 19126.0], [482.0, 19159.0], [486.0, 19104.0], [485.0, 19113.5], [509.0, 18725.0], [511.0, 18719.0], [508.0, 18727.0], [499.0, 18863.0], [498.0, 18894.0], [497.0, 18907.0], [496.0, 18917.0], [507.0, 18742.0], [506.0, 18787.0], [505.0, 18797.0], [504.0, 18827.0], [503.0, 18834.0], [502.0, 18834.0], [501.0, 18845.0], [500.0, 18857.0], [540.0, 18491.0], [543.0, 18122.0], [529.0, 18894.0], [528.0, 18518.0], [531.0, 18645.0], [530.0, 18324.0], [533.0, 18280.0], [532.0, 18301.0], [542.0, 18437.0], [541.0, 18299.0], [539.0, 18195.0], [538.0, 18358.0], [537.0, 18229.0], [536.0, 18389.0], [527.0, 18404.0], [513.0, 18707.0], [512.0, 18722.5], [515.0, 18678.0], [514.0, 18688.0], [517.0, 18730.0], [516.0, 18639.0], [519.0, 18513.0], [518.0, 18698.0], [526.0, 18412.0], [525.0, 18993.0], [524.0, 18586.0], [523.0, 18432.0], [522.0, 18458.0], [521.0, 18496.0], [520.0, 18505.0], [535.0, 18418.0], [534.0, 18278.0], [569.0, 17650.0], [574.0, 17568.5], [575.0, 17658.0], [561.0, 17720.0], [560.0, 17930.0], [563.0, 17796.0], [562.0, 17631.0], [565.0, 17690.0], [564.0, 17749.0], [572.0, 17487.0], [571.0, 17515.0], [570.0, 17693.0], [568.0, 17521.0], [551.0, 18098.0], [550.0, 18295.0], [549.0, 18036.0], [548.0, 18041.0], [547.0, 18056.0], [546.0, 18061.0], [545.0, 18416.0], [544.0, 18117.0], [559.0, 17991.0], [558.0, 18001.0], [557.0, 18133.0], [556.0, 18384.0], [555.0, 17875.0], [554.0, 17927.0], [553.0, 17945.0], [552.0, 18094.0], [567.0, 17712.0], [566.0, 17673.0], [600.0, 17274.0], [605.0, 17236.5], [607.0, 17069.5], [592.0, 17173.0], [595.0, 17162.5], [593.0, 17166.0], [603.0, 17244.0], [602.0, 17092.0], [601.0, 17098.0], [591.0, 17355.0], [577.0, 17594.0], [576.0, 17633.0], [579.0, 17452.0], [578.0, 17459.0], [581.0, 17407.0], [580.0, 17614.0], [583.0, 17378.0], [582.0, 17520.0], [590.0, 17332.0], [589.0, 17397.0], [588.0, 17242.0], [587.0, 17417.0], [586.0, 17254.0], [585.0, 17469.0], [584.0, 17500.0], [599.0, 17286.0], [598.0, 17307.0], [597.0, 17324.0], [596.0, 17160.0], [632.0, 16735.0], [637.0, 16833.0], [638.0, 16670.0], [625.0, 16795.0], [624.0, 16933.0], [627.0, 16926.0], [626.0, 16945.0], [636.0, 16753.5], [634.0, 16709.0], [633.0, 16881.0], [623.0, 16960.0], [608.0, 17058.0], [610.0, 17045.0], [609.0, 16930.0], [613.0, 17010.0], [612.0, 17203.0], [615.0, 17083.0], [614.0, 17135.0], [622.0, 16939.0], [621.0, 16985.0], [620.0, 17017.0], [619.0, 16884.0], [618.0, 16904.0], [617.0, 17070.0], [616.0, 17061.0], [631.0, 16743.0], [630.0, 16875.0], [629.0, 16750.0], [628.0, 16762.0], [668.0, 16357.0], [671.0, 16137.0], [657.0, 16405.0], [656.0, 16549.0], [659.0, 16348.0], [658.0, 16361.0], [661.0, 16323.0], [660.0, 16349.0], [670.0, 16177.0], [669.0, 16565.0], [667.0, 16617.0], [666.0, 16361.0], [665.0, 16396.0], [664.0, 16449.0], [655.0, 16534.0], [641.0, 16792.0], [640.0, 16531.5], [643.0, 16602.0], [642.0, 16758.0], [645.0, 16570.0], [644.0, 16686.0], [647.0, 16681.0], [646.0, 16779.0], [654.0, 16552.0], [653.0, 16586.0], [652.0, 16630.0], [651.0, 16669.0], [650.0, 16669.0], [649.0, 16657.0], [648.0, 16514.0], [663.0, 16300.0], [662.0, 16190.0], [696.0, 15776.0], [702.0, 15753.0], [703.0, 15861.0], [689.0, 15985.0], [688.0, 15997.0], [691.0, 15847.0], [690.0, 15865.0], [700.0, 15755.0], [699.0, 15843.0], [698.0, 15775.5], [687.0, 15907.0], [674.0, 16169.0], [672.0, 16028.0], [677.0, 16000.5], [675.0, 16121.0], [679.0, 15966.0], [678.0, 15993.0], [686.0, 16011.0], [685.0, 15921.0], [684.0, 16071.5], [682.0, 15950.0], [681.0, 15958.0], [680.0, 15960.0], [695.0, 15790.0], [694.0, 15822.0], [693.0, 15830.0], [692.0, 15839.0], [728.0, 15538.0], [734.0, 15434.0], [735.0, 15475.0], [720.0, 15654.0], [722.0, 15580.0], [721.0, 15614.0], [733.0, 15464.666666666666], [730.0, 15401.0], [729.0, 15544.0], [719.0, 15613.0], [705.0, 15862.0], [704.0, 15814.0], [707.0, 15798.0], [706.0, 15840.0], [709.0, 15673.0], [708.0, 15768.0], [711.0, 15742.0], [710.0, 15756.0], [718.0, 15424.0], [717.0, 15433.0], [716.0, 15662.0], [715.0, 15720.0], [714.0, 15568.0], [713.0, 15579.0], [712.0, 15739.0], [727.0, 15565.0], [726.0, 15570.0], [724.0, 15595.0], [723.0, 15600.0], [764.0, 15011.0], [767.0, 14965.0], [753.0, 15127.0], [752.0, 15161.0], [755.0, 15118.0], [754.0, 14922.0], [757.0, 15126.0], [756.0, 15126.0], [766.0, 14975.0], [765.0, 14784.0], [763.0, 14994.0], [762.0, 15012.0], [761.0, 15059.0], [760.0, 14960.0], [751.0, 15190.0], [737.0, 15452.0], [736.0, 15334.0], [739.0, 15372.0], [738.0, 15412.0], [741.0, 15400.0], [740.0, 15279.0], [743.0, 15317.0], [742.0, 15374.0], [750.0, 15144.0], [749.0, 15244.0], [748.0, 15235.0], [747.0, 15246.0], [746.0, 15126.0], [745.0, 15255.0], [744.0, 15327.0], [759.0, 15054.0], [758.0, 14990.0], [793.0, 14456.0], [798.0, 14540.0], [799.0, 14348.0], [785.0, 14532.0], [784.0, 14750.0], [787.0, 14512.0], [786.0, 14514.0], [789.0, 14503.0], [788.0, 14511.0], [797.0, 14363.0], [796.0, 14364.5], [794.0, 14438.0], [792.0, 14455.0], [775.0, 14658.0], [774.0, 14798.0], [773.0, 14693.0], [772.0, 14828.0], [771.0, 14923.0], [770.0, 14923.0], [769.0, 14868.0], [783.0, 14789.0], [782.0, 14618.0], [781.0, 14719.0], [779.0, 14625.0], [778.0, 14627.0], [777.0, 14821.0], [776.0, 14762.0], [791.0, 14647.0], [790.0, 14653.0], [828.0, 14107.0], [831.0, 13883.0], [816.0, 14095.0], [818.0, 14220.0], [817.0, 14089.0], [820.0, 14019.0], [819.0, 14034.0], [830.0, 14058.0], [829.0, 13904.0], [827.0, 13950.0], [826.0, 13982.0], [825.0, 13993.0], [824.0, 14001.0], [815.0, 14336.0], [801.0, 14319.0], [800.0, 14333.0], [803.0, 14260.0], [802.0, 14263.0], [805.0, 14452.0], [804.0, 14432.0], [807.0, 14418.0], [806.0, 14206.0], [814.0, 14121.0], [813.0, 14309.0], [812.0, 14156.0], [811.0, 14385.0], [810.0, 14390.0], [809.0, 14356.0], [808.0, 14409.0], [822.0, 14009.0], [821.0, 14098.0], [857.0, 13412.0], [862.0, 13528.0], [863.0, 13499.0], [848.0, 13668.0], [850.0, 13682.0], [849.0, 13572.0], [853.0, 13662.0], [852.0, 13675.5], [861.0, 13543.0], [860.0, 13542.0], [859.0, 13518.5], [856.0, 13613.0], [839.0, 13784.0], [838.0, 13784.0], [837.0, 14001.0], [836.0, 13816.0], [835.0, 13825.0], [834.0, 13842.0], [833.0, 13851.0], [832.0, 14079.0], [847.0, 13695.0], [846.0, 13784.0], [845.0, 13694.0], [844.0, 13850.0], [843.0, 13668.0], [842.0, 13881.0], [841.0, 13738.0], [840.0, 13906.0], [855.0, 13629.0], [854.0, 13623.0], [889.0, 12927.0], [894.0, 13061.0], [895.0, 12928.0], [883.0, 13069.0], [882.0, 13066.0], [885.0, 13125.0], [884.0, 13185.0], [893.0, 12963.5], [891.0, 12946.0], [890.0, 12898.0], [888.0, 13105.0], [871.0, 13402.0], [870.0, 13444.0], [869.0, 13417.0], [868.0, 13261.0], [867.0, 13420.0], [866.0, 13444.0], [865.0, 13440.0], [864.0, 13375.0], [879.0, 13081.0], [878.0, 13221.0], [877.0, 13303.0], [876.0, 13274.0], [875.0, 13341.0], [874.0, 13335.0], [873.0, 13383.0], [872.0, 13210.0], [887.0, 13114.0], [886.0, 12959.0], [924.0, 12411.0], [927.0, 12350.0], [913.0, 12776.0], [912.0, 12587.0], [915.0, 12721.0], [914.0, 12581.0], [917.0, 12668.0], [916.0, 12587.0], [926.0, 12364.0], [925.0, 12395.0], [923.0, 12415.0], [922.0, 12425.0], [921.0, 12620.0], [920.0, 12476.0], [911.0, 12598.0], [897.0, 12839.0], [896.0, 12865.0], [899.0, 12996.0], [898.0, 12825.0], [901.0, 12780.0], [900.0, 12961.0], [903.0, 12765.0], [902.0, 12907.0], [910.0, 12599.0], [909.0, 12612.0], [908.0, 12854.0], [907.0, 12688.0], [906.0, 12717.0], [905.0, 12912.0], [904.0, 12913.0], [919.0, 12654.0], [918.0, 12491.0], [956.0, 12014.0], [959.0, 12017.0], [945.0, 12096.0], [944.0, 12254.0], [947.0, 12190.0], [946.0, 12086.0], [949.0, 12193.0], [948.0, 12458.0], [958.0, 12281.0], [957.0, 11921.0], [955.0, 11903.0], [954.0, 11913.0], [953.0, 12094.0], [952.0, 12369.0], [943.0, 12103.0], [928.0, 12396.0], [930.0, 12498.0], [929.0, 12336.0], [933.0, 12281.0], [932.0, 12398.0], [935.0, 12216.0], [934.0, 12441.0], [942.0, 12278.0], [941.0, 12315.0], [940.0, 12329.0], [939.0, 12346.0], [938.0, 12365.0], [937.0, 12381.0], [936.0, 12201.0], [951.0, 11979.0], [950.0, 11982.0], [988.0, 11399.0], [991.0, 11342.0], [977.0, 11763.0], [976.0, 11790.0], [979.0, 11543.0], [978.0, 11980.0], [981.0, 11664.0], [980.0, 11536.0], [990.0, 11506.0], [989.0, 11388.0], [987.0, 11414.0], [986.0, 11416.0], [985.0, 11596.0], [984.0, 11886.0], [975.0, 12039.0], [961.0, 11926.0], [960.0, 11861.0], [963.0, 11805.0], [962.0, 11942.0], [965.0, 11744.0], [964.0, 11886.0], [967.0, 11874.0], [966.0, 11738.0], [974.0, 11740.0], [973.0, 11637.0], [972.0, 11824.0], [971.0, 11815.0], [970.0, 11695.0], [969.0, 11889.0], [968.0, 11723.0], [983.0, 11492.0], [982.0, 11502.0], [1000.0, 11475.0], [999.0, 11097.0], [998.0, 11367.0], [997.0, 11395.0], [996.0, 11237.0], [995.0, 11408.0], [994.0, 11717.0], [993.0, 11478.0], [992.0, 11494.0], [1.0, 30827.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.57500000000044, 19526.12099999999]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1558.0, "minX": 1.6225707E12, "maxY": 161246.16666666666, "series": [{"data": [[1.6225707E12, 161246.16666666666], [1.62257076E12, 107850.86666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6225707E12, 2242.0], [1.62257076E12, 1558.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257076E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 15768.87457627119, "minX": 1.6225707E12, "maxY": 24932.890243902435, "series": [{"data": [[1.6225707E12, 15768.87457627119], [1.62257076E12, 24932.890243902435]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257076E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15484.137288135587, "minX": 1.6225707E12, "maxY": 24648.504878048774, "series": [{"data": [[1.6225707E12, 15484.137288135587], [1.62257076E12, 24648.504878048774]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257076E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8879.023728813558, "minX": 1.6225707E12, "maxY": 13665.65121951219, "series": [{"data": [[1.6225707E12, 8879.023728813558], [1.62257076E12, 13665.65121951219]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257076E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11740.0, "minX": 1.6225707E12, "maxY": 30827.0, "series": [{"data": [[1.6225707E12, 18993.0], [1.62257076E12, 30827.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6225707E12, 17657.2], [1.62257076E12, 27656.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6225707E12, 18729.68], [1.62257076E12, 27865.54]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6225707E12, 18298.8], [1.62257076E12, 27696.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6225707E12, 11740.0], [1.62257076E12, 22953.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6225707E12, 15826.0], [1.62257076E12, 26728.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257076E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11411.0, "minX": 1.0, "maxY": 30827.0, "series": [{"data": [[8.0, 23409.5], [42.0, 24900.0], [48.0, 17772.5], [52.0, 26025.0], [55.0, 18714.0], [60.0, 14068.5], [63.0, 11934.0], [67.0, 13319.0], [1.0, 30827.0], [69.0, 15954.0], [68.0, 27637.5], [73.0, 15161.0], [74.0, 17058.0], [100.0, 27107.0], [30.0, 24234.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 11411.0], [67.0, 12865.0], [65.0, 19762.0], [69.0, 15862.0], [73.0, 14620.0], [74.0, 16779.0], [46.0, 21510.0], [48.0, 18089.0], [55.0, 18857.0], [60.0, 14005.5], [63.0, 20360.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11128.5, "minX": 1.0, "maxY": 30540.0, "series": [{"data": [[8.0, 23121.0], [42.0, 24615.0], [48.0, 17484.0], [52.0, 25743.5], [55.0, 18428.5], [60.0, 13780.5], [63.0, 11654.5], [67.0, 13035.5], [1.0, 30540.0], [69.0, 15670.0], [68.0, 27352.0], [73.0, 14886.0], [74.0, 16768.0], [100.0, 26826.0], [30.0, 23948.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 11128.5], [67.0, 12571.0], [65.0, 19479.0], [69.0, 15576.0], [73.0, 14330.0], [74.0, 16494.0], [46.0, 21222.5], [48.0, 17804.0], [55.0, 18571.0], [60.0, 13722.0], [63.0, 20076.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6225707E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6225707E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6225707E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.6225707E12, "maxY": 5.016666666666667, "series": [{"data": [[1.6225707E12, 5.0], [1.62257076E12, 5.016666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6225707E12, 4.833333333333333], [1.62257076E12, 1.8166666666666667]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257076E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.6225707E12, "maxY": 5.016666666666667, "series": [{"data": [[1.6225707E12, 4.833333333333333], [1.62257076E12, 1.8166666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6225707E12, 5.0], [1.62257076E12, 5.016666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257076E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.6225707E12, "maxY": 5.016666666666667, "series": [{"data": [[1.6225707E12, 5.0], [1.62257076E12, 5.016666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6225707E12, 4.833333333333333], [1.62257076E12, 1.8166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257076E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

