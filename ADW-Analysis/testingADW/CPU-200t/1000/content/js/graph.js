/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2100.0, "minX": 0.0, "maxY": 318179.0, "series": [{"data": [[0.0, 2100.0], [0.1, 6250.0], [0.2, 6562.0], [0.3, 6562.0], [0.4, 11282.0], [0.5, 19773.0], [0.6, 20121.0], [0.7, 23771.0], [0.8, 24281.0], [0.9, 28990.0], [1.0, 33362.0], [1.1, 33793.0], [1.2, 34176.0], [1.3, 34459.0], [1.4, 34459.0], [1.5, 34620.0], [1.6, 34702.0], [1.7, 34886.0], [1.8, 35053.0], [1.9, 35182.0], [2.0, 35277.0], [2.1, 35350.0], [2.2, 35663.0], [2.3, 36061.0], [2.4, 36849.0], [2.5, 37480.0], [2.6, 38281.0], [2.7, 38679.0], [2.8, 39183.0], [2.9, 40294.0], [3.0, 40387.0], [3.1, 41271.0], [3.2, 41889.0], [3.3, 42173.0], [3.4, 42391.0], [3.5, 43382.0], [3.6, 44501.0], [3.7, 46797.0], [3.8, 46872.0], [3.9, 47250.0], [4.0, 47610.0], [4.1, 48500.0], [4.2, 48514.0], [4.3, 48881.0], [4.4, 49086.0], [4.5, 49228.0], [4.6, 49455.0], [4.7, 49554.0], [4.8, 49665.0], [4.9, 49711.0], [5.0, 50085.0], [5.1, 50281.0], [5.2, 50329.0], [5.3, 50461.0], [5.4, 50599.0], [5.5, 50667.0], [5.6, 50866.0], [5.7, 50878.0], [5.8, 51003.0], [5.9, 51095.0], [6.0, 51282.0], [6.1, 51359.0], [6.2, 51366.0], [6.3, 51482.0], [6.4, 51602.0], [6.5, 51661.0], [6.6, 51862.0], [6.7, 51865.0], [6.8, 52060.0], [6.9, 52182.0], [7.0, 52249.0], [7.1, 52429.0], [7.2, 52464.0], [7.3, 52572.0], [7.4, 52756.0], [7.5, 52779.0], [7.6, 52875.0], [7.7, 52963.0], [7.8, 53092.0], [7.9, 53274.0], [8.0, 53284.0], [8.1, 53305.0], [8.2, 53449.0], [8.3, 53663.0], [8.4, 53777.0], [8.5, 53886.0], [8.6, 53888.0], [8.7, 54084.0], [8.8, 54266.0], [8.9, 54278.0], [9.0, 54317.0], [9.1, 54497.0], [9.2, 54627.0], [9.3, 54755.0], [9.4, 54948.0], [9.5, 54961.0], [9.6, 55146.0], [9.7, 55176.0], [9.8, 55494.0], [9.9, 55499.0], [10.0, 55561.0], [10.1, 55676.0], [10.2, 55729.0], [10.3, 55873.0], [10.4, 56016.0], [10.5, 56153.0], [10.6, 56310.0], [10.7, 56396.0], [10.8, 56584.0], [10.9, 56761.0], [11.0, 56968.0], [11.1, 56972.0], [11.2, 57182.0], [11.3, 57262.0], [11.4, 57504.0], [11.5, 57548.0], [11.6, 57656.0], [11.7, 57783.0], [11.8, 57876.0], [11.9, 57948.0], [12.0, 58158.0], [12.1, 58371.0], [12.2, 58393.0], [12.3, 58549.0], [12.4, 58557.0], [12.5, 58785.0], [12.6, 58844.0], [12.7, 59065.0], [12.8, 59083.0], [12.9, 59126.0], [13.0, 59272.0], [13.1, 59371.0], [13.2, 59596.0], [13.3, 59721.0], [13.4, 59773.0], [13.5, 59927.0], [13.6, 60053.0], [13.7, 60076.0], [13.8, 60284.0], [13.9, 60465.0], [14.0, 60517.0], [14.1, 60611.0], [14.2, 60770.0], [14.3, 60869.0], [14.4, 60982.0], [14.5, 61753.0], [14.6, 61951.0], [14.7, 62053.0], [14.8, 62177.0], [14.9, 62351.0], [15.0, 62580.0], [15.1, 62682.0], [15.2, 62700.0], [15.3, 62846.0], [15.4, 63166.0], [15.5, 63272.0], [15.6, 63360.0], [15.7, 63581.0], [15.8, 63677.0], [15.9, 63780.0], [16.0, 63864.0], [16.1, 64065.0], [16.2, 64073.0], [16.3, 64279.0], [16.4, 64284.0], [16.5, 64373.0], [16.6, 64481.0], [16.7, 64569.0], [16.8, 64878.0], [16.9, 64884.0], [17.0, 64973.0], [17.1, 65181.0], [17.2, 65196.0], [17.3, 65411.0], [17.4, 65494.0], [17.5, 65594.0], [17.6, 65603.0], [17.7, 65867.0], [17.8, 65895.0], [17.9, 66078.0], [18.0, 66174.0], [18.1, 66275.0], [18.2, 66385.0], [18.3, 66472.0], [18.4, 66565.0], [18.5, 66779.0], [18.6, 66799.0], [18.7, 66973.0], [18.8, 66992.0], [18.9, 67081.0], [19.0, 67472.0], [19.1, 67571.0], [19.2, 67571.0], [19.3, 67687.0], [19.4, 67791.0], [19.5, 67795.0], [19.6, 67988.0], [19.7, 68177.0], [19.8, 68270.0], [19.9, 68466.0], [20.0, 69397.0], [20.1, 70375.0], [20.2, 71074.0], [20.3, 74981.0], [20.4, 75075.0], [20.5, 82975.0], [20.6, 83179.0], [20.7, 83689.0], [20.8, 85773.0], [20.9, 87601.0], [21.0, 87684.0], [21.1, 94363.0], [21.2, 96382.0], [21.3, 96670.0], [21.4, 96982.0], [21.5, 97089.0], [21.6, 97268.0], [21.7, 97492.0], [21.8, 97571.0], [21.9, 97691.0], [22.0, 97843.0], [22.1, 97871.0], [22.2, 98376.0], [22.3, 99200.0], [22.4, 100371.0], [22.5, 101891.0], [22.6, 102180.0], [22.7, 102481.0], [22.8, 102510.0], [22.9, 102783.0], [23.0, 102862.0], [23.1, 102984.0], [23.2, 103670.0], [23.3, 105482.0], [23.4, 105740.0], [23.5, 106375.0], [23.6, 106588.0], [23.7, 109074.0], [23.8, 109380.0], [23.9, 110399.0], [24.0, 110768.0], [24.1, 110998.0], [24.2, 111178.0], [24.3, 111497.0], [24.4, 111570.0], [24.5, 111679.0], [24.6, 111893.0], [24.7, 111982.0], [24.8, 112089.0], [24.9, 112172.0], [25.0, 112372.0], [25.1, 112373.0], [25.2, 112572.0], [25.3, 112593.0], [25.4, 112789.0], [25.5, 112882.0], [25.6, 113299.0], [25.7, 113473.0], [25.8, 113684.0], [25.9, 113782.0], [26.0, 113890.0], [26.1, 113989.0], [26.2, 114070.0], [26.3, 114170.0], [26.4, 114285.0], [26.5, 114509.0], [26.6, 114571.0], [26.7, 114678.0], [26.8, 114773.0], [26.9, 114975.0], [27.0, 114985.0], [27.1, 115086.0], [27.2, 115197.0], [27.3, 115234.0], [27.4, 115472.0], [27.5, 115481.0], [27.6, 115642.0], [27.7, 115666.0], [27.8, 115768.0], [27.9, 115877.0], [28.0, 116054.0], [28.1, 116063.0], [28.2, 116308.0], [28.3, 116331.0], [28.4, 116488.0], [28.5, 116542.0], [28.6, 116646.0], [28.7, 116747.0], [28.8, 116832.0], [28.9, 116960.0], [29.0, 117200.0], [29.1, 117343.0], [29.2, 117350.0], [29.3, 117559.0], [29.4, 117747.0], [29.5, 117842.0], [29.6, 117952.0], [29.7, 118145.0], [29.8, 118343.0], [29.9, 118449.0], [30.0, 118641.0], [30.1, 118703.0], [30.2, 118737.0], [30.3, 118936.0], [30.4, 119107.0], [30.5, 119135.0], [30.6, 119252.0], [30.7, 119343.0], [30.8, 119538.0], [30.9, 119544.0], [31.0, 119723.0], [31.1, 119851.0], [31.2, 120051.0], [31.3, 120120.0], [31.4, 120246.0], [31.5, 120440.0], [31.6, 120442.0], [31.7, 120636.0], [31.8, 120724.0], [31.9, 120746.0], [32.0, 120918.0], [32.1, 121031.0], [32.2, 121094.0], [32.3, 121297.0], [32.4, 121398.0], [32.5, 121486.0], [32.6, 121521.0], [32.7, 121531.0], [32.8, 121838.0], [32.9, 121913.0], [33.0, 122006.0], [33.1, 122115.0], [33.2, 122307.0], [33.3, 122727.0], [33.4, 122791.0], [33.5, 122922.0], [33.6, 122925.0], [33.7, 123001.0], [33.8, 123216.0], [33.9, 123508.0], [34.0, 123627.0], [34.1, 123804.0], [34.2, 124012.0], [34.3, 124208.0], [34.4, 124312.0], [34.5, 124700.0], [34.6, 124896.0], [34.7, 124904.0], [34.8, 125293.0], [34.9, 125371.0], [35.0, 125494.0], [35.1, 125601.0], [35.2, 125800.0], [35.3, 125900.0], [35.4, 125996.0], [35.5, 126093.0], [35.6, 126190.0], [35.7, 126194.0], [35.8, 126330.0], [35.9, 126502.0], [36.0, 126590.0], [36.1, 126784.0], [36.2, 126885.0], [36.3, 127005.0], [36.4, 127089.0], [36.5, 127288.0], [36.6, 127296.0], [36.7, 127485.0], [36.8, 127507.0], [36.9, 127688.0], [37.0, 127767.0], [37.1, 127876.0], [37.2, 127982.0], [37.3, 128074.0], [37.4, 128476.0], [37.5, 128570.0], [37.6, 128581.0], [37.7, 128768.0], [37.8, 128869.0], [37.9, 129145.0], [38.0, 129162.0], [38.1, 129341.0], [38.2, 129363.0], [38.3, 129437.0], [38.4, 129633.0], [38.5, 129732.0], [38.6, 129746.0], [38.7, 129932.0], [38.8, 129964.0], [38.9, 130265.0], [39.0, 130441.0], [39.1, 130538.0], [39.2, 130644.0], [39.3, 130840.0], [39.4, 130851.0], [39.5, 131025.0], [39.6, 131166.0], [39.7, 131739.0], [39.8, 132730.0], [39.9, 133385.0], [40.0, 134422.0], [40.1, 137726.0], [40.2, 137918.0], [40.3, 144916.0], [40.4, 145122.0], [40.5, 145410.0], [40.6, 147108.0], [40.7, 149305.0], [40.8, 149513.0], [40.9, 150873.0], [41.0, 157127.0], [41.1, 159799.0], [41.2, 159809.0], [41.3, 160502.0], [41.4, 160901.0], [41.5, 160911.0], [41.6, 161093.0], [41.7, 161168.0], [41.8, 161398.0], [41.9, 161480.0], [42.0, 161591.0], [42.1, 161783.0], [42.2, 161996.0], [42.3, 162299.0], [42.4, 164091.0], [42.5, 165805.0], [42.6, 166085.0], [42.7, 166288.0], [42.8, 166411.0], [42.9, 166680.0], [43.0, 166771.0], [43.1, 167195.0], [43.2, 167390.0], [43.3, 167477.0], [43.4, 168115.0], [43.5, 168962.0], [43.6, 169468.0], [43.7, 169765.0], [43.8, 170441.0], [43.9, 172457.0], [44.0, 172758.0], [44.1, 173671.0], [44.2, 173871.0], [44.3, 173977.0], [44.4, 174153.0], [44.5, 174364.0], [44.6, 174369.0], [44.7, 174572.0], [44.8, 174767.0], [44.9, 174840.0], [45.0, 174923.0], [45.1, 175048.0], [45.2, 175353.0], [45.3, 175523.0], [45.4, 175715.0], [45.5, 175723.0], [45.6, 175729.0], [45.7, 175909.0], [45.8, 176135.0], [45.9, 176304.0], [46.0, 176504.0], [46.1, 176704.0], [46.2, 176799.0], [46.3, 177024.0], [46.4, 177195.0], [46.5, 177216.0], [46.6, 177489.0], [46.7, 177679.0], [46.8, 177795.0], [46.9, 177873.0], [47.0, 177975.0], [47.1, 178087.0], [47.2, 178164.0], [47.3, 178175.0], [47.4, 178393.0], [47.5, 178469.0], [47.6, 178665.0], [47.7, 178766.0], [47.8, 179051.0], [47.9, 179057.0], [48.0, 179235.0], [48.1, 179339.0], [48.2, 179557.0], [48.3, 179573.0], [48.4, 179855.0], [48.5, 179948.0], [48.6, 180864.0], [48.7, 181041.0], [48.8, 181247.0], [48.9, 181257.0], [49.0, 181358.0], [49.1, 181554.0], [49.2, 181571.0], [49.3, 181750.0], [49.4, 181757.0], [49.5, 182064.0], [49.6, 182348.0], [49.7, 182462.0], [49.8, 182537.0], [49.9, 182655.0], [50.0, 182834.0], [50.1, 182840.0], [50.2, 182917.0], [50.3, 183131.0], [50.4, 183322.0], [50.5, 183519.0], [50.6, 183619.0], [50.7, 183718.0], [50.8, 183913.0], [50.9, 183917.0], [51.0, 184109.0], [51.1, 184219.0], [51.2, 184319.0], [51.3, 184413.0], [51.4, 184638.0], [51.5, 184723.0], [51.6, 184817.0], [51.7, 184911.0], [51.8, 185007.0], [51.9, 185113.0], [52.0, 185313.0], [52.1, 185410.0], [52.2, 185422.0], [52.3, 185616.0], [52.4, 185621.0], [52.5, 185808.0], [52.6, 186011.0], [52.7, 186210.0], [52.8, 186301.0], [52.9, 186406.0], [53.0, 186609.0], [53.1, 186624.0], [53.2, 186809.0], [53.3, 187110.0], [53.4, 187208.0], [53.5, 187510.0], [53.6, 187520.0], [53.7, 187714.0], [53.8, 188005.0], [53.9, 188106.0], [54.0, 188303.0], [54.1, 188410.0], [54.2, 188416.0], [54.3, 188599.0], [54.4, 188607.0], [54.5, 188803.0], [54.6, 188914.0], [54.7, 189020.0], [54.8, 189112.0], [54.9, 189205.0], [55.0, 189300.0], [55.1, 189401.0], [55.2, 189502.0], [55.3, 189702.0], [55.4, 189799.0], [55.5, 189800.0], [55.6, 190014.0], [55.7, 190026.0], [55.8, 190295.0], [55.9, 190387.0], [56.0, 190502.0], [56.1, 190590.0], [56.2, 190692.0], [56.3, 190695.0], [56.4, 190908.0], [56.5, 190994.0], [56.6, 191103.0], [56.7, 191183.0], [56.8, 191289.0], [56.9, 191493.0], [57.0, 191499.0], [57.1, 191602.0], [57.2, 191786.0], [57.3, 191885.0], [57.4, 192080.0], [57.5, 192085.0], [57.6, 192275.0], [57.7, 192392.0], [57.8, 192483.0], [57.9, 192585.0], [58.0, 192983.0], [58.1, 193195.0], [58.2, 193400.0], [58.3, 193480.0], [58.4, 193786.0], [58.5, 194084.0], [58.6, 194274.0], [58.7, 194282.0], [58.8, 194566.0], [58.9, 194575.0], [59.0, 194786.0], [59.1, 194879.0], [59.2, 195070.0], [59.3, 195373.0], [59.4, 195472.0], [59.5, 195666.0], [59.6, 196167.0], [59.7, 196199.0], [59.8, 196779.0], [59.9, 197869.0], [60.0, 201667.0], [60.1, 201976.0], [60.2, 209566.0], [60.3, 209864.0], [60.4, 209966.0], [60.5, 211768.0], [60.6, 213867.0], [60.7, 214077.0], [60.8, 215263.0], [60.9, 216645.0], [61.0, 221654.0], [61.1, 223768.0], [61.2, 224155.0], [61.3, 226685.0], [61.4, 226768.0], [61.5, 227180.0], [61.6, 227362.0], [61.7, 227467.0], [61.8, 227876.0], [61.9, 228063.0], [62.0, 228154.0], [62.1, 228188.0], [62.2, 228263.0], [62.3, 228557.0], [62.4, 229061.0], [62.5, 229107.0], [62.6, 229155.0], [62.7, 229654.0], [62.8, 231849.0], [62.9, 232354.0], [63.0, 232446.0], [63.1, 232469.0], [63.2, 232745.0], [63.3, 232853.0], [63.4, 232998.0], [63.5, 233249.0], [63.6, 233342.0], [63.7, 234745.0], [63.8, 235448.0], [63.9, 235954.0], [64.0, 236142.0], [64.1, 236932.0], [64.2, 238832.0], [64.3, 239221.0], [64.4, 239922.0], [64.5, 240026.0], [64.6, 240130.0], [64.7, 240342.0], [64.8, 240509.0], [64.9, 240826.0], [65.0, 240926.0], [65.1, 241105.0], [65.2, 241213.0], [65.3, 241251.0], [65.4, 241425.0], [65.5, 241520.0], [65.6, 241691.0], [65.7, 241701.0], [65.8, 241899.0], [65.9, 242010.0], [66.0, 242110.0], [66.1, 242194.0], [66.2, 242198.0], [66.3, 242297.0], [66.4, 242493.0], [66.5, 242591.0], [66.6, 242793.0], [66.7, 242897.0], [66.8, 242995.0], [66.9, 243087.0], [67.0, 243183.0], [67.1, 243284.0], [67.2, 243486.0], [67.3, 243595.0], [67.4, 243688.0], [67.5, 243780.0], [67.6, 243879.0], [67.7, 243990.0], [67.8, 244078.0], [67.9, 244173.0], [68.0, 244266.0], [68.1, 244357.0], [68.2, 244482.0], [68.3, 244659.0], [68.4, 244758.0], [68.5, 244762.0], [68.6, 244899.0], [68.7, 245145.0], [68.8, 245175.0], [68.9, 245253.0], [69.0, 245354.0], [69.1, 245654.0], [69.2, 245660.0], [69.3, 245850.0], [69.4, 245853.0], [69.5, 246034.0], [69.6, 246238.0], [69.7, 246342.0], [69.8, 246562.0], [69.9, 246735.0], [70.0, 246833.0], [70.1, 246945.0], [70.2, 247229.0], [70.3, 247252.0], [70.4, 247340.0], [70.5, 247430.0], [70.6, 247530.0], [70.7, 247622.0], [70.8, 247749.0], [70.9, 247922.0], [71.0, 247940.0], [71.1, 248021.0], [71.2, 248120.0], [71.3, 248327.0], [71.4, 248513.0], [71.5, 248713.0], [71.6, 248714.0], [71.7, 248913.0], [71.8, 248916.0], [71.9, 249006.0], [72.0, 249202.0], [72.1, 249393.0], [72.2, 249404.0], [72.3, 249409.0], [72.4, 249913.0], [72.5, 250102.0], [72.6, 250198.0], [72.7, 250287.0], [72.8, 250300.0], [72.9, 250705.0], [73.0, 250894.0], [73.1, 250987.0], [73.2, 251091.0], [73.3, 251477.0], [73.4, 251485.0], [73.5, 251598.0], [73.6, 251682.0], [73.7, 251886.0], [73.8, 251979.0], [73.9, 252287.0], [74.0, 252288.0], [74.1, 252482.0], [74.2, 252536.0], [74.3, 252677.0], [74.4, 252784.0], [74.5, 252812.0], [74.6, 252869.0], [74.7, 253068.0], [74.8, 253177.0], [74.9, 253269.0], [75.0, 253270.0], [75.1, 253466.0], [75.2, 253760.0], [75.3, 253961.0], [75.4, 254366.0], [75.5, 254546.0], [75.6, 254562.0], [75.7, 254663.0], [75.8, 254772.0], [75.9, 254954.0], [76.0, 254956.0], [76.1, 255175.0], [76.2, 255357.0], [76.3, 255456.0], [76.4, 255550.0], [76.5, 255737.0], [76.6, 255751.0], [76.7, 255938.0], [76.8, 255948.0], [76.9, 256136.0], [77.0, 256208.0], [77.1, 256345.0], [77.2, 256610.0], [77.3, 256618.0], [77.4, 256800.0], [77.5, 257015.0], [77.6, 257087.0], [77.7, 257216.0], [77.8, 257290.0], [77.9, 257486.0], [78.0, 258098.0], [78.1, 258289.0], [78.2, 258386.0], [78.3, 258489.0], [78.4, 258589.0], [78.5, 258690.0], [78.6, 258984.0], [78.7, 259079.0], [78.8, 259183.0], [78.9, 259376.0], [79.0, 259468.0], [79.1, 259569.0], [79.2, 259669.0], [79.3, 259772.0], [79.4, 260168.0], [79.5, 260445.0], [79.6, 261367.0], [79.7, 264847.0], [79.8, 265133.0], [79.9, 272046.0], [80.0, 272414.0], [80.1, 272424.0], [80.2, 274517.0], [80.3, 276819.0], [80.4, 277006.0], [80.5, 278615.0], [80.6, 279912.0], [80.7, 280297.0], [80.8, 283423.0], [80.9, 284507.0], [81.0, 285908.0], [81.1, 286501.0], [81.2, 287410.0], [81.3, 287519.0], [81.4, 288404.0], [81.5, 288524.0], [81.6, 289005.0], [81.7, 289203.0], [81.8, 289402.0], [81.9, 289501.0], [82.0, 289596.0], [82.1, 289627.0], [82.2, 289703.0], [82.3, 290103.0], [82.4, 290203.0], [82.5, 290416.0], [82.6, 290497.0], [82.7, 290893.0], [82.8, 290991.0], [82.9, 291299.0], [83.0, 293285.0], [83.1, 293693.0], [83.2, 293899.0], [83.3, 294088.0], [83.4, 294190.0], [83.5, 294201.0], [83.6, 294588.0], [83.7, 294686.0], [83.8, 295596.0], [83.9, 296294.0], [84.0, 296706.0], [84.1, 296983.0], [84.2, 297785.0], [84.3, 299487.0], [84.4, 299889.0], [84.5, 300195.0], [84.6, 300285.0], [84.7, 300389.0], [84.8, 300577.0], [84.9, 300690.0], [85.0, 300766.0], [85.1, 300859.0], [85.2, 301069.0], [85.3, 301070.0], [85.4, 301172.0], [85.5, 301244.0], [85.6, 301248.0], [85.7, 301454.0], [85.8, 301554.0], [85.9, 301646.0], [86.0, 301756.0], [86.1, 301863.0], [86.2, 302030.0], [86.3, 302034.0], [86.4, 302234.0], [86.5, 302247.0], [86.6, 302309.0], [86.7, 302453.0], [86.8, 302601.0], [86.9, 302707.0], [87.0, 303103.0], [87.1, 303195.0], [87.2, 303211.0], [87.3, 303490.0], [87.4, 303491.0], [87.5, 303493.0], [87.6, 303498.0], [87.7, 303501.0], [87.8, 303511.0], [87.9, 303959.0], [88.0, 303976.0], [88.1, 304191.0], [88.2, 304263.0], [88.3, 304349.0], [88.4, 304460.0], [88.5, 304646.0], [88.6, 304665.0], [88.7, 304771.0], [88.8, 304772.0], [88.9, 304818.0], [89.0, 304956.0], [89.1, 305172.0], [89.2, 305253.0], [89.3, 305365.0], [89.4, 305377.0], [89.5, 305559.0], [89.6, 305669.0], [89.7, 305857.0], [89.8, 305871.0], [89.9, 305980.0], [90.0, 306045.0], [90.1, 306175.0], [90.2, 306365.0], [90.3, 306450.0], [90.4, 306563.0], [90.5, 306640.0], [90.6, 306869.0], [90.7, 307078.0], [90.8, 307172.0], [90.9, 307286.0], [91.0, 307344.0], [91.1, 307528.0], [91.2, 307537.0], [91.3, 307733.0], [91.4, 307771.0], [91.5, 307931.0], [91.6, 307939.0], [91.7, 308143.0], [91.8, 308325.0], [91.9, 308350.0], [92.0, 308426.0], [92.1, 308531.0], [92.2, 308612.0], [92.3, 308714.0], [92.4, 308717.0], [92.5, 308910.0], [92.6, 308911.0], [92.7, 309102.0], [92.8, 309224.0], [92.9, 309307.0], [93.0, 309425.0], [93.1, 309428.0], [93.2, 309618.0], [93.3, 309819.0], [93.4, 309888.0], [93.5, 309985.0], [93.6, 310129.0], [93.7, 310200.0], [93.8, 310397.0], [93.9, 310489.0], [94.0, 310502.0], [94.1, 310687.0], [94.2, 310700.0], [94.3, 310883.0], [94.4, 310909.0], [94.5, 310998.0], [94.6, 311084.0], [94.7, 311190.0], [94.8, 311384.0], [94.9, 311479.0], [95.0, 311594.0], [95.1, 311877.0], [95.2, 311895.0], [95.3, 311899.0], [95.4, 311977.0], [95.5, 312068.0], [95.6, 312183.0], [95.7, 312277.0], [95.8, 312368.0], [95.9, 312572.0], [96.0, 312871.0], [96.1, 312875.0], [96.2, 312876.0], [96.3, 312953.0], [96.4, 312958.0], [96.5, 313065.0], [96.6, 313139.0], [96.7, 313254.0], [96.8, 313335.0], [96.9, 313434.0], [97.0, 313443.0], [97.1, 313539.0], [97.2, 313834.0], [97.3, 313841.0], [97.4, 314034.0], [97.5, 314038.0], [97.6, 314134.0], [97.7, 314241.0], [97.8, 314334.0], [97.9, 314437.0], [98.0, 314630.0], [98.1, 314733.0], [98.2, 315026.0], [98.3, 315027.0], [98.4, 315230.0], [98.5, 315420.0], [98.6, 315530.0], [98.7, 315623.0], [98.8, 315917.0], [98.9, 315924.0], [99.0, 316117.0], [99.1, 316324.0], [99.2, 316325.0], [99.3, 316494.0], [99.4, 316589.0], [99.5, 316690.0], [99.6, 316803.0], [99.7, 317086.0], [99.8, 318115.0], [99.9, 318179.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 4.0, "series": [{"data": [[274500.0, 1.0], [300100.0, 1.0], [312900.0, 2.0], [173600.0, 1.0], [186400.0, 1.0], [244000.0, 1.0], [256800.0, 1.0], [295500.0, 1.0], [308300.0, 2.0], [177700.0, 1.0], [184100.0, 1.0], [190500.0, 2.0], [241700.0, 1.0], [248100.0, 1.0], [254500.0, 2.0], [66700.0, 2.0], [278600.0, 1.0], [304200.0, 1.0], [317000.0, 1.0], [111500.0, 1.0], [114700.0, 1.0], [117900.0, 1.0], [124300.0, 1.0], [127500.0, 1.0], [290900.0, 1.0], [316500.0, 1.0], [213800.0, 1.0], [226600.0, 1.0], [245800.0, 2.0], [252200.0, 2.0], [258600.0, 1.0], [311900.0, 1.0], [166700.0, 1.0], [179500.0, 2.0], [48900.0, 1.0], [192300.0, 1.0], [50500.0, 1.0], [52100.0, 1.0], [53700.0, 1.0], [56900.0, 2.0], [58500.0, 2.0], [243500.0, 1.0], [61700.0, 1.0], [63300.0, 1.0], [249900.0, 1.0], [64900.0, 1.0], [256300.0, 1.0], [65800.0, 2.0], [97800.0, 2.0], [113800.0, 1.0], [120200.0, 1.0], [294500.0, 1.0], [307300.0, 1.0], [177200.0, 1.0], [183600.0, 1.0], [190000.0, 2.0], [241200.0, 2.0], [247600.0, 1.0], [260400.0, 1.0], [264800.0, 1.0], [290400.0, 2.0], [303200.0, 1.0], [2100.0, 1.0], [149300.0, 1.0], [302700.0, 1.0], [315500.0, 1.0], [174900.0, 1.0], [181300.0, 1.0], [187700.0, 1.0], [245300.0, 1.0], [68100.0, 1.0], [311400.0, 1.0], [96900.0, 1.0], [6200.0, 1.0], [106500.0, 1.0], [119300.0, 1.0], [310900.0, 2.0], [159800.0, 1.0], [166200.0, 1.0], [11200.0, 1.0], [179000.0, 2.0], [185400.0, 2.0], [191800.0, 1.0], [243000.0, 1.0], [249400.0, 2.0], [294000.0, 1.0], [306800.0, 1.0], [35200.0, 1.0], [36800.0, 1.0], [306300.0, 1.0], [176700.0, 2.0], [183100.0, 1.0], [189500.0, 1.0], [49600.0, 1.0], [51200.0, 1.0], [52800.0, 1.0], [54400.0, 1.0], [56000.0, 1.0], [57600.0, 1.0], [59200.0, 1.0], [60800.0, 1.0], [64000.0, 2.0], [289400.0, 1.0], [302200.0, 2.0], [315000.0, 2.0], [99200.0, 1.0], [102400.0, 1.0], [112000.0, 1.0], [115200.0, 1.0], [118400.0, 1.0], [124800.0, 1.0], [128000.0, 1.0], [134400.0, 1.0], [311300.0, 1.0], [166400.0, 1.0], [179200.0, 1.0], [185600.0, 2.0], [192000.0, 2.0], [243200.0, 1.0], [307200.0, 1.0], [144900.0, 1.0], [183300.0, 1.0], [189700.0, 2.0], [196100.0, 2.0], [228100.0, 2.0], [240900.0, 1.0], [247300.0, 1.0], [253700.0, 1.0], [260100.0, 1.0], [277000.0, 1.0], [70300.0, 1.0], [302600.0, 1.0], [315400.0, 1.0], [83100.0, 1.0], [111900.0, 1.0], [115100.0, 1.0], [118300.0, 1.0], [121500.0, 2.0], [124700.0, 1.0], [127900.0, 1.0], [181000.0, 1.0], [251400.0, 2.0], [272400.0, 2.0], [310800.0, 1.0], [34700.0, 1.0], [310300.0, 1.0], [178700.0, 1.0], [185100.0, 1.0], [55500.0, 1.0], [57100.0, 1.0], [58700.0, 1.0], [242700.0, 1.0], [61900.0, 1.0], [63500.0, 1.0], [65100.0, 2.0], [255500.0, 1.0], [66200.0, 1.0], [114200.0, 1.0], [120600.0, 1.0], [123800.0, 1.0], [127000.0, 2.0], [130200.0, 1.0], [150800.0, 1.0], [182800.0, 2.0], [189200.0, 1.0], [195600.0, 1.0], [246800.0, 1.0], [253200.0, 2.0], [259600.0, 1.0], [301600.0, 1.0], [314400.0, 1.0], [301100.0, 1.0], [161300.0, 1.0], [174100.0, 1.0], [250900.0, 1.0], [74900.0, 1.0], [309800.0, 2.0], [116500.0, 1.0], [119700.0, 1.0], [122900.0, 2.0], [126100.0, 2.0], [129300.0, 2.0], [309300.0, 1.0], [184600.0, 1.0], [216600.0, 1.0], [242200.0, 1.0], [305200.0, 1.0], [20100.0, 1.0], [28900.0, 1.0], [131100.0, 1.0], [38600.0, 1.0], [304700.0, 2.0], [40200.0, 1.0], [41800.0, 1.0], [175900.0, 1.0], [182300.0, 1.0], [51400.0, 1.0], [53000.0, 1.0], [54600.0, 1.0], [227100.0, 1.0], [57800.0, 1.0], [239900.0, 1.0], [62600.0, 1.0], [246300.0, 1.0], [252700.0, 1.0], [64200.0, 2.0], [259100.0, 1.0], [67600.0, 1.0], [300600.0, 1.0], [313400.0, 2.0], [83600.0, 1.0], [102800.0, 1.0], [115600.0, 2.0], [122000.0, 1.0], [125200.0, 1.0], [128400.0, 1.0], [316100.0, 1.0], [188000.0, 1.0], [232800.0, 1.0], [239200.0, 1.0], [245600.0, 2.0], [258400.0, 1.0], [312000.0, 1.0], [285900.0, 1.0], [311500.0, 1.0], [179300.0, 1.0], [224100.0, 1.0], [236900.0, 1.0], [256100.0, 1.0], [67500.0, 1.0], [294600.0, 1.0], [96300.0, 1.0], [102700.0, 1.0], [112300.0, 2.0], [118700.0, 2.0], [121900.0, 1.0], [294100.0, 1.0], [177000.0, 1.0], [189800.0, 1.0], [228200.0, 1.0], [247400.0, 1.0], [315600.0, 1.0], [33300.0, 1.0], [289500.0, 2.0], [302300.0, 1.0], [161900.0, 1.0], [44500.0, 1.0], [174700.0, 1.0], [187500.0, 2.0], [52500.0, 1.0], [55700.0, 1.0], [232300.0, 1.0], [60500.0, 1.0], [245100.0, 2.0], [62100.0, 1.0], [251500.0, 1.0], [63700.0, 1.0], [311000.0, 1.0], [101800.0, 1.0], [111400.0, 1.0], [114600.0, 1.0], [117800.0, 1.0], [121000.0, 2.0], [124200.0, 1.0], [127400.0, 1.0], [130600.0, 1.0], [297700.0, 1.0], [310500.0, 1.0], [166000.0, 1.0], [172400.0, 1.0], [191600.0, 1.0], [242800.0, 1.0], [249200.0, 1.0], [293600.0, 1.0], [306400.0, 1.0], [131700.0, 1.0], [305900.0, 1.0], [176500.0, 1.0], [182900.0, 1.0], [189300.0, 1.0], [240500.0, 1.0], [246900.0, 1.0], [259700.0, 1.0], [289000.0, 1.0], [301800.0, 1.0], [314600.0, 1.0], [113700.0, 1.0], [116900.0, 1.0], [120100.0, 1.0], [126500.0, 2.0], [129700.0, 2.0], [288500.0, 1.0], [161400.0, 1.0], [314100.0, 1.0], [193400.0, 2.0], [231800.0, 1.0], [244600.0, 1.0], [251000.0, 1.0], [257400.0, 1.0], [24200.0, 1.0], [35600.0, 1.0], [296700.0, 1.0], [178300.0, 1.0], [46800.0, 1.0], [184700.0, 1.0], [191100.0, 2.0], [50000.0, 1.0], [51600.0, 2.0], [53200.0, 2.0], [235900.0, 1.0], [62800.0, 1.0], [248700.0, 2.0], [64400.0, 1.0], [255100.0, 1.0], [112800.0, 1.0], [116000.0, 2.0], [119200.0, 1.0], [125600.0, 1.0], [128800.0, 1.0], [301700.0, 1.0], [180800.0, 1.0], [187200.0, 1.0], [244800.0, 1.0], [272000.0, 1.0], [310400.0, 1.0], [309900.0, 1.0], [184900.0, 1.0], [236100.0, 1.0], [242500.0, 1.0], [248900.0, 2.0], [255300.0, 1.0], [67900.0, 1.0], [280200.0, 1.0], [305800.0, 2.0], [106300.0, 1.0], [112700.0, 1.0], [119100.0, 2.0], [122300.0, 1.0], [128700.0, 1.0], [305300.0, 2.0], [318100.0, 2.0], [182600.0, 1.0], [189000.0, 1.0], [195400.0, 1.0], [227400.0, 1.0], [253000.0, 1.0], [259400.0, 1.0], [288400.0, 1.0], [301200.0, 2.0], [314000.0, 2.0], [35100.0, 1.0], [300700.0, 1.0], [161100.0, 1.0], [313500.0, 1.0], [173900.0, 1.0], [193100.0, 1.0], [49500.0, 1.0], [52700.0, 2.0], [54300.0, 1.0], [57500.0, 2.0], [59100.0, 1.0], [60700.0, 1.0], [244300.0, 1.0], [62300.0, 1.0], [250700.0, 1.0], [65500.0, 1.0], [67000.0, 1.0], [309400.0, 2.0], [105400.0, 1.0], [111800.0, 1.0], [115000.0, 1.0], [121400.0, 1.0], [127800.0, 1.0], [131000.0, 1.0], [308900.0, 2.0], [178000.0, 1.0], [184400.0, 1.0], [242000.0, 1.0], [304800.0, 1.0], [304300.0, 1.0], [175700.0, 3.0], [188500.0, 1.0], [233300.0, 1.0], [252500.0, 1.0], [258900.0, 1.0], [66100.0, 1.0], [69300.0, 1.0], [287400.0, 1.0], [300200.0, 1.0], [313000.0, 1.0], [110900.0, 1.0], [114100.0, 1.0], [117300.0, 2.0], [312500.0, 1.0], [179800.0, 1.0], [186200.0, 1.0], [243800.0, 1.0], [250200.0, 1.0], [256600.0, 2.0], [308400.0, 1.0], [132700.0, 1.0], [37400.0, 1.0], [307900.0, 2.0], [183900.0, 2.0], [190300.0, 1.0], [50200.0, 1.0], [196700.0, 1.0], [51800.0, 2.0], [209500.0, 1.0], [53400.0, 1.0], [241500.0, 1.0], [247900.0, 2.0], [254300.0, 1.0], [68400.0, 1.0], [316600.0, 1.0], [87600.0, 2.0], [97200.0, 1.0], [103600.0, 1.0], [113200.0, 1.0], [116400.0, 1.0], [126000.0, 1.0], [306500.0, 1.0], [164000.0, 1.0], [170400.0, 1.0], [215200.0, 1.0], [221600.0, 1.0], [228000.0, 1.0], [240800.0, 1.0], [247200.0, 2.0], [253600.0, 1.0], [276800.0, 1.0], [289600.0, 1.0], [302400.0, 1.0], [315200.0, 1.0], [161700.0, 1.0], [314700.0, 1.0], [168100.0, 1.0], [174500.0, 1.0], [193700.0, 1.0], [310600.0, 1.0], [100300.0, 1.0], [116300.0, 2.0], [119500.0, 2.0], [122700.0, 2.0], [125900.0, 2.0], [129100.0, 2.0], [284500.0, 1.0], [310100.0, 1.0], [165800.0, 1.0], [178600.0, 1.0], [185000.0, 1.0], [191400.0, 2.0], [197800.0, 1.0], [249000.0, 1.0], [255400.0, 1.0], [293200.0, 1.0], [306000.0, 1.0], [33700.0, 1.0], [137900.0, 1.0], [35300.0, 1.0], [279900.0, 1.0], [305500.0, 1.0], [157100.0, 1.0], [43300.0, 1.0], [176300.0, 1.0], [189100.0, 1.0], [49700.0, 1.0], [201900.0, 1.0], [51300.0, 2.0], [52900.0, 1.0], [56100.0, 1.0], [57700.0, 1.0], [59300.0, 1.0], [60900.0, 1.0], [240300.0, 1.0], [62500.0, 1.0], [246700.0, 1.0], [253100.0, 1.0], [259500.0, 1.0], [67400.0, 1.0], [301400.0, 1.0], [314200.0, 1.0], [109000.0, 1.0], [115400.0, 2.0], [118600.0, 1.0], [121800.0, 1.0], [186800.0, 1.0], [244400.0, 1.0], [250800.0, 1.0], [257200.0, 2.0], [309600.0, 1.0], [133300.0, 1.0], [309100.0, 1.0], [178100.0, 2.0], [190900.0, 2.0], [242100.0, 3.0], [248500.0, 1.0], [254900.0, 2.0], [261300.0, 1.0], [66500.0, 1.0], [85700.0, 1.0], [6500.0, 1.0], [6900.0, 1.0], [114500.0, 2.0], [117700.0, 1.0], [120900.0, 1.0], [130500.0, 1.0], [169400.0, 1.0], [188600.0, 1.0], [195000.0, 1.0], [246200.0, 1.0], [252600.0, 1.0], [259000.0, 1.0], [313200.0, 1.0], [34400.0, 1.0], [36000.0, 1.0], [167100.0, 1.0], [179900.0, 1.0], [186300.0, 1.0], [47200.0, 1.0], [48800.0, 1.0], [50400.0, 1.0], [52000.0, 1.0], [53600.0, 1.0], [60000.0, 2.0], [243900.0, 1.0], [63200.0, 1.0], [250300.0, 1.0], [64800.0, 2.0], [65600.0, 1.0], [308600.0, 1.0], [97600.0, 1.0], [113600.0, 1.0], [116800.0, 1.0], [120000.0, 1.0], [123200.0, 1.0], [129600.0, 1.0], [304900.0, 1.0], [182400.0, 1.0], [188800.0, 1.0], [201600.0, 1.0], [240000.0, 1.0], [252800.0, 2.0], [300800.0, 1.0], [287500.0, 1.0], [300300.0, 1.0], [160900.0, 2.0], [313100.0, 1.0], [167300.0, 1.0], [192900.0, 1.0], [244100.0, 1.0], [283400.0, 1.0], [296200.0, 1.0], [94300.0, 1.0], [97500.0, 1.0], [110300.0, 1.0], [116700.0, 1.0], [126300.0, 1.0], [308500.0, 1.0], [177800.0, 1.0], [184200.0, 1.0], [190600.0, 2.0], [209800.0, 1.0], [229000.0, 1.0], [235400.0, 1.0], [241800.0, 1.0], [254600.0, 1.0], [304400.0, 1.0], [303900.0, 2.0], [40300.0, 1.0], [175500.0, 1.0], [46700.0, 1.0], [188300.0, 1.0], [194700.0, 1.0], [54700.0, 1.0], [56300.0, 2.0], [226700.0, 1.0], [57900.0, 1.0], [59500.0, 1.0], [62700.0, 1.0], [64300.0, 1.0], [71000.0, 1.0], [299800.0, 1.0], [96600.0, 1.0], [115800.0, 1.0], [125400.0, 1.0], [286500.0, 1.0], [312100.0, 1.0], [186000.0, 1.0], [192400.0, 1.0], [243600.0, 1.0], [307500.0, 2.0], [183700.0, 1.0], [228500.0, 1.0], [247700.0, 1.0], [66900.0, 2.0], [303400.0, 4.0], [82900.0, 1.0], [102100.0, 1.0], [114900.0, 2.0], [118100.0, 1.0], [121300.0, 1.0], [127700.0, 1.0], [290100.0, 1.0], [162200.0, 1.0], [175000.0, 1.0], [194200.0, 2.0], [251800.0, 1.0], [258200.0, 1.0], [19700.0, 1.0], [23700.0, 1.0], [34600.0, 1.0], [147100.0, 1.0], [311100.0, 1.0], [172700.0, 1.0], [49000.0, 1.0], [50600.0, 1.0], [52200.0, 1.0], [53800.0, 2.0], [55400.0, 2.0], [60200.0, 1.0], [243100.0, 1.0], [255900.0, 2.0], [66000.0, 1.0], [294200.0, 1.0], [307000.0, 1.0], [114000.0, 1.0], [117200.0, 1.0], [120400.0, 2.0], [123600.0, 1.0], [126800.0, 1.0], [296900.0, 1.0], [178400.0, 1.0], [184800.0, 1.0], [191200.0, 1.0], [229600.0, 1.0], [242400.0, 1.0], [305600.0, 1.0], [137700.0, 1.0], [305100.0, 1.0], [169700.0, 1.0], [176100.0, 1.0], [182500.0, 1.0], [188900.0, 1.0], [195300.0, 1.0], [227300.0, 1.0], [240100.0, 1.0], [246500.0, 1.0], [259300.0, 1.0], [301000.0, 2.0], [313800.0, 2.0], [110700.0, 1.0], [113900.0, 1.0], [123500.0, 1.0], [126700.0, 1.0], [129900.0, 2.0], [300500.0, 1.0], [161000.0, 1.0], [313300.0, 1.0], [167400.0, 1.0], [173800.0, 1.0], [186600.0, 2.0], [244200.0, 1.0], [257000.0, 2.0], [309200.0, 1.0], [34100.0, 1.0], [308700.0, 2.0], [42100.0, 1.0], [177900.0, 1.0], [184300.0, 1.0], [48500.0, 2.0], [209900.0, 1.0], [53300.0, 1.0], [54900.0, 2.0], [56500.0, 1.0], [229100.0, 2.0], [58100.0, 1.0], [59700.0, 2.0], [248300.0, 1.0], [64500.0, 1.0], [254700.0, 1.0], [68200.0, 1.0], [304600.0, 2.0], [97000.0, 1.0], [125800.0, 1.0], [304100.0, 1.0], [182000.0, 1.0], [188400.0, 2.0], [194800.0, 1.0], [214000.0, 1.0], [233200.0, 1.0], [246000.0, 1.0], [252400.0, 1.0], [312800.0, 3.0], [160500.0, 1.0], [312300.0, 1.0], [192500.0, 1.0], [211700.0, 1.0], [243700.0, 1.0], [250100.0, 2.0], [102500.0, 1.0], [105700.0, 1.0], [112100.0, 1.0], [124900.0, 1.0], [145400.0, 1.0], [307700.0, 2.0], [177400.0, 1.0], [190200.0, 1.0], [241400.0, 1.0], [290800.0, 1.0], [316400.0, 1.0], [34800.0, 1.0], [149500.0, 1.0], [303100.0, 2.0], [315900.0, 2.0], [41200.0, 1.0], [181500.0, 2.0], [47600.0, 1.0], [50800.0, 2.0], [49200.0, 1.0], [52400.0, 2.0], [54000.0, 1.0], [55600.0, 1.0], [57200.0, 1.0], [58800.0, 1.0], [232700.0, 1.0], [60400.0, 1.0], [62000.0, 1.0], [251900.0, 1.0], [63600.0, 1.0], [258300.0, 1.0], [66400.0, 1.0], [311800.0, 3.0], [124000.0, 1.0], [127200.0, 2.0], [130400.0, 1.0], [308100.0, 1.0], [177600.0, 1.0], [241600.0, 1.0], [248000.0, 1.0], [291200.0, 1.0], [316800.0, 1.0], [265100.0, 1.0], [303500.0, 2.0], [316300.0, 2.0], [168900.0, 1.0], [175300.0, 1.0], [181700.0, 2.0], [188100.0, 1.0], [194500.0, 2.0], [232900.0, 1.0], [258500.0, 1.0], [66300.0, 1.0], [299400.0, 1.0], [312200.0, 1.0], [98300.0, 1.0], [111100.0, 1.0], [117500.0, 1.0], [120700.0, 2.0], [166600.0, 1.0], [185800.0, 1.0], [192200.0, 1.0], [243400.0, 1.0], [256200.0, 1.0], [145100.0, 1.0], [307100.0, 1.0], [39100.0, 1.0], [42300.0, 1.0], [177100.0, 1.0], [183500.0, 1.0], [50300.0, 1.0], [55100.0, 2.0], [56700.0, 1.0], [58300.0, 2.0], [234700.0, 1.0], [59900.0, 1.0], [241100.0, 1.0], [63100.0, 1.0], [247500.0, 1.0], [253900.0, 1.0], [290200.0, 1.0], [75000.0, 1.0], [97400.0, 1.0], [113400.0, 1.0], [116600.0, 1.0], [119800.0, 1.0], [123000.0, 1.0], [129400.0, 1.0], [289700.0, 1.0], [174800.0, 1.0], [181200.0, 2.0], [194000.0, 1.0], [232400.0, 2.0], [238800.0, 1.0], [245200.0, 1.0], [251600.0, 1.0], [258000.0, 1.0], [310700.0, 1.0], [159700.0, 1.0], [185300.0, 1.0], [191700.0, 1.0], [223700.0, 1.0], [242900.0, 1.0], [249300.0, 1.0], [255700.0, 2.0], [67700.0, 2.0], [293800.0, 1.0], [306600.0, 1.0], [102900.0, 1.0], [109300.0, 1.0], [112500.0, 2.0], [115700.0, 1.0], [118900.0, 1.0], [122100.0, 1.0], [125300.0, 1.0], [128500.0, 2.0], [306100.0, 1.0], [189400.0, 1.0], [227800.0, 1.0], [253400.0, 1.0], [289200.0, 1.0], [302000.0, 2.0], [35000.0, 1.0], [38200.0, 1.0], [301500.0, 1.0], [161500.0, 1.0], [314300.0, 1.0], [174300.0, 2.0], [187100.0, 1.0], [49400.0, 1.0], [51000.0, 2.0], [54200.0, 2.0], [55800.0, 1.0], [59000.0, 2.0], [60600.0, 1.0], [244700.0, 2.0], [63800.0, 1.0], [65400.0, 2.0], [310200.0, 1.0], [111600.0, 1.0], [121200.0, 1.0], [127600.0, 1.0], [130800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 318100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 35.51428571428571, "minX": 1.62478068E12, "maxY": 998.5, "series": [{"data": [[1.6247808E12, 706.5159574468087], [1.62478098E12, 174.01932367149766], [1.62478068E12, 998.5], [1.62478086E12, 529.0179640718561], [1.62478104E12, 35.51428571428571], [1.62478074E12, 898.5051020408162], [1.62478092E12, 361.5119047619047]], "isOverall": false, "label": "testinginstance", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478104E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2100.0, "minX": 1.0, "maxY": 318179.0, "series": [{"data": [[2.0, 317086.0], [3.0, 318179.0], [4.0, 316803.0], [5.0, 316690.0], [6.0, 316589.0], [7.0, 316494.0], [8.0, 316325.0], [9.0, 316324.0], [10.0, 316117.0], [11.0, 315924.0], [12.0, 315917.0], [13.0, 315623.0], [14.0, 315530.0], [15.0, 315420.0], [16.0, 315230.0], [17.0, 315026.0], [18.0, 315027.0], [19.0, 314733.0], [20.0, 314630.0], [21.0, 314437.0], [22.0, 314334.0], [23.0, 314241.0], [24.0, 314134.0], [25.0, 314038.0], [26.0, 314034.0], [27.0, 313841.0], [28.0, 313834.0], [29.0, 313539.0], [30.0, 313443.0], [31.0, 313434.0], [33.0, 313254.0], [32.0, 313335.0], [35.0, 313065.0], [34.0, 313139.0], [37.0, 312958.0], [36.0, 312953.0], [39.0, 312875.5], [41.0, 312572.0], [40.0, 312871.0], [43.0, 312277.0], [42.0, 312368.0], [45.0, 312068.0], [44.0, 312183.0], [47.0, 311899.0], [46.0, 311977.0], [49.0, 311877.0], [48.0, 311895.0], [51.0, 311479.0], [50.0, 311594.0], [53.0, 311190.0], [52.0, 311384.0], [55.0, 310998.0], [54.0, 311084.0], [57.0, 310883.0], [56.0, 310909.0], [59.0, 310687.0], [58.0, 310700.0], [61.0, 310489.0], [60.0, 310502.0], [63.0, 310200.0], [62.0, 310397.0], [67.0, 309819.0], [66.0, 309888.0], [65.0, 309985.0], [64.0, 310129.0], [71.0, 309307.0], [70.0, 309425.0], [69.0, 309428.0], [68.0, 309618.0], [75.0, 308911.0], [74.0, 308910.0], [73.0, 309102.0], [72.0, 309224.0], [79.0, 308531.0], [78.0, 308612.0], [77.0, 308714.0], [76.0, 308717.0], [83.0, 308143.0], [82.0, 308325.0], [81.0, 308350.0], [80.0, 308426.0], [87.0, 307733.0], [86.0, 307771.0], [85.0, 307931.0], [84.0, 307939.0], [91.0, 307286.0], [90.0, 307344.0], [89.0, 307528.0], [88.0, 307537.0], [95.0, 306640.0], [94.0, 306869.0], [93.0, 307078.0], [92.0, 307172.0], [99.0, 306175.0], [98.0, 306365.0], [97.0, 306450.0], [96.0, 306563.0], [103.0, 305857.0], [102.0, 305871.0], [101.0, 305980.0], [100.0, 306045.0], [107.0, 305365.0], [106.0, 305377.0], [105.0, 305559.0], [104.0, 305669.0], [111.0, 304818.0], [110.0, 304956.0], [109.0, 305172.0], [108.0, 305253.0], [115.0, 304646.0], [114.0, 304665.0], [113.0, 304772.0], [112.0, 304771.0], [119.0, 304191.0], [118.0, 304263.0], [117.0, 304349.0], [116.0, 304460.0], [123.0, 303511.0], [122.0, 303498.0], [121.0, 303959.0], [120.0, 303976.0], [127.0, 303493.0], [126.0, 303494.0], [135.0, 302247.0], [134.0, 302309.0], [133.0, 302453.0], [132.0, 302601.0], [131.0, 302707.0], [130.0, 303103.0], [129.0, 303195.0], [128.0, 303211.0], [143.0, 301454.0], [142.0, 301554.0], [141.0, 301646.0], [140.0, 301756.0], [139.0, 301863.0], [138.0, 302030.0], [137.0, 302034.0], [136.0, 302234.0], [151.0, 300690.0], [150.0, 300766.0], [149.0, 300859.0], [148.0, 301069.0], [147.0, 301070.0], [146.0, 301172.0], [145.0, 301244.0], [144.0, 301248.0], [159.0, 296983.0], [158.0, 297785.0], [157.0, 299487.0], [156.0, 299889.0], [155.0, 300195.0], [154.0, 300285.0], [153.0, 300389.0], [152.0, 300577.0], [167.0, 294088.0], [166.0, 294190.0], [165.0, 294201.0], [164.0, 294588.0], [163.0, 294686.0], [162.0, 295596.0], [161.0, 296294.0], [160.0, 296706.0], [175.0, 290416.0], [174.0, 290497.0], [173.0, 290893.0], [172.0, 290991.0], [171.0, 291299.0], [170.0, 293285.0], [169.0, 293693.0], [168.0, 293899.0], [183.0, 289203.0], [182.0, 289402.0], [181.0, 289501.0], [180.0, 289596.0], [179.0, 289703.0], [178.0, 289627.0], [177.0, 290103.0], [176.0, 290203.0], [191.0, 284507.0], [190.0, 285908.0], [189.0, 286501.0], [188.0, 287410.0], [187.0, 287519.0], [186.0, 288404.0], [185.0, 288524.0], [184.0, 289005.0], [199.0, 272424.0], [198.0, 274517.0], [197.0, 276819.0], [196.0, 277006.0], [195.0, 278615.0], [194.0, 279912.0], [193.0, 280297.0], [192.0, 283423.0], [207.0, 259772.0], [206.0, 260168.0], [205.0, 260445.0], [204.0, 261367.0], [203.0, 264847.0], [202.0, 265133.0], [201.0, 272046.0], [200.0, 272414.0], [215.0, 258690.0], [214.0, 258984.0], [213.0, 259079.0], [212.0, 259183.0], [211.0, 259376.0], [210.0, 259468.0], [209.0, 259569.0], [208.0, 259669.0], [223.0, 257216.0], [222.0, 257290.0], [221.0, 257486.0], [220.0, 258098.0], [219.0, 258289.0], [218.0, 258386.0], [217.0, 258489.0], [216.0, 258589.0], [231.0, 256136.0], [230.0, 256208.0], [229.0, 256345.0], [228.0, 256610.0], [227.0, 256618.0], [226.0, 256800.0], [225.0, 257015.0], [224.0, 257087.0], [239.0, 255175.0], [238.0, 255357.0], [237.0, 255456.0], [236.0, 255550.0], [235.0, 255737.0], [234.0, 255751.0], [233.0, 255938.0], [232.0, 255948.0], [247.0, 253961.0], [246.0, 254366.0], [245.0, 254546.0], [244.0, 254562.0], [243.0, 254663.0], [242.0, 254772.0], [241.0, 254955.0], [255.0, 252869.0], [254.0, 253068.0], [253.0, 253177.0], [252.0, 253269.0], [251.0, 253270.0], [250.0, 253466.0], [249.0, 253676.0], [248.0, 253760.0], [270.0, 250987.0], [271.0, 250894.0], [269.0, 251091.0], [268.0, 251477.0], [267.0, 251485.0], [266.0, 251598.0], [265.0, 251682.0], [264.0, 251886.0], [263.0, 251979.0], [257.0, 252784.0], [256.0, 252812.0], [259.0, 252536.0], [258.0, 252677.0], [262.0, 252288.0], [261.0, 252287.0], [260.0, 252482.0], [286.0, 248713.0], [287.0, 248513.0], [285.0, 248714.0], [284.0, 248914.5], [282.0, 249006.0], [281.0, 249202.0], [280.0, 249393.0], [279.0, 249404.0], [273.0, 250300.0], [272.0, 250705.0], [275.0, 250198.0], [274.0, 250287.0], [278.0, 249409.0], [277.0, 249913.0], [276.0, 250102.0], [302.0, 246735.0], [303.0, 246562.0], [301.0, 246833.0], [300.0, 246945.0], [299.0, 247229.0], [298.0, 247252.0], [297.0, 247340.0], [296.0, 247430.0], [295.0, 247530.0], [289.0, 248120.0], [288.0, 248327.0], [291.0, 247940.0], [290.0, 248021.0], [294.0, 247622.0], [293.0, 247749.0], [292.0, 247922.0], [318.0, 244659.0], [319.0, 244482.0], [317.0, 244758.0], [316.0, 244762.0], [315.0, 244899.0], [314.0, 245145.0], [313.0, 245175.0], [312.0, 245253.0], [311.0, 245354.0], [305.0, 246238.0], [304.0, 246342.0], [307.0, 245853.0], [306.0, 246034.0], [310.0, 245654.0], [309.0, 245660.0], [308.0, 245850.0], [334.0, 242897.0], [335.0, 242793.0], [333.0, 242995.0], [332.0, 243087.0], [331.0, 243183.0], [330.0, 243284.0], [329.0, 243486.0], [328.0, 243595.0], [327.0, 243688.0], [321.0, 244266.0], [320.0, 244357.0], [323.0, 244078.0], [322.0, 244173.0], [326.0, 243780.0], [325.0, 243879.0], [324.0, 243990.0], [350.0, 241105.0], [351.0, 240926.0], [349.0, 241213.0], [348.0, 241251.0], [347.0, 241425.0], [346.0, 241520.0], [345.0, 241691.0], [344.0, 241701.0], [343.0, 241899.0], [336.0, 242591.0], [338.0, 242297.0], [337.0, 242493.0], [342.0, 242010.0], [341.0, 242110.0], [340.0, 242196.0], [366.0, 233249.0], [367.0, 232998.0], [365.0, 233342.0], [364.0, 234745.0], [363.0, 235448.0], [362.0, 235954.0], [361.0, 236142.0], [360.0, 236932.0], [359.0, 238832.0], [353.0, 240509.0], [352.0, 240826.0], [355.0, 240130.0], [354.0, 240342.0], [358.0, 239221.0], [357.0, 239922.0], [356.0, 240026.0], [382.0, 228063.0], [383.0, 227876.0], [381.0, 228154.0], [380.0, 228263.0], [379.0, 228188.0], [378.0, 228557.0], [377.0, 229061.0], [376.0, 229155.0], [375.0, 229107.0], [369.0, 232745.0], [368.0, 232853.0], [371.0, 232446.0], [370.0, 232469.0], [374.0, 229654.0], [373.0, 231849.0], [372.0, 232354.0], [398.0, 209864.0], [399.0, 209566.0], [397.0, 209966.0], [396.0, 211768.0], [395.0, 213867.0], [394.0, 214077.0], [393.0, 215263.0], [392.0, 216645.0], [391.0, 221654.0], [385.0, 227362.0], [384.0, 227467.0], [387.0, 226685.0], [386.0, 227180.0], [390.0, 223768.0], [389.0, 224155.0], [388.0, 226768.0], [414.0, 194282.0], [415.0, 194274.0], [413.0, 194566.0], [412.0, 194575.0], [411.0, 194786.0], [410.0, 194879.0], [409.0, 195070.0], [408.0, 195373.0], [407.0, 195472.0], [401.0, 201667.0], [400.0, 201976.0], [403.0, 196779.0], [402.0, 197869.0], [406.0, 195666.0], [405.0, 196199.0], [404.0, 196167.0], [430.0, 191602.0], [431.0, 191499.0], [429.0, 191786.0], [428.0, 191885.0], [427.0, 192080.0], [426.0, 192085.0], [425.0, 192275.0], [424.0, 192392.0], [423.0, 192483.0], [417.0, 193786.0], [416.0, 194084.0], [419.0, 193400.0], [418.0, 193480.0], [422.0, 192585.0], [421.0, 192983.0], [420.0, 193195.0], [445.0, 190014.0], [447.0, 189799.5], [444.0, 190026.0], [435.0, 191103.0], [434.0, 191183.0], [433.0, 191289.0], [432.0, 191493.0], [443.0, 190295.0], [442.0, 190387.0], [441.0, 190502.0], [440.0, 190590.0], [439.0, 190692.0], [438.0, 190695.0], [437.0, 190908.0], [436.0, 190994.0], [462.0, 188106.0], [463.0, 188005.0], [461.0, 188303.0], [460.0, 188410.0], [459.0, 188416.0], [458.0, 188599.0], [457.0, 188607.0], [456.0, 188803.0], [455.0, 188914.0], [449.0, 189502.0], [448.0, 189702.0], [451.0, 189300.0], [450.0, 189401.0], [454.0, 189020.0], [453.0, 189112.0], [452.0, 189205.0], [478.0, 185616.0], [479.0, 185422.0], [477.0, 185621.0], [476.0, 185808.0], [475.0, 186011.0], [474.0, 186210.0], [473.0, 186301.0], [472.0, 186406.0], [471.0, 186609.0], [465.0, 187520.0], [464.0, 187714.0], [467.0, 187208.0], [466.0, 187510.0], [470.0, 186624.0], [469.0, 186809.0], [468.0, 187110.0], [494.0, 183718.0], [495.0, 183619.0], [493.0, 183913.0], [492.0, 183917.0], [491.0, 184109.0], [490.0, 184219.0], [489.0, 184319.0], [488.0, 184413.0], [487.0, 184638.0], [481.0, 185313.0], [480.0, 185410.0], [483.0, 185007.0], [482.0, 185113.0], [486.0, 184723.0], [485.0, 184817.0], [484.0, 184911.0], [510.0, 181554.0], [511.0, 181358.0], [509.0, 181571.0], [508.0, 181750.0], [507.0, 181757.0], [506.0, 182064.0], [505.0, 182348.0], [504.0, 182462.0], [503.0, 182537.0], [497.0, 183322.0], [496.0, 183519.0], [499.0, 182917.0], [498.0, 183131.0], [502.0, 182655.0], [501.0, 182834.0], [500.0, 182840.0], [540.0, 176704.0], [543.0, 176135.0], [529.0, 178164.0], [528.0, 178175.0], [531.0, 177975.0], [530.0, 178087.0], [533.0, 177795.0], [532.0, 177873.0], [542.0, 176304.0], [541.0, 176504.0], [539.0, 176799.0], [538.0, 177024.0], [537.0, 177195.0], [536.0, 177216.0], [527.0, 178393.0], [513.0, 181247.0], [512.0, 181257.0], [515.0, 180864.0], [514.0, 181041.0], [517.0, 179855.0], [516.0, 179948.0], [519.0, 179557.0], [518.0, 179573.0], [526.0, 178469.0], [525.0, 178665.0], [524.0, 178766.0], [523.0, 179054.0], [521.0, 179235.0], [520.0, 179339.0], [535.0, 177489.0], [534.0, 177679.0], [572.0, 166680.0], [575.0, 166085.0], [561.0, 172758.0], [560.0, 173671.0], [563.0, 170441.0], [562.0, 172457.0], [565.0, 169468.0], [564.0, 169765.0], [574.0, 166288.0], [573.0, 166411.0], [571.0, 166771.0], [570.0, 167195.0], [569.0, 167390.0], [568.0, 167477.0], [559.0, 173871.0], [545.0, 175729.0], [544.0, 175909.0], [547.0, 175715.0], [546.0, 175723.0], [549.0, 175353.0], [548.0, 175523.0], [551.0, 174923.0], [550.0, 175048.0], [558.0, 173977.0], [557.0, 174153.0], [556.0, 174366.5], [554.0, 174572.0], [553.0, 174767.0], [552.0, 174840.0], [567.0, 168115.0], [566.0, 168962.0], [604.0, 131739.0], [607.0, 130840.0], [593.0, 149513.0], [592.0, 150873.0], [595.0, 147108.0], [594.0, 149305.0], [597.0, 145122.0], [596.0, 145410.0], [606.0, 131025.0], [605.0, 131166.0], [603.0, 132730.0], [602.0, 133385.0], [601.0, 134422.0], [600.0, 137726.0], [591.0, 157127.0], [577.0, 164091.0], [576.0, 165805.0], [579.0, 161996.0], [578.0, 162299.0], [581.0, 161480.0], [580.0, 161783.0], [583.0, 161398.0], [582.0, 161591.0], [590.0, 159799.0], [589.0, 159809.0], [588.0, 160502.0], [587.0, 160901.0], [586.0, 160911.0], [585.0, 161168.0], [584.0, 161093.0], [599.0, 137918.0], [598.0, 144916.0], [636.0, 127288.0], [639.0, 126885.0], [625.0, 128581.0], [624.0, 128768.0], [627.0, 128476.0], [626.0, 128570.0], [629.0, 127982.0], [628.0, 128074.0], [638.0, 127005.0], [637.0, 127089.0], [635.0, 127296.0], [634.0, 127485.0], [633.0, 127507.0], [632.0, 127688.0], [623.0, 128869.0], [608.0, 130851.0], [610.0, 130538.0], [609.0, 130644.0], [612.0, 130265.0], [611.0, 130441.0], [615.0, 129746.0], [614.0, 129948.0], [622.0, 129162.0], [621.0, 129145.0], [620.0, 129341.0], [619.0, 129363.0], [618.0, 129437.0], [617.0, 129633.0], [616.0, 129732.0], [631.0, 127767.0], [630.0, 127876.0], [668.0, 122791.0], [671.0, 122006.0], [657.0, 124312.0], [656.0, 124700.0], [659.0, 124012.0], [658.0, 124208.0], [661.0, 123627.0], [660.0, 123804.0], [670.0, 122115.0], [669.0, 122307.0], [667.0, 122727.0], [666.0, 122922.0], [665.0, 122925.0], [664.0, 123001.0], [655.0, 124896.0], [641.0, 126590.0], [640.0, 126784.0], [643.0, 126330.0], [642.0, 126502.0], [645.0, 126194.0], [644.0, 126190.0], [647.0, 125996.0], [646.0, 126093.0], [654.0, 124904.0], [653.0, 125371.0], [652.0, 125293.0], [651.0, 125494.0], [650.0, 125601.0], [649.0, 125800.0], [648.0, 125900.0], [663.0, 123216.0], [662.0, 123508.0], [700.0, 118703.0], [703.0, 118343.0], [689.0, 120051.0], [688.0, 120120.0], [691.0, 119723.0], [690.0, 119851.0], [693.0, 119538.0], [692.0, 119544.0], [702.0, 118449.0], [701.0, 118641.0], [699.0, 118737.0], [698.0, 118936.0], [697.0, 119107.0], [696.0, 119135.0], [687.0, 120246.0], [672.0, 121913.0], [674.0, 121531.0], [673.0, 121838.0], [676.0, 121486.0], [675.0, 121521.0], [678.0, 121297.0], [677.0, 121398.0], [686.0, 120441.0], [684.0, 120636.0], [683.0, 120746.0], [682.0, 120724.0], [681.0, 121031.0], [680.0, 121006.0], [695.0, 119252.0], [694.0, 119343.0], [732.0, 114975.0], [735.0, 114571.0], [721.0, 116063.0], [720.0, 116054.0], [723.0, 115877.0], [722.0, 115768.0], [725.0, 115666.0], [724.0, 115642.0], [734.0, 114678.0], [733.0, 114773.0], [731.0, 114985.0], [730.0, 115086.0], [729.0, 115197.0], [728.0, 115234.0], [719.0, 116308.0], [705.0, 117952.0], [704.0, 118145.0], [707.0, 117747.0], [706.0, 117842.0], [709.0, 117350.0], [708.0, 117559.0], [711.0, 117200.0], [710.0, 117343.0], [718.0, 116331.0], [717.0, 116488.0], [716.0, 116542.0], [715.0, 116646.0], [714.0, 116747.0], [713.0, 116832.0], [712.0, 116960.0], [727.0, 115481.0], [726.0, 115472.0], [764.0, 109074.0], [767.0, 105740.0], [753.0, 112089.0], [752.0, 112172.0], [755.0, 111893.0], [754.0, 111982.0], [757.0, 111570.0], [756.0, 111679.0], [766.0, 106375.0], [765.0, 106588.0], [763.0, 109380.0], [762.0, 110399.0], [761.0, 110768.0], [760.0, 110998.0], [751.0, 112372.0], [737.0, 114285.0], [736.0, 114509.0], [739.0, 114070.0], [738.0, 114170.0], [741.0, 113890.0], [740.0, 113989.0], [743.0, 113684.0], [742.0, 113782.0], [750.0, 112373.0], [749.0, 112572.0], [748.0, 112593.0], [747.0, 112789.0], [746.0, 112882.0], [745.0, 113299.0], [744.0, 113473.0], [759.0, 111178.0], [758.0, 111497.0], [796.0, 82975.0], [799.0, 71074.0], [785.0, 97268.0], [784.0, 97492.0], [787.0, 96982.0], [786.0, 97089.0], [789.0, 96382.0], [788.0, 96670.0], [798.0, 74981.0], [797.0, 75075.0], [795.0, 83179.0], [794.0, 83689.0], [793.0, 85773.0], [792.0, 87601.0], [783.0, 97571.0], [769.0, 103670.0], [768.0, 105482.0], [771.0, 102862.0], [770.0, 102984.0], [773.0, 102510.0], [772.0, 102783.0], [775.0, 102180.0], [774.0, 102481.0], [782.0, 97691.0], [781.0, 97871.0], [780.0, 97843.0], [779.0, 98376.0], [778.0, 99200.0], [777.0, 100371.0], [776.0, 101891.0], [791.0, 87684.0], [790.0, 94363.0], [828.0, 65181.0], [831.0, 64884.0], [817.0, 66472.0], [816.0, 66565.0], [819.0, 66275.0], [818.0, 66385.0], [821.0, 66078.0], [820.0, 66174.0], [830.0, 64973.0], [829.0, 65196.0], [827.0, 65411.0], [826.0, 65494.0], [825.0, 65594.0], [824.0, 65603.0], [815.0, 66789.0], [801.0, 69397.0], [800.0, 70375.0], [803.0, 68270.0], [802.0, 68466.0], [805.0, 67988.0], [804.0, 68177.0], [807.0, 67791.0], [806.0, 67795.0], [813.0, 66973.0], [812.0, 66992.0], [811.0, 67081.0], [810.0, 67472.0], [809.0, 67571.0], [808.0, 67687.0], [823.0, 65895.0], [822.0, 65867.0], [860.0, 60517.0], [863.0, 60053.0], [849.0, 62700.0], [848.0, 62682.0], [851.0, 62351.0], [850.0, 62580.0], [853.0, 62053.0], [852.0, 62177.0], [862.0, 60284.0], [861.0, 60465.0], [859.0, 60611.0], [858.0, 60770.0], [857.0, 60869.0], [856.0, 60982.0], [847.0, 62846.0], [833.0, 64569.0], [832.0, 64878.0], [835.0, 64373.0], [834.0, 64481.0], [837.0, 64279.0], [836.0, 64284.0], [839.0, 64065.0], [838.0, 64073.0], [846.0, 63166.0], [845.0, 63272.0], [844.0, 63360.0], [843.0, 63581.0], [842.0, 63677.0], [841.0, 63780.0], [840.0, 63864.0], [855.0, 61753.0], [854.0, 61951.0], [892.0, 56584.0], [895.0, 56153.0], [881.0, 57948.0], [880.0, 58158.0], [883.0, 57783.0], [882.0, 57876.0], [885.0, 57548.0], [884.0, 57656.0], [894.0, 56310.0], [893.0, 56396.0], [891.0, 56761.0], [890.0, 56968.0], [889.0, 56972.0], [888.0, 57182.0], [879.0, 58371.0], [865.0, 59927.0], [864.0, 60076.0], [867.0, 59721.0], [866.0, 59773.0], [869.0, 59371.0], [868.0, 59596.0], [871.0, 59126.0], [870.0, 59272.0], [878.0, 58393.0], [877.0, 58549.0], [876.0, 58557.0], [875.0, 58785.0], [874.0, 58844.0], [873.0, 59065.0], [872.0, 59083.0], [887.0, 57262.0], [886.0, 57504.0], [924.0, 52875.0], [927.0, 52572.0], [913.0, 54084.0], [912.0, 54278.0], [915.0, 53888.0], [914.0, 53886.0], [917.0, 53663.0], [916.0, 53777.0], [926.0, 52779.0], [925.0, 52756.0], [923.0, 52963.0], [922.0, 53092.0], [921.0, 53274.0], [920.0, 53284.0], [911.0, 54266.0], [897.0, 55873.0], [896.0, 56016.0], [899.0, 55676.0], [898.0, 55729.0], [901.0, 55499.0], [900.0, 55561.0], [903.0, 55176.0], [902.0, 55494.0], [910.0, 54317.0], [909.0, 54497.0], [908.0, 54627.0], [907.0, 54755.0], [906.0, 54961.0], [905.0, 54948.0], [904.0, 55146.0], [919.0, 53305.0], [918.0, 53449.0], [956.0, 49086.0], [959.0, 48514.0], [945.0, 50667.0], [944.0, 50878.0], [947.0, 50461.0], [946.0, 50599.0], [949.0, 50281.0], [948.0, 50329.0], [958.0, 48881.0], [957.0, 48957.0], [955.0, 49228.0], [954.0, 49455.0], [953.0, 49554.0], [952.0, 49665.0], [943.0, 50866.0], [929.0, 52464.0], [928.0, 52429.0], [931.0, 52182.0], [930.0, 52249.0], [933.0, 51865.0], [932.0, 52060.0], [935.0, 51661.0], [934.0, 51862.0], [942.0, 51003.0], [941.0, 51095.0], [940.0, 51282.0], [939.0, 51359.0], [938.0, 51366.0], [937.0, 51482.0], [936.0, 51602.0], [951.0, 49711.0], [950.0, 50085.0], [988.0, 34176.0], [991.0, 28990.0], [977.0, 36849.0], [976.0, 37480.0], [979.0, 35663.0], [978.0, 36061.0], [981.0, 35277.0], [980.0, 35350.0], [990.0, 33362.0], [989.0, 33793.0], [987.0, 34459.0], [986.0, 34620.0], [985.0, 34702.0], [984.0, 34886.0], [975.0, 38281.0], [961.0, 47610.0], [960.0, 48500.0], [963.0, 46872.0], [962.0, 47250.0], [965.0, 44501.0], [964.0, 46797.0], [967.0, 42391.0], [966.0, 43382.0], [974.0, 38679.0], [973.0, 39183.0], [972.0, 40294.0], [971.0, 40387.0], [970.0, 41271.0], [969.0, 41889.0], [968.0, 42173.0], [983.0, 35053.0], [982.0, 35182.0], [1000.0, 2100.0], [999.0, 6250.0], [998.0, 6562.0], [997.0, 6955.0], [996.0, 11282.0], [995.0, 19773.0], [994.0, 20121.0], [993.0, 23771.0], [992.0, 24281.0], [1.0, 318115.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.5140000000001, 179806.94700000022]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 33.4, "minX": 1.62478068E12, "maxY": 37701.6, "series": [{"data": [[1.6247808E12, 34241.066666666666], [1.62478098E12, 37701.6], [1.62478068E12, 728.5333333333333], [1.62478086E12, 30416.266666666666], [1.62478104E12, 12749.333333333334], [1.62478074E12, 35698.13333333333], [1.62478092E12, 30598.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6247808E12, 1569.8], [1.62478098E12, 1728.45], [1.62478068E12, 33.4], [1.62478086E12, 1394.45], [1.62478104E12, 584.5], [1.62478074E12, 1636.6], [1.62478092E12, 1402.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478104E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5466.75, "minX": 1.62478068E12, "maxY": 313176.01428571425, "series": [{"data": [[1.6247808E12, 115380.63829787236], [1.62478098E12, 282993.8937198069], [1.62478068E12, 5466.75], [1.62478086E12, 173258.53892215568], [1.62478104E12, 313176.01428571425], [1.62478074E12, 54277.73469387756], [1.62478092E12, 226302.68452380953]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478104E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5463.5, "minX": 1.62478068E12, "maxY": 313170.8428571429, "series": [{"data": [[1.6247808E12, 115373.2925531915], [1.62478098E12, 282987.5845410627], [1.62478068E12, 5463.5], [1.62478086E12, 173254.56886227545], [1.62478104E12, 313170.8428571429], [1.62478074E12, 54272.18367346941], [1.62478092E12, 226296.55952380953]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478104E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 593.25, "minX": 1.62478068E12, "maxY": 13788.271428571426, "series": [{"data": [[1.6247808E12, 5674.1914893616995], [1.62478098E12, 12314.19323671498], [1.62478068E12, 593.25], [1.62478086E12, 7754.562874251497], [1.62478104E12, 13788.271428571426], [1.62478074E12, 2951.8214285714294], [1.62478092E12, 9998.089285714286]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478104E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2100.0, "minX": 1.62478068E12, "maxY": 318179.0, "series": [{"data": [[1.6247808E12, 129964.0], [1.62478098E12, 309307.0], [1.62478068E12, 6955.0], [1.62478086E12, 189800.0], [1.62478104E12, 318179.0], [1.62478074E12, 69397.0], [1.62478092E12, 249409.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6247808E12, 127777.9], [1.62478098E12, 307297.6], [1.62478068E12, 6955.0], [1.62478086E12, 188145.4], [1.62478104E12, 316477.1], [1.62478074E12, 66204.3], [1.62478092E12, 247634.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6247808E12, 129935.52], [1.62478098E12, 309214.24], [1.62478068E12, 6955.0], [1.62478086E12, 189799.32], [1.62478104E12, 318179.0], [1.62478074E12, 68493.93000000001], [1.62478092E12, 249405.55]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6247808E12, 129154.35], [1.62478098E12, 308395.6], [1.62478068E12, 6955.0], [1.62478086E12, 189075.2], [1.62478104E12, 316930.35], [1.62478074E12, 67486.84999999999], [1.62478092E12, 248713.55]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6247808E12, 70375.0], [1.62478098E12, 249913.0], [1.62478068E12, 2100.0], [1.62478086E12, 130265.0], [1.62478104E12, 309425.0], [1.62478074E12, 11282.0], [1.62478092E12, 190014.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6247808E12, 117794.5], [1.62478098E12, 290497.0], [1.62478068E12, 6406.0], [1.62478086E12, 178164.0], [1.62478104E12, 313011.5], [1.62478074E12, 55702.5], [1.62478092E12, 236048.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478104E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 122856.5, "minX": 1.0, "maxY": 308715.5, "series": [{"data": [[1.0, 167266.0], [2.0, 137822.0], [8.0, 179448.0], [4.0, 232799.0], [9.0, 126741.0], [10.0, 244219.5], [5.0, 176504.0], [11.0, 178397.5], [3.0, 173871.0], [6.0, 122856.5], [12.0, 308715.5], [7.0, 216329.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 12.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 122854.5, "minX": 1.0, "maxY": 308713.0, "series": [{"data": [[1.0, 167264.0], [2.0, 137819.5], [8.0, 179447.0], [4.0, 232794.0], [9.0, 126738.5], [10.0, 244217.5], [5.0, 176503.0], [11.0, 178392.5], [3.0, 173869.0], [6.0, 122854.5], [12.0, 308713.0], [7.0, 216328.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 12.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62478068E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62478068E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478068E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.62478068E12, "maxY": 3.45, "series": [{"data": [[1.6247808E12, 3.1333333333333333], [1.62478098E12, 3.45], [1.62478068E12, 0.06666666666666667], [1.62478086E12, 2.783333333333333], [1.62478104E12, 1.1666666666666667], [1.62478074E12, 3.2666666666666666], [1.62478092E12, 2.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478104E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.62478068E12, "maxY": 3.45, "series": [{"data": [[1.6247808E12, 3.1333333333333333], [1.62478098E12, 3.45], [1.62478068E12, 0.06666666666666667], [1.62478086E12, 2.783333333333333], [1.62478104E12, 1.1666666666666667], [1.62478074E12, 3.2666666666666666], [1.62478092E12, 2.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478104E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.62478068E12, "maxY": 3.45, "series": [{"data": [[1.6247808E12, 3.1333333333333333], [1.62478098E12, 3.45], [1.62478068E12, 0.06666666666666667], [1.62478086E12, 2.783333333333333], [1.62478104E12, 1.1666666666666667], [1.62478074E12, 3.2666666666666666], [1.62478092E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478104E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

