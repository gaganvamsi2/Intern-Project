/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2701.0, "minX": 0.0, "maxY": 158375.0, "series": [{"data": [[0.0, 2701.0], [0.1, 2701.0], [0.2, 7352.0], [0.3, 7352.0], [0.4, 17457.0], [0.5, 17457.0], [0.6, 17457.0], [0.7, 24774.0], [0.8, 31039.0], [0.9, 31039.0], [1.0, 31143.0], [1.1, 31143.0], [1.2, 31557.0], [1.3, 31557.0], [1.4, 32672.0], [1.5, 32672.0], [1.6, 32946.0], [1.7, 32946.0], [1.8, 33453.0], [1.9, 33453.0], [2.0, 34455.0], [2.1, 34455.0], [2.2, 34631.0], [2.3, 34631.0], [2.4, 34939.0], [2.5, 34939.0], [2.6, 35865.0], [2.7, 35865.0], [2.8, 35865.0], [2.9, 36168.0], [3.0, 36168.0], [3.1, 36933.0], [3.2, 36933.0], [3.3, 37442.0], [3.4, 37442.0], [3.5, 38409.0], [3.6, 38409.0], [3.7, 39130.0], [3.8, 39130.0], [3.9, 39931.0], [4.0, 39931.0], [4.1, 40328.0], [4.2, 40328.0], [4.3, 40563.0], [4.4, 40563.0], [4.5, 41231.0], [4.6, 41231.0], [4.7, 42033.0], [4.8, 42033.0], [4.9, 42840.0], [5.0, 42840.0], [5.1, 43228.0], [5.2, 43228.0], [5.3, 43349.0], [5.4, 43349.0], [5.5, 43531.0], [5.6, 43531.0], [5.7, 43627.0], [5.8, 43627.0], [5.9, 43819.0], [6.0, 43819.0], [6.1, 43939.0], [6.2, 43939.0], [6.3, 44034.0], [6.4, 44034.0], [6.5, 44127.0], [6.6, 44127.0], [6.7, 44232.0], [6.8, 44232.0], [6.9, 44401.0], [7.0, 44401.0], [7.1, 44422.0], [7.2, 44422.0], [7.3, 44447.0], [7.4, 44447.0], [7.5, 44615.0], [7.6, 44615.0], [7.7, 44712.0], [7.8, 44712.0], [7.9, 44827.0], [8.0, 44827.0], [8.1, 45018.0], [8.2, 45018.0], [8.3, 45209.0], [8.4, 45209.0], [8.5, 45318.0], [8.6, 45318.0], [8.7, 45414.0], [8.8, 45517.0], [8.9, 45517.0], [9.0, 45618.0], [9.1, 45618.0], [9.2, 45722.0], [9.3, 45722.0], [9.4, 45811.0], [9.5, 45811.0], [9.6, 45909.0], [9.7, 45909.0], [9.8, 46011.0], [9.9, 46011.0], [10.0, 46170.0], [10.1, 46170.0], [10.2, 46319.0], [10.3, 46319.0], [10.4, 46329.0], [10.5, 46329.0], [10.6, 46516.0], [10.7, 46516.0], [10.8, 46605.0], [10.9, 46605.0], [11.0, 46768.0], [11.1, 46768.0], [11.2, 46804.0], [11.3, 46804.0], [11.4, 46884.0], [11.5, 46884.0], [11.6, 47003.0], [11.7, 47003.0], [11.8, 47121.0], [11.9, 47121.0], [12.0, 47268.0], [12.1, 47268.0], [12.2, 47400.0], [12.3, 47400.0], [12.4, 47414.0], [12.5, 47414.0], [12.6, 48027.0], [12.7, 48027.0], [12.8, 48272.0], [12.9, 48272.0], [13.0, 48306.0], [13.1, 48306.0], [13.2, 48506.0], [13.3, 48506.0], [13.4, 48519.0], [13.5, 48519.0], [13.6, 48715.0], [13.7, 48715.0], [13.8, 48909.0], [13.9, 48909.0], [14.0, 48998.0], [14.1, 48998.0], [14.2, 49012.0], [14.3, 49012.0], [14.4, 49311.0], [14.5, 49311.0], [14.6, 49404.0], [14.7, 49404.0], [14.8, 49496.0], [14.9, 49496.0], [15.0, 49701.0], [15.1, 49701.0], [15.2, 49715.0], [15.3, 49715.0], [15.4, 49905.0], [15.5, 49905.0], [15.6, 49918.0], [15.7, 49918.0], [15.8, 50100.0], [15.9, 50100.0], [16.0, 50112.0], [16.1, 50112.0], [16.2, 50292.0], [16.3, 50292.0], [16.4, 50396.0], [16.5, 50396.0], [16.6, 50407.0], [16.7, 50407.0], [16.8, 50594.0], [16.9, 50594.0], [17.0, 50705.0], [17.1, 50705.0], [17.2, 50973.0], [17.3, 50973.0], [17.4, 51071.0], [17.5, 51071.0], [17.6, 51109.0], [17.7, 51109.0], [17.8, 51178.0], [17.9, 51178.0], [18.0, 51290.0], [18.1, 51290.0], [18.2, 51398.0], [18.3, 51398.0], [18.4, 51496.0], [18.5, 51496.0], [18.6, 51690.0], [18.7, 51690.0], [18.8, 51785.0], [18.9, 51785.0], [19.0, 51894.0], [19.1, 51894.0], [19.2, 51907.0], [19.3, 51907.0], [19.4, 52092.0], [19.5, 52092.0], [19.6, 52296.0], [19.7, 52296.0], [19.8, 52581.0], [19.9, 52581.0], [20.0, 52694.0], [20.1, 52694.0], [20.2, 52869.0], [20.3, 52869.0], [20.4, 52894.0], [20.5, 52894.0], [20.6, 53088.0], [20.7, 53088.0], [20.8, 53297.0], [20.9, 53297.0], [21.0, 53464.0], [21.1, 53464.0], [21.2, 53588.0], [21.3, 53588.0], [21.4, 53692.0], [21.5, 53692.0], [21.6, 53892.0], [21.7, 53892.0], [21.8, 54179.0], [21.9, 54179.0], [22.0, 54184.0], [22.1, 54184.0], [22.2, 54392.0], [22.3, 54392.0], [22.4, 54486.0], [22.5, 54486.0], [22.6, 54491.0], [22.7, 54491.0], [22.8, 54897.0], [22.9, 54897.0], [23.0, 54981.0], [23.1, 54981.0], [23.2, 55268.0], [23.3, 55268.0], [23.4, 55382.0], [23.5, 55382.0], [23.6, 55406.0], [23.7, 55406.0], [23.8, 55693.0], [23.9, 55693.0], [24.0, 55856.0], [24.1, 55856.0], [24.2, 55880.0], [24.3, 55880.0], [24.4, 55974.0], [24.5, 55974.0], [24.6, 56284.0], [24.7, 56284.0], [24.8, 56297.0], [24.9, 56297.0], [25.0, 56579.0], [25.1, 56579.0], [25.2, 56897.0], [25.3, 56897.0], [25.4, 57007.0], [25.5, 57007.0], [25.6, 57086.0], [25.7, 57086.0], [25.8, 57283.0], [25.9, 57283.0], [26.0, 57393.0], [26.1, 57393.0], [26.2, 57603.0], [26.3, 57603.0], [26.4, 57791.0], [26.5, 57791.0], [26.6, 57809.0], [26.7, 57809.0], [26.8, 57897.0], [26.9, 57897.0], [27.0, 57998.0], [27.1, 57998.0], [27.2, 58171.0], [27.3, 58171.0], [27.4, 58286.0], [27.5, 58286.0], [27.6, 58388.0], [27.7, 58388.0], [27.8, 58416.0], [27.9, 58416.0], [28.0, 58497.0], [28.1, 58497.0], [28.2, 58798.0], [28.3, 58798.0], [28.4, 59192.0], [28.5, 59192.0], [28.6, 59282.0], [28.7, 59282.0], [28.8, 59397.0], [28.9, 59397.0], [29.0, 59594.0], [29.1, 59594.0], [29.2, 59705.0], [29.3, 59705.0], [29.4, 59802.0], [29.5, 59802.0], [29.6, 60101.0], [29.7, 60101.0], [29.8, 60123.0], [29.9, 60123.0], [30.0, 60293.0], [30.1, 60293.0], [30.2, 60395.0], [30.3, 60395.0], [30.4, 60527.0], [30.5, 60527.0], [30.6, 60699.0], [30.7, 60699.0], [30.8, 60714.0], [30.9, 60714.0], [31.0, 60904.0], [31.1, 60904.0], [31.2, 60999.0], [31.3, 60999.0], [31.4, 61102.0], [31.5, 61102.0], [31.6, 61280.0], [31.7, 61280.0], [31.8, 61399.0], [31.9, 61399.0], [32.0, 61603.0], [32.1, 61603.0], [32.2, 61701.0], [32.3, 61701.0], [32.4, 61804.0], [32.5, 61804.0], [32.6, 61911.0], [32.7, 61911.0], [32.8, 62114.0], [32.9, 62114.0], [33.0, 62305.0], [33.1, 62305.0], [33.2, 62504.0], [33.3, 62504.0], [33.4, 62517.0], [33.5, 62517.0], [33.6, 62531.0], [33.7, 62531.0], [33.8, 62911.0], [33.9, 62911.0], [34.0, 63103.0], [34.1, 63103.0], [34.2, 63504.0], [34.3, 63504.0], [34.4, 63518.0], [34.5, 63518.0], [34.6, 63702.0], [34.7, 63702.0], [34.8, 63784.0], [34.9, 63784.0], [35.0, 64006.0], [35.1, 64006.0], [35.2, 64211.0], [35.3, 64211.0], [35.4, 64507.0], [35.5, 64507.0], [35.6, 64615.0], [35.7, 64615.0], [35.8, 64626.0], [35.9, 64626.0], [36.0, 64710.0], [36.1, 64710.0], [36.2, 64810.0], [36.3, 64810.0], [36.4, 64902.0], [36.5, 64902.0], [36.6, 65109.0], [36.7, 65109.0], [36.8, 65124.0], [36.9, 65124.0], [37.0, 65313.0], [37.1, 65313.0], [37.2, 65407.0], [37.3, 65407.0], [37.4, 65506.0], [37.5, 65506.0], [37.6, 65608.0], [37.7, 65608.0], [37.8, 65723.0], [37.9, 65723.0], [38.0, 65827.0], [38.1, 65827.0], [38.2, 66002.0], [38.3, 66002.0], [38.4, 66002.0], [38.5, 66016.0], [38.6, 66016.0], [38.7, 66213.0], [38.8, 66213.0], [38.9, 66229.0], [39.0, 66229.0], [39.1, 66313.0], [39.2, 66313.0], [39.3, 66611.0], [39.4, 66611.0], [39.5, 66621.0], [39.6, 66621.0], [39.7, 66812.0], [39.8, 66812.0], [39.9, 70026.0], [40.0, 70026.0], [40.1, 80515.0], [40.2, 80515.0], [40.3, 82224.0], [40.4, 82224.0], [40.5, 88685.0], [40.6, 88685.0], [40.7, 94206.0], [40.8, 94206.0], [40.9, 94504.0], [41.0, 94504.0], [41.1, 94924.0], [41.2, 94924.0], [41.3, 95903.0], [41.4, 95903.0], [41.5, 96218.0], [41.6, 96218.0], [41.7, 96717.0], [41.8, 96717.0], [41.9, 97708.0], [42.0, 97708.0], [42.1, 98103.0], [42.2, 98103.0], [42.3, 98334.0], [42.4, 98334.0], [42.5, 99211.0], [42.6, 99211.0], [42.7, 99308.0], [42.8, 99308.0], [42.9, 99656.0], [43.0, 99656.0], [43.1, 100211.0], [43.2, 100211.0], [43.3, 100816.0], [43.4, 100816.0], [43.5, 101713.0], [43.6, 101713.0], [43.7, 102417.0], [43.8, 102417.0], [43.9, 103216.0], [44.0, 103216.0], [44.1, 103812.0], [44.2, 103812.0], [44.3, 104420.0], [44.4, 104420.0], [44.5, 105318.0], [44.6, 105318.0], [44.7, 106122.0], [44.8, 106122.0], [44.9, 106222.0], [45.0, 106222.0], [45.1, 106422.0], [45.2, 106422.0], [45.3, 106510.0], [45.4, 106510.0], [45.5, 106715.0], [45.6, 106715.0], [45.7, 106808.0], [45.8, 106808.0], [45.9, 106921.0], [46.0, 106921.0], [46.1, 106946.0], [46.2, 106946.0], [46.3, 107028.0], [46.4, 107028.0], [46.5, 107221.0], [46.6, 107221.0], [46.7, 107524.0], [46.8, 107524.0], [46.9, 107537.0], [47.0, 107537.0], [47.1, 107731.0], [47.2, 107731.0], [47.3, 107833.0], [47.4, 107833.0], [47.5, 107927.0], [47.6, 107927.0], [47.7, 108122.0], [47.8, 108122.0], [47.9, 108207.0], [48.0, 108207.0], [48.1, 108317.0], [48.2, 108317.0], [48.3, 108345.0], [48.4, 108345.0], [48.5, 108545.0], [48.6, 108545.0], [48.7, 108631.0], [48.8, 108631.0], [48.9, 108734.0], [49.0, 108734.0], [49.1, 108829.0], [49.2, 108829.0], [49.3, 109028.0], [49.4, 109028.0], [49.5, 109128.0], [49.6, 109128.0], [49.7, 109337.0], [49.8, 109337.0], [49.9, 109540.0], [50.0, 109540.0], [50.1, 109625.0], [50.2, 109625.0], [50.3, 109729.0], [50.4, 109729.0], [50.5, 109832.0], [50.6, 109832.0], [50.7, 109926.0], [50.8, 109926.0], [50.9, 110006.0], [51.0, 110006.0], [51.1, 110135.0], [51.2, 110135.0], [51.3, 110228.0], [51.4, 110228.0], [51.5, 110757.0], [51.6, 110757.0], [51.7, 110850.0], [51.8, 110850.0], [51.9, 111124.0], [52.0, 111124.0], [52.1, 111151.0], [52.2, 111151.0], [52.3, 111339.0], [52.4, 111339.0], [52.5, 111440.0], [52.6, 111440.0], [52.7, 111533.0], [52.8, 111533.0], [52.9, 111597.0], [53.0, 111597.0], [53.1, 111647.0], [53.2, 111647.0], [53.3, 111840.0], [53.4, 111840.0], [53.5, 111941.0], [53.6, 111941.0], [53.7, 112045.0], [53.8, 112045.0], [53.9, 112143.0], [54.0, 112143.0], [54.1, 112342.0], [54.2, 112342.0], [54.3, 112541.0], [54.4, 112541.0], [54.5, 112556.0], [54.6, 112556.0], [54.7, 112644.0], [54.8, 112644.0], [54.9, 112747.0], [55.0, 112747.0], [55.1, 112922.0], [55.2, 112922.0], [55.3, 113048.0], [55.4, 113048.0], [55.5, 113258.0], [55.6, 113258.0], [55.7, 113347.0], [55.8, 113347.0], [55.9, 113546.0], [56.0, 113546.0], [56.1, 113760.0], [56.2, 113760.0], [56.3, 113856.0], [56.4, 113856.0], [56.5, 114042.0], [56.6, 114042.0], [56.7, 114351.0], [56.8, 114351.0], [56.9, 114443.0], [57.0, 114443.0], [57.1, 114455.0], [57.2, 114455.0], [57.3, 114848.0], [57.4, 114848.0], [57.5, 114952.0], [57.6, 114952.0], [57.7, 115136.0], [57.8, 115136.0], [57.9, 115244.0], [58.0, 115244.0], [58.1, 115635.0], [58.2, 115635.0], [58.3, 115648.0], [58.4, 115648.0], [58.5, 115739.0], [58.6, 115739.0], [58.7, 115849.0], [58.8, 115849.0], [58.9, 116048.0], [59.0, 116048.0], [59.1, 116252.0], [59.2, 116252.0], [59.3, 116459.0], [59.4, 116459.0], [59.5, 116546.0], [59.6, 116546.0], [59.7, 116653.0], [59.8, 116653.0], [59.9, 116940.0], [60.0, 116940.0], [60.1, 117053.0], [60.2, 117053.0], [60.3, 117252.0], [60.4, 117252.0], [60.5, 117446.0], [60.6, 117446.0], [60.7, 117567.0], [60.8, 117567.0], [60.9, 117753.0], [61.0, 117753.0], [61.1, 117851.0], [61.2, 117851.0], [61.3, 118029.0], [61.4, 118029.0], [61.5, 118057.0], [61.6, 118057.0], [61.7, 118266.0], [61.8, 118266.0], [61.9, 118549.0], [62.0, 118549.0], [62.1, 118792.0], [62.2, 118792.0], [62.3, 118852.0], [62.4, 118852.0], [62.5, 119057.0], [62.6, 119057.0], [62.7, 119153.0], [62.8, 119153.0], [62.9, 119256.0], [63.0, 119256.0], [63.1, 119437.0], [63.2, 119437.0], [63.3, 119454.0], [63.4, 119454.0], [63.5, 119757.0], [63.6, 119757.0], [63.7, 119857.0], [63.8, 119857.0], [63.9, 119949.0], [64.0, 119949.0], [64.1, 120056.0], [64.2, 120056.0], [64.3, 120359.0], [64.4, 120359.0], [64.5, 120460.0], [64.6, 120460.0], [64.7, 120629.0], [64.8, 120629.0], [64.9, 120685.0], [65.0, 120685.0], [65.1, 120957.0], [65.2, 120957.0], [65.3, 121149.0], [65.4, 121149.0], [65.5, 121355.0], [65.6, 121355.0], [65.7, 121631.0], [65.8, 121631.0], [65.9, 121669.0], [66.0, 121669.0], [66.1, 121788.0], [66.2, 121788.0], [66.3, 121882.0], [66.4, 121882.0], [66.5, 122084.0], [66.6, 122084.0], [66.7, 122106.0], [66.8, 122106.0], [66.9, 122191.0], [67.0, 122191.0], [67.1, 122370.0], [67.2, 122370.0], [67.3, 122413.0], [67.4, 122413.0], [67.5, 122579.0], [67.6, 122579.0], [67.7, 122782.0], [67.8, 122782.0], [67.9, 122889.0], [68.0, 122889.0], [68.1, 123186.0], [68.2, 123186.0], [68.3, 123199.0], [68.4, 123199.0], [68.5, 123276.0], [68.6, 123276.0], [68.7, 123396.0], [68.8, 123396.0], [68.9, 123685.0], [69.0, 123685.0], [69.1, 123712.0], [69.2, 123712.0], [69.3, 123783.0], [69.4, 123783.0], [69.5, 123898.0], [69.6, 123898.0], [69.7, 123985.0], [69.8, 123985.0], [69.9, 124194.0], [70.0, 124194.0], [70.1, 124364.0], [70.2, 124364.0], [70.3, 124383.0], [70.4, 124383.0], [70.5, 124400.0], [70.6, 124400.0], [70.7, 124589.0], [70.8, 124589.0], [70.9, 124801.0], [71.0, 124801.0], [71.1, 124807.0], [71.2, 124807.0], [71.3, 125091.0], [71.4, 125091.0], [71.5, 125113.0], [71.6, 125113.0], [71.7, 125292.0], [71.8, 125292.0], [71.9, 125317.0], [72.0, 125317.0], [72.1, 125390.0], [72.2, 125390.0], [72.3, 125592.0], [72.4, 125592.0], [72.5, 125607.0], [72.6, 125607.0], [72.7, 125807.0], [72.8, 125807.0], [72.9, 125906.0], [73.0, 125906.0], [73.1, 125915.0], [73.2, 125915.0], [73.3, 126192.0], [73.4, 126192.0], [73.5, 126205.0], [73.6, 126205.0], [73.7, 126315.0], [73.8, 126315.0], [73.9, 126503.0], [74.0, 126503.0], [74.1, 126513.0], [74.2, 126513.0], [74.3, 126601.0], [74.4, 126601.0], [74.5, 126809.0], [74.6, 126809.0], [74.7, 126901.0], [74.8, 126901.0], [74.9, 126910.0], [75.0, 126910.0], [75.1, 126995.0], [75.2, 126995.0], [75.3, 127105.0], [75.4, 127105.0], [75.5, 127305.0], [75.6, 127305.0], [75.7, 127407.0], [75.8, 127407.0], [75.9, 127506.0], [76.0, 127506.0], [76.1, 127597.0], [76.2, 127597.0], [76.3, 127710.0], [76.4, 127710.0], [76.5, 127802.0], [76.6, 127802.0], [76.7, 127907.0], [76.8, 127907.0], [76.9, 128000.0], [77.0, 128000.0], [77.1, 128104.0], [77.2, 128104.0], [77.3, 128302.0], [77.4, 128302.0], [77.5, 128401.0], [77.6, 128401.0], [77.7, 128504.0], [77.8, 128504.0], [77.9, 128606.0], [78.0, 128606.0], [78.1, 128704.0], [78.2, 128704.0], [78.3, 128901.0], [78.4, 128901.0], [78.5, 129011.0], [78.6, 129011.0], [78.7, 129108.0], [78.8, 129108.0], [78.9, 129302.0], [79.0, 129302.0], [79.1, 129477.0], [79.2, 129477.0], [79.3, 129480.0], [79.4, 129480.0], [79.5, 129505.0], [79.6, 129505.0], [79.7, 136992.0], [79.8, 136992.0], [79.9, 138679.0], [80.0, 138679.0], [80.1, 140486.0], [80.2, 140486.0], [80.3, 141984.0], [80.4, 141984.0], [80.5, 142287.0], [80.6, 142287.0], [80.7, 142670.0], [80.8, 142670.0], [80.9, 142784.0], [81.0, 142784.0], [81.1, 142877.0], [81.2, 142877.0], [81.3, 143077.0], [81.4, 143077.0], [81.5, 143174.0], [81.6, 143174.0], [81.7, 143187.0], [81.8, 143187.0], [81.9, 143383.0], [82.0, 143383.0], [82.1, 143469.0], [82.2, 143469.0], [82.3, 143483.0], [82.4, 143483.0], [82.5, 143675.0], [82.6, 143675.0], [82.7, 143872.0], [82.8, 143872.0], [82.9, 143978.0], [83.0, 143978.0], [83.1, 144165.0], [83.2, 144165.0], [83.3, 145771.0], [83.4, 145771.0], [83.5, 146210.0], [83.6, 146210.0], [83.7, 146572.0], [83.8, 146572.0], [83.9, 147165.0], [84.0, 147165.0], [84.1, 147777.0], [84.2, 147777.0], [84.3, 148052.0], [84.4, 148052.0], [84.5, 148678.0], [84.6, 148678.0], [84.7, 148777.0], [84.8, 148777.0], [84.9, 149381.0], [85.0, 149381.0], [85.1, 149464.0], [85.2, 149464.0], [85.3, 149477.0], [85.4, 149477.0], [85.5, 149565.0], [85.6, 149565.0], [85.7, 149682.0], [85.8, 149682.0], [85.9, 149876.0], [86.0, 149876.0], [86.1, 149972.0], [86.2, 149972.0], [86.3, 149984.0], [86.4, 149984.0], [86.5, 150167.0], [86.6, 150167.0], [86.7, 150194.0], [86.8, 150194.0], [86.9, 150382.0], [87.0, 150382.0], [87.1, 150458.0], [87.2, 150458.0], [87.3, 150661.0], [87.4, 150661.0], [87.5, 150671.0], [87.6, 150671.0], [87.7, 150768.0], [87.8, 150768.0], [87.9, 150937.0], [88.0, 150937.0], [88.1, 151158.0], [88.2, 151158.0], [88.3, 151241.0], [88.4, 151241.0], [88.5, 151265.0], [88.6, 151265.0], [88.7, 151730.0], [88.8, 151730.0], [88.9, 151855.0], [89.0, 151855.0], [89.1, 151937.0], [89.2, 151937.0], [89.3, 152140.0], [89.4, 152140.0], [89.5, 152236.0], [89.6, 152236.0], [89.7, 152340.0], [89.8, 152340.0], [89.9, 152536.0], [90.0, 152536.0], [90.1, 152539.0], [90.2, 152539.0], [90.3, 152722.0], [90.4, 152722.0], [90.5, 152736.0], [90.6, 152736.0], [90.7, 152922.0], [90.8, 152922.0], [90.9, 152933.0], [91.0, 152933.0], [91.1, 153124.0], [91.2, 153124.0], [91.3, 153219.0], [91.4, 153219.0], [91.5, 153332.0], [91.6, 153332.0], [91.7, 153426.0], [91.8, 153426.0], [91.9, 153518.0], [92.0, 153518.0], [92.1, 153710.0], [92.2, 153710.0], [92.3, 153724.0], [92.4, 153724.0], [92.5, 153895.0], [92.6, 153895.0], [92.7, 153925.0], [92.8, 153925.0], [92.9, 154015.0], [93.0, 154015.0], [93.1, 154107.0], [93.2, 154107.0], [93.3, 154206.0], [93.4, 154206.0], [93.5, 154405.0], [93.6, 154405.0], [93.7, 154414.0], [93.8, 154414.0], [93.9, 154606.0], [94.0, 154606.0], [94.1, 154628.0], [94.2, 154628.0], [94.3, 154800.0], [94.4, 154800.0], [94.5, 154822.0], [94.6, 154822.0], [94.7, 154992.0], [94.8, 154992.0], [94.9, 155007.0], [95.0, 155007.0], [95.1, 155192.0], [95.2, 155192.0], [95.3, 155206.0], [95.4, 155206.0], [95.5, 155394.0], [95.6, 155394.0], [95.7, 155413.0], [95.8, 155413.0], [95.9, 155491.0], [96.0, 155491.0], [96.1, 155586.0], [96.2, 155586.0], [96.3, 155796.0], [96.4, 155796.0], [96.5, 155986.0], [96.6, 155986.0], [96.7, 155998.0], [96.8, 155998.0], [96.9, 156090.0], [97.0, 156090.0], [97.1, 156283.0], [97.2, 156283.0], [97.3, 156489.0], [97.4, 156489.0], [97.5, 156580.0], [97.6, 156580.0], [97.7, 156685.0], [97.8, 156685.0], [97.9, 156868.0], [98.0, 156868.0], [98.1, 157076.0], [98.2, 157076.0], [98.3, 157179.0], [98.4, 157179.0], [98.5, 157379.0], [98.6, 157379.0], [98.7, 157477.0], [98.8, 157477.0], [98.9, 157581.0], [99.0, 157581.0], [99.1, 157769.0], [99.2, 157769.0], [99.3, 157781.0], [99.4, 157781.0], [99.5, 157868.0], [99.6, 157868.0], [99.7, 158344.0], [99.8, 158344.0], [99.9, 158375.0], [100.0, 158375.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2700.0, "maxY": 3.0, "series": [{"data": [[148000.0, 1.0], [151200.0, 2.0], [154400.0, 2.0], [145700.0, 1.0], [152100.0, 1.0], [155300.0, 1.0], [106700.0, 1.0], [108300.0, 2.0], [109900.0, 1.0], [111500.0, 2.0], [121100.0, 1.0], [122700.0, 1.0], [124300.0, 2.0], [125900.0, 2.0], [127500.0, 2.0], [129100.0, 1.0], [143400.0, 2.0], [149800.0, 1.0], [156200.0, 1.0], [32900.0, 1.0], [36100.0, 1.0], [36900.0, 1.0], [150700.0, 1.0], [153900.0, 1.0], [157100.0, 1.0], [43300.0, 1.0], [44100.0, 1.0], [46500.0, 1.0], [45700.0, 1.0], [48900.0, 2.0], [49700.0, 2.0], [50500.0, 1.0], [51300.0, 1.0], [55300.0, 1.0], [57700.0, 1.0], [59300.0, 1.0], [60100.0, 2.0], [60900.0, 2.0], [61700.0, 1.0], [62500.0, 3.0], [64900.0, 1.0], [65800.0, 1.0], [96200.0, 1.0], [109000.0, 1.0], [113800.0, 1.0], [117000.0, 1.0], [121800.0, 1.0], [125000.0, 1.0], [126600.0, 1.0], [154800.0, 2.0], [149300.0, 1.0], [152500.0, 2.0], [155700.0, 1.0], [2700.0, 1.0], [101700.0, 1.0], [106500.0, 1.0], [108100.0, 1.0], [109700.0, 1.0], [111300.0, 1.0], [112900.0, 1.0], [7300.0, 1.0], [117700.0, 1.0], [120900.0, 1.0], [122500.0, 1.0], [124100.0, 1.0], [127300.0, 1.0], [128900.0, 1.0], [143800.0, 1.0], [153400.0, 1.0], [156600.0, 1.0], [34400.0, 1.0], [38400.0, 1.0], [151100.0, 1.0], [157500.0, 1.0], [43200.0, 1.0], [44000.0, 1.0], [44800.0, 1.0], [45600.0, 1.0], [47200.0, 1.0], [48000.0, 1.0], [50400.0, 1.0], [51200.0, 1.0], [52800.0, 2.0], [52000.0, 1.0], [53600.0, 1.0], [54400.0, 2.0], [55200.0, 1.0], [56800.0, 1.0], [57600.0, 1.0], [58400.0, 2.0], [59200.0, 1.0], [61600.0, 1.0], [64000.0, 1.0], [64800.0, 1.0], [65600.0, 1.0], [99200.0, 1.0], [100800.0, 1.0], [102400.0, 1.0], [107200.0, 1.0], [108800.0, 1.0], [112000.0, 1.0], [115200.0, 1.0], [120000.0, 1.0], [121600.0, 2.0], [123200.0, 1.0], [124800.0, 2.0], [128000.0, 1.0], [150400.0, 1.0], [156800.0, 1.0], [157700.0, 2.0], [95900.0, 1.0], [108700.0, 1.0], [111900.0, 1.0], [113500.0, 1.0], [115100.0, 1.0], [119900.0, 1.0], [123100.0, 2.0], [126300.0, 1.0], [127900.0, 1.0], [129500.0, 1.0], [142600.0, 1.0], [152200.0, 1.0], [155400.0, 2.0], [149900.0, 2.0], [153100.0, 1.0], [40300.0, 1.0], [43500.0, 1.0], [45900.0, 1.0], [46700.0, 1.0], [48300.0, 1.0], [50700.0, 1.0], [49900.0, 2.0], [57900.0, 1.0], [58700.0, 1.0], [59500.0, 1.0], [60300.0, 1.0], [61100.0, 1.0], [61900.0, 1.0], [63500.0, 2.0], [65100.0, 2.0], [66200.0, 2.0], [82200.0, 1.0], [88600.0, 1.0], [106200.0, 1.0], [107800.0, 1.0], [112600.0, 1.0], [115800.0, 1.0], [117400.0, 1.0], [119000.0, 1.0], [120600.0, 2.0], [123800.0, 1.0], [128600.0, 1.0], [154000.0, 1.0], [151700.0, 1.0], [154900.0, 1.0], [105300.0, 1.0], [106900.0, 2.0], [108500.0, 1.0], [110100.0, 1.0], [113300.0, 1.0], [114900.0, 1.0], [116500.0, 1.0], [119700.0, 1.0], [121300.0, 1.0], [124500.0, 1.0], [126100.0, 1.0], [127700.0, 1.0], [129300.0, 1.0], [143000.0, 1.0], [146200.0, 1.0], [149400.0, 2.0], [34600.0, 1.0], [143900.0, 1.0], [147100.0, 1.0], [150300.0, 1.0], [153500.0, 1.0], [45000.0, 1.0], [44200.0, 1.0], [46600.0, 1.0], [45800.0, 1.0], [47400.0, 2.0], [48200.0, 1.0], [49000.0, 1.0], [51400.0, 1.0], [53000.0, 1.0], [52200.0, 1.0], [53800.0, 1.0], [55400.0, 1.0], [56200.0, 2.0], [57000.0, 2.0], [57800.0, 2.0], [60200.0, 1.0], [61800.0, 1.0], [64200.0, 1.0], [66000.0, 2.0], [99600.0, 1.0], [104400.0, 1.0], [110800.0, 1.0], [114000.0, 1.0], [115600.0, 2.0], [117200.0, 1.0], [118800.0, 1.0], [120400.0, 1.0], [122000.0, 1.0], [123600.0, 1.0], [125200.0, 1.0], [126800.0, 1.0], [128400.0, 1.0], [149600.0, 1.0], [156000.0, 1.0], [144100.0, 1.0], [153700.0, 2.0], [107500.0, 2.0], [109100.0, 1.0], [110700.0, 1.0], [112300.0, 1.0], [118700.0, 1.0], [120300.0, 1.0], [125100.0, 1.0], [128300.0, 1.0], [138600.0, 1.0], [154600.0, 2.0], [157800.0, 1.0], [34900.0, 1.0], [142700.0, 1.0], [152300.0, 1.0], [155500.0, 1.0], [40500.0, 1.0], [45300.0, 1.0], [46100.0, 1.0], [48500.0, 2.0], [49300.0, 1.0], [50900.0, 1.0], [50100.0, 2.0], [51700.0, 1.0], [52500.0, 1.0], [54100.0, 2.0], [54900.0, 1.0], [56500.0, 1.0], [57300.0, 1.0], [58100.0, 1.0], [59700.0, 1.0], [60500.0, 1.0], [61300.0, 1.0], [62100.0, 1.0], [62900.0, 1.0], [63700.0, 2.0], [64500.0, 1.0], [65300.0, 1.0], [66600.0, 2.0], [100200.0, 1.0], [108200.0, 1.0], [109800.0, 1.0], [111400.0, 1.0], [113000.0, 1.0], [116200.0, 1.0], [117800.0, 1.0], [119400.0, 2.0], [125800.0, 1.0], [127400.0, 1.0], [129000.0, 1.0], [140400.0, 1.0], [143600.0, 1.0], [153200.0, 1.0], [156400.0, 1.0], [147700.0, 1.0], [150900.0, 1.0], [154100.0, 1.0], [157300.0, 1.0], [65700.0, 1.0], [94500.0, 1.0], [97700.0, 1.0], [99300.0, 1.0], [112100.0, 1.0], [113700.0, 1.0], [116900.0, 1.0], [118500.0, 1.0], [121700.0, 1.0], [123300.0, 1.0], [126500.0, 2.0], [128100.0, 1.0], [142200.0, 1.0], [148600.0, 1.0], [151800.0, 1.0], [155000.0, 1.0], [17400.0, 1.0], [31000.0, 1.0], [32600.0, 1.0], [143100.0, 2.0], [149500.0, 1.0], [152700.0, 2.0], [155900.0, 2.0], [41200.0, 1.0], [42000.0, 1.0], [42800.0, 1.0], [43600.0, 1.0], [44400.0, 3.0], [45200.0, 1.0], [46800.0, 2.0], [46000.0, 1.0], [51600.0, 1.0], [53200.0, 1.0], [54800.0, 1.0], [55600.0, 1.0], [57200.0, 1.0], [61200.0, 1.0], [103200.0, 1.0], [106400.0, 1.0], [109600.0, 1.0], [114400.0, 2.0], [116000.0, 1.0], [119200.0, 1.0], [122400.0, 1.0], [125600.0, 1.0], [155200.0, 1.0], [136900.0, 1.0], [143300.0, 1.0], [146500.0, 1.0], [152900.0, 2.0], [66300.0, 1.0], [96700.0, 1.0], [98300.0, 1.0], [107900.0, 1.0], [109500.0, 1.0], [111100.0, 2.0], [112700.0, 1.0], [114300.0, 1.0], [117500.0, 1.0], [119100.0, 1.0], [122300.0, 1.0], [123900.0, 1.0], [125500.0, 1.0], [127100.0, 1.0], [128700.0, 1.0], [150600.0, 2.0], [153800.0, 1.0], [157000.0, 1.0], [141900.0, 1.0], [39100.0, 1.0], [39900.0, 1.0], [43900.0, 1.0], [44700.0, 1.0], [45500.0, 1.0], [47100.0, 1.0], [46300.0, 2.0], [48700.0, 1.0], [51100.0, 2.0], [50300.0, 1.0], [51900.0, 1.0], [53500.0, 1.0], [54300.0, 1.0], [55900.0, 1.0], [58300.0, 1.0], [59100.0, 1.0], [60700.0, 1.0], [62300.0, 1.0], [63100.0, 1.0], [64700.0, 1.0], [65500.0, 1.0], [94200.0, 1.0], [103800.0, 1.0], [107000.0, 1.0], [108600.0, 1.0], [110200.0, 1.0], [111800.0, 1.0], [116600.0, 1.0], [118200.0, 1.0], [119800.0, 1.0], [126200.0, 1.0], [127800.0, 1.0], [129400.0, 2.0], [142800.0, 1.0], [150100.0, 2.0], [153300.0, 1.0], [156500.0, 1.0], [80500.0, 1.0], [94900.0, 1.0], [98100.0, 1.0], [106100.0, 1.0], [107700.0, 1.0], [109300.0, 1.0], [112500.0, 2.0], [115700.0, 1.0], [122100.0, 2.0], [123700.0, 2.0], [125300.0, 2.0], [126900.0, 3.0], [128500.0, 1.0], [154200.0, 1.0], [157400.0, 1.0], [24700.0, 1.0], [31100.0, 1.0], [31500.0, 1.0], [33400.0, 1.0], [35800.0, 1.0], [37400.0, 1.0], [148700.0, 1.0], [151900.0, 1.0], [155100.0, 1.0], [158300.0, 2.0], [43800.0, 1.0], [44600.0, 1.0], [45400.0, 1.0], [47000.0, 1.0], [49400.0, 2.0], [51000.0, 1.0], [50200.0, 1.0], [52600.0, 1.0], [51800.0, 1.0], [53400.0, 1.0], [55800.0, 2.0], [58200.0, 1.0], [59800.0, 1.0], [60600.0, 1.0], [64600.0, 2.0], [65400.0, 1.0], [66800.0, 1.0], [70000.0, 1.0], [106800.0, 1.0], [110000.0, 1.0], [111600.0, 1.0], [113200.0, 1.0], [114800.0, 1.0], [116400.0, 1.0], [118000.0, 2.0], [122800.0, 1.0], [124400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 158300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 122.0041152263375, "minX": 1.62478122E12, "maxY": 458.5, "series": [{"data": [[1.62478122E12, 458.5], [1.62478134E12, 122.0041152263375], [1.62478128E12, 330.0]], "isOverall": false, "label": "testinginstance", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478134E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2701.0, "minX": 1.0, "maxY": 158375.0, "series": [{"data": [[2.0, 158375.0], [3.0, 157868.0], [4.0, 157781.0], [5.0, 157769.0], [6.0, 157581.0], [7.0, 157477.0], [8.0, 157379.0], [9.0, 157179.0], [10.0, 157076.0], [11.0, 156868.0], [12.0, 156685.0], [13.0, 156580.0], [14.0, 156489.0], [15.0, 156283.0], [16.0, 156090.0], [17.0, 155998.0], [18.0, 155986.0], [19.0, 155796.0], [20.0, 155586.0], [21.0, 155491.0], [22.0, 155413.0], [23.0, 155394.0], [24.0, 155206.0], [25.0, 155192.0], [26.0, 155007.0], [27.0, 154992.0], [28.0, 154822.0], [29.0, 154800.0], [30.0, 154628.0], [31.0, 154606.0], [33.0, 154405.0], [32.0, 154414.0], [35.0, 154107.0], [34.0, 154206.0], [37.0, 153925.0], [36.0, 154015.0], [39.0, 153724.0], [38.0, 153895.0], [41.0, 153518.0], [40.0, 153710.0], [43.0, 153332.0], [42.0, 153426.0], [45.0, 153124.0], [44.0, 153219.0], [47.0, 152922.0], [46.0, 152933.0], [49.0, 152722.0], [48.0, 152736.0], [51.0, 152536.0], [50.0, 152539.0], [53.0, 152236.0], [52.0, 152340.0], [55.0, 151937.0], [54.0, 152140.0], [57.0, 151730.0], [56.0, 151855.0], [59.0, 151241.0], [58.0, 151265.0], [61.0, 150937.0], [60.0, 151158.0], [63.0, 150671.0], [62.0, 150768.0], [67.0, 150194.0], [66.0, 150382.0], [65.0, 150458.0], [64.0, 150661.0], [71.0, 149876.0], [70.0, 149972.0], [69.0, 149984.0], [68.0, 150167.0], [75.0, 149464.0], [74.0, 149477.0], [73.0, 149565.0], [72.0, 149682.0], [79.0, 148052.0], [78.0, 148678.0], [77.0, 148777.0], [76.0, 149381.0], [83.0, 146210.0], [82.0, 146572.0], [81.0, 147165.0], [80.0, 147777.0], [87.0, 143872.0], [86.0, 143978.0], [85.0, 144165.0], [84.0, 145771.0], [91.0, 143383.0], [90.0, 143469.0], [89.0, 143483.0], [88.0, 143675.0], [95.0, 142877.0], [94.0, 143077.0], [93.0, 143174.0], [92.0, 143187.0], [99.0, 141984.0], [98.0, 142287.0], [97.0, 142670.0], [96.0, 142784.0], [103.0, 129480.0], [102.0, 136992.0], [101.0, 138679.0], [100.0, 140486.0], [107.0, 129108.0], [106.0, 129302.0], [105.0, 129505.0], [104.0, 129477.0], [111.0, 128606.0], [110.0, 128704.0], [109.0, 128901.0], [108.0, 129011.0], [115.0, 128104.0], [114.0, 128302.0], [113.0, 128401.0], [112.0, 128504.0], [119.0, 127710.0], [118.0, 127802.0], [117.0, 127907.0], [116.0, 128000.0], [123.0, 127305.0], [122.0, 127407.0], [121.0, 127506.0], [120.0, 127597.0], [127.0, 126901.0], [126.0, 126910.0], [125.0, 126995.0], [124.0, 127105.0], [135.0, 125915.0], [134.0, 126192.0], [133.0, 126205.0], [132.0, 126315.0], [131.0, 126503.0], [130.0, 126513.0], [129.0, 126601.0], [128.0, 126809.0], [143.0, 125113.0], [142.0, 125292.0], [141.0, 125317.0], [140.0, 125390.0], [139.0, 125592.0], [138.0, 125607.0], [137.0, 125807.0], [136.0, 125906.0], [151.0, 124194.0], [150.0, 124364.0], [149.0, 124383.0], [148.0, 124400.0], [147.0, 124589.0], [146.0, 124801.0], [145.0, 124807.0], [144.0, 125091.0], [159.0, 123199.0], [158.0, 123276.0], [157.0, 123685.0], [156.0, 123396.0], [155.0, 123712.0], [154.0, 123783.0], [153.0, 123898.0], [152.0, 123985.0], [167.0, 122106.0], [166.0, 122191.0], [165.0, 122370.0], [164.0, 122413.0], [163.0, 122579.0], [162.0, 122782.0], [161.0, 122889.0], [160.0, 123186.0], [175.0, 120957.0], [174.0, 121149.0], [173.0, 121355.0], [172.0, 121631.0], [171.0, 121669.0], [170.0, 121788.0], [169.0, 121882.0], [168.0, 122084.0], [183.0, 119757.0], [182.0, 119857.0], [181.0, 119949.0], [180.0, 120056.0], [179.0, 120359.0], [178.0, 120460.0], [177.0, 120629.0], [176.0, 120685.0], [191.0, 118549.0], [190.0, 118792.0], [189.0, 118852.0], [188.0, 119057.0], [187.0, 119153.0], [186.0, 119256.0], [185.0, 119437.0], [184.0, 119454.0], [199.0, 117252.0], [198.0, 117446.0], [197.0, 117567.0], [196.0, 117753.0], [195.0, 117851.0], [194.0, 118057.0], [193.0, 118147.5], [207.0, 115635.0], [206.0, 116048.0], [205.0, 116252.0], [204.0, 116459.0], [203.0, 116546.0], [202.0, 116653.0], [201.0, 116940.0], [200.0, 117053.0], [215.0, 114455.0], [214.0, 114848.0], [213.0, 114952.0], [212.0, 115136.0], [211.0, 115244.0], [210.0, 115648.0], [209.0, 115739.0], [208.0, 115849.0], [223.0, 113258.0], [222.0, 113347.0], [221.0, 113546.0], [220.0, 113760.0], [219.0, 113856.0], [218.0, 114042.0], [217.0, 114351.0], [216.0, 114443.0], [231.0, 112143.0], [230.0, 112342.0], [229.0, 112541.0], [228.0, 112556.0], [227.0, 112644.0], [226.0, 112747.0], [225.0, 112922.0], [224.0, 113048.0], [239.0, 111339.0], [238.0, 111440.0], [237.0, 111533.0], [236.0, 111647.0], [235.0, 111597.0], [234.0, 111840.0], [233.0, 111941.0], [232.0, 112045.0], [247.0, 109926.0], [246.0, 110006.0], [245.0, 110135.0], [244.0, 110228.0], [243.0, 110757.0], [242.0, 110850.0], [241.0, 111124.0], [240.0, 111151.0], [255.0, 108829.0], [254.0, 109028.0], [253.0, 109128.0], [252.0, 109337.0], [251.0, 109540.0], [250.0, 109625.0], [249.0, 109729.0], [248.0, 109832.0], [270.0, 106946.0], [271.0, 106921.0], [269.0, 107028.0], [268.0, 107221.0], [267.0, 107524.0], [266.0, 107537.0], [265.0, 107731.0], [264.0, 107833.0], [263.0, 107927.0], [257.0, 108631.0], [256.0, 108734.0], [259.0, 108345.0], [258.0, 108545.0], [262.0, 108122.0], [261.0, 108207.0], [260.0, 108317.0], [286.0, 99656.0], [287.0, 99308.0], [285.0, 100211.0], [284.0, 100816.0], [283.0, 101713.0], [282.0, 102417.0], [281.0, 103216.0], [280.0, 103812.0], [279.0, 104420.0], [273.0, 106715.0], [272.0, 106808.0], [275.0, 106422.0], [274.0, 106510.0], [278.0, 105318.0], [277.0, 106122.0], [276.0, 106222.0], [302.0, 66812.0], [303.0, 66621.0], [301.0, 70026.0], [300.0, 80515.0], [299.0, 82224.0], [298.0, 88685.0], [297.0, 94206.0], [296.0, 94504.0], [295.0, 94924.0], [289.0, 98334.0], [288.0, 99211.0], [291.0, 97708.0], [290.0, 98103.0], [294.0, 95903.0], [293.0, 96218.0], [292.0, 96717.0], [318.0, 64902.0], [319.0, 64810.0], [317.0, 65109.0], [316.0, 65124.0], [315.0, 65313.0], [314.0, 65407.0], [313.0, 65506.0], [312.0, 65608.0], [311.0, 65723.0], [305.0, 66313.0], [304.0, 66611.0], [307.0, 66213.0], [306.0, 66229.0], [310.0, 65827.0], [309.0, 66002.0], [308.0, 66016.0], [334.0, 62504.0], [335.0, 62305.0], [333.0, 62517.0], [332.0, 62531.0], [331.0, 62911.0], [330.0, 63103.0], [329.0, 63504.0], [328.0, 63518.0], [327.0, 63702.0], [321.0, 64626.0], [320.0, 64710.0], [323.0, 64507.0], [322.0, 64615.0], [326.0, 63784.0], [325.0, 64006.0], [324.0, 64211.0], [350.0, 60293.0], [351.0, 60123.0], [349.0, 60395.0], [348.0, 60527.0], [347.0, 60699.0], [346.0, 60714.0], [345.0, 60904.0], [344.0, 60999.0], [343.0, 61102.0], [337.0, 61911.0], [336.0, 62114.0], [339.0, 61701.0], [338.0, 61804.0], [342.0, 61280.0], [341.0, 61399.0], [340.0, 61603.0], [366.0, 57897.0], [367.0, 57809.0], [365.0, 57998.0], [364.0, 58171.0], [363.0, 58286.0], [362.0, 58388.0], [361.0, 58416.0], [360.0, 58497.0], [359.0, 58798.0], [353.0, 59802.0], [352.0, 60101.0], [355.0, 59594.0], [354.0, 59705.0], [358.0, 59192.0], [357.0, 59282.0], [356.0, 59397.0], [382.0, 55406.0], [383.0, 55382.0], [381.0, 55693.0], [380.0, 55856.0], [379.0, 55880.0], [378.0, 55974.0], [377.0, 56284.0], [376.0, 56297.0], [375.0, 56579.0], [369.0, 57603.0], [368.0, 57791.0], [371.0, 57283.0], [370.0, 57393.0], [374.0, 56897.0], [373.0, 57007.0], [372.0, 57086.0], [398.0, 52894.0], [399.0, 52869.0], [397.0, 53088.0], [396.0, 53297.0], [395.0, 53464.0], [394.0, 53588.0], [393.0, 53692.0], [392.0, 53892.0], [391.0, 54179.0], [385.0, 54981.0], [384.0, 55268.0], [387.0, 54486.0], [386.0, 54897.0], [390.0, 54184.0], [389.0, 54392.0], [388.0, 54491.0], [414.0, 50973.0], [415.0, 50705.0], [413.0, 51071.0], [412.0, 51109.0], [411.0, 51178.0], [410.0, 51290.0], [409.0, 51398.0], [408.0, 51496.0], [407.0, 51690.0], [401.0, 52581.0], [400.0, 52694.0], [403.0, 52092.0], [402.0, 52296.0], [406.0, 51785.0], [405.0, 51894.0], [404.0, 51907.0], [430.0, 48998.0], [431.0, 48909.0], [429.0, 49012.0], [428.0, 49311.0], [427.0, 49404.0], [426.0, 49496.0], [425.0, 49701.0], [424.0, 49715.0], [423.0, 49905.0], [417.0, 50407.0], [416.0, 50594.0], [419.0, 50292.0], [418.0, 50396.0], [422.0, 49918.0], [421.0, 50100.0], [420.0, 50112.0], [446.0, 46605.0], [447.0, 46516.0], [445.0, 46768.0], [444.0, 46804.0], [443.0, 46884.0], [442.0, 47003.0], [441.0, 47121.0], [440.0, 47268.0], [439.0, 47400.0], [433.0, 48519.0], [432.0, 48715.0], [435.0, 48306.0], [434.0, 48506.0], [438.0, 47414.0], [437.0, 48027.0], [436.0, 48272.0], [462.0, 44712.0], [463.0, 44615.0], [461.0, 44827.0], [460.0, 45018.0], [459.0, 45209.0], [458.0, 45318.0], [457.0, 45414.0], [456.0, 45517.0], [455.0, 45618.0], [449.0, 46319.0], [448.0, 46329.0], [451.0, 46011.0], [450.0, 46170.0], [454.0, 45722.0], [453.0, 45811.0], [452.0, 45909.0], [478.0, 41231.0], [479.0, 40563.0], [477.0, 42033.0], [476.0, 42840.0], [475.0, 43228.0], [474.0, 43349.0], [473.0, 43531.0], [472.0, 43627.0], [471.0, 43819.0], [465.0, 44422.0], [464.0, 44447.0], [467.0, 44232.0], [466.0, 44401.0], [470.0, 43939.0], [469.0, 44034.0], [468.0, 44127.0], [494.0, 31557.0], [495.0, 31143.0], [493.0, 32672.0], [492.0, 32946.0], [491.0, 33453.0], [490.0, 34455.0], [489.0, 34631.0], [488.0, 34939.0], [487.0, 35865.0], [481.0, 39931.0], [480.0, 40328.0], [483.0, 38409.0], [482.0, 39130.0], [486.0, 36168.0], [485.0, 36933.0], [484.0, 37442.0], [500.0, 2701.0], [499.0, 7352.0], [498.0, 17457.0], [497.0, 24774.0], [496.0, 31039.0], [1.0, 158344.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[250.50199999999967, 97552.39800000004]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 701.4, "minX": 1.62478122E12, "maxY": 44258.4, "series": [{"data": [[1.62478122E12, 15299.2], [1.62478134E12, 44258.4], [1.62478128E12, 31509.066666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62478122E12, 701.4], [1.62478134E12, 2029.05], [1.62478128E12, 1444.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478134E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 42636.559523809534, "minX": 1.62478122E12, "maxY": 133505.86419753084, "series": [{"data": [[1.62478122E12, 42636.559523809534], [1.62478134E12, 133505.86419753084], [1.62478128E12, 73715.62427745665]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478134E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 42634.285714285696, "minX": 1.62478122E12, "maxY": 133502.77777777775, "series": [{"data": [[1.62478122E12, 42634.285714285696], [1.62478134E12, 133502.77777777775], [1.62478128E12, 73708.78034682084]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478134E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1275.2738095238096, "minX": 1.62478122E12, "maxY": 6000.584362139916, "series": [{"data": [[1.62478122E12, 1275.2738095238096], [1.62478134E12, 6000.584362139916], [1.62478128E12, 3322.682080924856]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478134E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2701.0, "minX": 1.62478122E12, "maxY": 158375.0, "series": [{"data": [[1.62478122E12, 50407.0], [1.62478134E12, 158375.0], [1.62478128E12, 110228.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62478122E12, 49708.0], [1.62478134E12, 155200.4], [1.62478128E12, 108273.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62478122E12, 50407.0], [1.62478134E12, 158134.56], [1.62478128E12, 110159.18]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62478122E12, 50109.0], [1.62478134E12, 156664.0], [1.62478128E12, 109397.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62478122E12, 2701.0], [1.62478134E12, 110757.0], [1.62478128E12, 50594.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62478122E12, 45263.5], [1.62478134E12, 127407.0], [1.62478128E12, 63103.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478134E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 36692.0, "minX": 1.0, "maxY": 127205.0, "series": [{"data": [[1.0, 80515.0], [2.0, 98218.5], [4.0, 63303.5], [8.0, 121236.5], [9.0, 110114.0], [10.0, 127205.0], [5.0, 110781.5], [3.0, 36692.0], [6.0, 114196.5], [7.0, 60123.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 36691.0, "minX": 1.0, "maxY": 127205.0, "series": [{"data": [[1.0, 80515.0], [2.0, 98212.5], [4.0, 63303.5], [8.0, 121236.5], [9.0, 110114.0], [10.0, 127205.0], [5.0, 110781.5], [3.0, 36691.0], [6.0, 114196.0], [7.0, 60123.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.62478122E12, "maxY": 8.333333333333334, "series": [{"data": [[1.62478122E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478122E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.62478122E12, "maxY": 4.05, "series": [{"data": [[1.62478122E12, 1.4], [1.62478134E12, 4.05], [1.62478128E12, 2.8833333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62478134E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.62478122E12, "maxY": 4.05, "series": [{"data": [[1.62478122E12, 1.4], [1.62478134E12, 4.05], [1.62478128E12, 2.8833333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478134E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.62478122E12, "maxY": 4.05, "series": [{"data": [[1.62478122E12, 1.4], [1.62478134E12, 4.05], [1.62478128E12, 2.8833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62478134E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

