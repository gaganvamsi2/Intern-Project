/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8468.0, "minX": 0.0, "maxY": 22438.0, "series": [{"data": [[0.0, 8468.0], [0.1, 8468.0], [0.2, 8470.0], [0.3, 8470.0], [0.4, 8517.0], [0.5, 8517.0], [0.6, 8517.0], [0.7, 8545.0], [0.8, 8645.0], [0.9, 8645.0], [1.0, 8673.0], [1.1, 8673.0], [1.2, 8709.0], [1.3, 8709.0], [1.4, 8724.0], [1.5, 8724.0], [1.6, 8728.0], [1.7, 8728.0], [1.8, 8739.0], [1.9, 8739.0], [2.0, 8772.0], [2.1, 8772.0], [2.2, 8795.0], [2.3, 8795.0], [2.4, 8812.0], [2.5, 8812.0], [2.6, 8845.0], [2.7, 8845.0], [2.8, 8845.0], [2.9, 8849.0], [3.0, 8849.0], [3.1, 8851.0], [3.2, 8851.0], [3.3, 8856.0], [3.4, 8856.0], [3.5, 8860.0], [3.6, 8860.0], [3.7, 8877.0], [3.8, 8877.0], [3.9, 8881.0], [4.0, 8881.0], [4.1, 8887.0], [4.2, 8887.0], [4.3, 8888.0], [4.4, 8888.0], [4.5, 8891.0], [4.6, 8891.0], [4.7, 8895.0], [4.8, 8895.0], [4.9, 8918.0], [5.0, 8918.0], [5.1, 8929.0], [5.2, 8929.0], [5.3, 8946.0], [5.4, 8946.0], [5.5, 8955.0], [5.6, 8955.0], [5.7, 8982.0], [5.8, 8982.0], [5.9, 9005.0], [6.0, 9005.0], [6.1, 9006.0], [6.2, 9006.0], [6.3, 9023.0], [6.4, 9023.0], [6.5, 9024.0], [6.6, 9024.0], [6.7, 9053.0], [6.8, 9053.0], [6.9, 9057.0], [7.0, 9057.0], [7.1, 9093.0], [7.2, 9093.0], [7.3, 9102.0], [7.4, 9102.0], [7.5, 9132.0], [7.6, 9132.0], [7.7, 9137.0], [7.8, 9137.0], [7.9, 9142.0], [8.0, 9142.0], [8.1, 9168.0], [8.2, 9168.0], [8.3, 9175.0], [8.4, 9175.0], [8.5, 9176.0], [8.6, 9176.0], [8.7, 9192.0], [8.8, 9195.0], [8.9, 9195.0], [9.0, 9199.0], [9.1, 9199.0], [9.2, 9202.0], [9.3, 9202.0], [9.4, 9208.0], [9.5, 9208.0], [9.6, 9212.0], [9.7, 9212.0], [9.8, 9226.0], [9.9, 9226.0], [10.0, 9227.0], [10.1, 9227.0], [10.2, 9228.0], [10.3, 9228.0], [10.4, 9237.0], [10.5, 9237.0], [10.6, 9244.0], [10.7, 9244.0], [10.8, 9281.0], [10.9, 9281.0], [11.0, 9282.0], [11.1, 9282.0], [11.2, 9311.0], [11.3, 9311.0], [11.4, 9313.0], [11.5, 9313.0], [11.6, 9346.0], [11.7, 9346.0], [11.8, 9370.0], [11.9, 9370.0], [12.0, 9373.0], [12.1, 9373.0], [12.2, 9374.0], [12.3, 9374.0], [12.4, 9384.0], [12.5, 9384.0], [12.6, 9386.0], [12.7, 9386.0], [12.8, 9391.0], [12.9, 9391.0], [13.0, 9392.0], [13.1, 9392.0], [13.2, 9397.0], [13.3, 9397.0], [13.4, 9425.0], [13.5, 9425.0], [13.6, 9429.0], [13.7, 9429.0], [13.8, 9431.0], [13.9, 9431.0], [14.0, 9446.0], [14.1, 9446.0], [14.2, 9464.0], [14.3, 9464.0], [14.4, 9472.0], [14.5, 9472.0], [14.6, 9493.0], [14.7, 9493.0], [14.8, 9501.0], [14.9, 9501.0], [15.0, 9508.0], [15.1, 9508.0], [15.2, 9512.0], [15.3, 9512.0], [15.4, 9519.0], [15.5, 9519.0], [15.6, 9525.0], [15.7, 9525.0], [15.8, 9571.0], [15.9, 9571.0], [16.0, 9606.0], [16.1, 9606.0], [16.2, 9617.0], [16.3, 9617.0], [16.4, 9641.0], [16.5, 9641.0], [16.6, 9643.0], [16.7, 9643.0], [16.8, 9648.0], [16.9, 9648.0], [17.0, 9648.0], [17.1, 9648.0], [17.2, 9658.0], [17.3, 9658.0], [17.4, 9718.0], [17.5, 9718.0], [17.6, 9722.0], [17.7, 9722.0], [17.8, 9723.0], [17.9, 9723.0], [18.0, 9730.0], [18.1, 9730.0], [18.2, 9732.0], [18.3, 9732.0], [18.4, 9737.0], [18.5, 9737.0], [18.6, 9755.0], [18.7, 9755.0], [18.8, 9764.0], [18.9, 9764.0], [19.0, 9764.0], [19.1, 9764.0], [19.2, 9765.0], [19.3, 9765.0], [19.4, 9775.0], [19.5, 9775.0], [19.6, 9788.0], [19.7, 9788.0], [19.8, 9793.0], [19.9, 9793.0], [20.0, 9799.0], [20.1, 9799.0], [20.2, 9813.0], [20.3, 9813.0], [20.4, 9828.0], [20.5, 9828.0], [20.6, 9836.0], [20.7, 9836.0], [20.8, 9845.0], [20.9, 9845.0], [21.0, 9852.0], [21.1, 9852.0], [21.2, 9855.0], [21.3, 9855.0], [21.4, 9860.0], [21.5, 9860.0], [21.6, 9875.0], [21.7, 9875.0], [21.8, 9879.0], [21.9, 9879.0], [22.0, 9957.0], [22.1, 9957.0], [22.2, 9977.0], [22.3, 9977.0], [22.4, 9995.0], [22.5, 9995.0], [22.6, 10013.0], [22.7, 10013.0], [22.8, 10015.0], [22.9, 10015.0], [23.0, 10038.0], [23.1, 10038.0], [23.2, 10050.0], [23.3, 10050.0], [23.4, 10062.0], [23.5, 10062.0], [23.6, 10070.0], [23.7, 10070.0], [23.8, 10070.0], [23.9, 10070.0], [24.0, 10094.0], [24.1, 10094.0], [24.2, 10136.0], [24.3, 10136.0], [24.4, 10142.0], [24.5, 10142.0], [24.6, 10146.0], [24.7, 10146.0], [24.8, 10155.0], [24.9, 10155.0], [25.0, 10156.0], [25.1, 10156.0], [25.2, 10167.0], [25.3, 10167.0], [25.4, 10175.0], [25.5, 10175.0], [25.6, 10196.0], [25.7, 10196.0], [25.8, 10197.0], [25.9, 10197.0], [26.0, 10202.0], [26.1, 10202.0], [26.2, 10204.0], [26.3, 10204.0], [26.4, 10204.0], [26.5, 10204.0], [26.6, 10204.0], [26.7, 10204.0], [26.8, 10210.0], [26.9, 10210.0], [27.0, 10226.0], [27.1, 10226.0], [27.2, 10228.0], [27.3, 10228.0], [27.4, 10278.0], [27.5, 10278.0], [27.6, 10307.0], [27.7, 10307.0], [27.8, 10356.0], [27.9, 10356.0], [28.0, 10359.0], [28.1, 10359.0], [28.2, 10363.0], [28.3, 10363.0], [28.4, 10368.0], [28.5, 10368.0], [28.6, 10371.0], [28.7, 10371.0], [28.8, 10391.0], [28.9, 10391.0], [29.0, 10402.0], [29.1, 10402.0], [29.2, 10428.0], [29.3, 10428.0], [29.4, 10433.0], [29.5, 10433.0], [29.6, 10437.0], [29.7, 10437.0], [29.8, 10457.0], [29.9, 10457.0], [30.0, 10483.0], [30.1, 10483.0], [30.2, 10511.0], [30.3, 10511.0], [30.4, 10521.0], [30.5, 10521.0], [30.6, 10528.0], [30.7, 10528.0], [30.8, 10533.0], [30.9, 10533.0], [31.0, 10545.0], [31.1, 10545.0], [31.2, 10548.0], [31.3, 10548.0], [31.4, 10548.0], [31.5, 10548.0], [31.6, 10551.0], [31.7, 10551.0], [31.8, 10564.0], [31.9, 10564.0], [32.0, 10584.0], [32.1, 10584.0], [32.2, 10619.0], [32.3, 10619.0], [32.4, 10627.0], [32.5, 10627.0], [32.6, 10628.0], [32.7, 10628.0], [32.8, 10630.0], [32.9, 10630.0], [33.0, 10634.0], [33.1, 10634.0], [33.2, 10645.0], [33.3, 10645.0], [33.4, 10648.0], [33.5, 10648.0], [33.6, 10699.0], [33.7, 10699.0], [33.8, 10701.0], [33.9, 10701.0], [34.0, 10743.0], [34.1, 10743.0], [34.2, 10744.0], [34.3, 10744.0], [34.4, 10749.0], [34.5, 10749.0], [34.6, 10761.0], [34.7, 10761.0], [34.8, 10766.0], [34.9, 10766.0], [35.0, 10774.0], [35.1, 10774.0], [35.2, 10790.0], [35.3, 10790.0], [35.4, 10797.0], [35.5, 10797.0], [35.6, 10809.0], [35.7, 10809.0], [35.8, 10820.0], [35.9, 10820.0], [36.0, 10825.0], [36.1, 10825.0], [36.2, 10836.0], [36.3, 10836.0], [36.4, 10850.0], [36.5, 10850.0], [36.6, 10860.0], [36.7, 10860.0], [36.8, 10881.0], [36.9, 10881.0], [37.0, 10890.0], [37.1, 10890.0], [37.2, 10901.0], [37.3, 10901.0], [37.4, 10921.0], [37.5, 10921.0], [37.6, 10933.0], [37.7, 10933.0], [37.8, 10933.0], [37.9, 10941.0], [38.0, 10941.0], [38.1, 10957.0], [38.2, 10957.0], [38.3, 10961.0], [38.4, 10961.0], [38.5, 10968.0], [38.6, 10968.0], [38.7, 10990.0], [38.8, 10990.0], [38.9, 11002.0], [39.0, 11002.0], [39.1, 11007.0], [39.2, 11007.0], [39.3, 11021.0], [39.4, 11021.0], [39.5, 11045.0], [39.6, 11045.0], [39.7, 11072.0], [39.8, 11072.0], [39.9, 11113.0], [40.0, 11113.0], [40.1, 11120.0], [40.2, 11120.0], [40.3, 11409.0], [40.4, 11409.0], [40.5, 11751.0], [40.6, 11751.0], [40.7, 12107.0], [40.8, 12107.0], [40.9, 12111.0], [41.0, 12111.0], [41.1, 12156.0], [41.2, 12156.0], [41.3, 12514.0], [41.4, 12514.0], [41.5, 12908.0], [41.6, 12908.0], [41.7, 13135.0], [41.8, 13135.0], [41.9, 13476.0], [42.0, 13476.0], [42.1, 13798.0], [42.2, 13798.0], [42.3, 13863.0], [42.4, 13863.0], [42.5, 13983.0], [42.6, 13983.0], [42.7, 14307.0], [42.8, 14307.0], [42.9, 14758.0], [43.0, 14758.0], [43.1, 14809.0], [43.2, 14809.0], [43.3, 14830.0], [43.4, 14830.0], [43.5, 14889.0], [43.6, 14889.0], [43.7, 14891.0], [43.8, 14891.0], [43.9, 15107.0], [44.0, 15107.0], [44.1, 15118.0], [44.2, 15118.0], [44.3, 15157.0], [44.4, 15157.0], [44.5, 15235.0], [44.6, 15235.0], [44.7, 15237.0], [44.8, 15237.0], [44.9, 15240.0], [45.0, 15240.0], [45.1, 15324.0], [45.2, 15324.0], [45.3, 15534.0], [45.4, 15534.0], [45.5, 15607.0], [45.6, 15607.0], [45.7, 15615.0], [45.8, 15615.0], [45.9, 15623.0], [46.0, 15623.0], [46.1, 15722.0], [46.2, 15722.0], [46.3, 15739.0], [46.4, 15739.0], [46.5, 15845.0], [46.6, 15845.0], [46.7, 15954.0], [46.8, 15954.0], [46.9, 16066.0], [47.0, 16066.0], [47.1, 16133.0], [47.2, 16133.0], [47.3, 16145.0], [47.4, 16145.0], [47.5, 16440.0], [47.6, 16440.0], [47.7, 16468.0], [47.8, 16468.0], [47.9, 16471.0], [48.0, 16471.0], [48.1, 16567.0], [48.2, 16567.0], [48.3, 16590.0], [48.4, 16590.0], [48.5, 16632.0], [48.6, 16632.0], [48.7, 16718.0], [48.8, 16718.0], [48.9, 16759.0], [49.0, 16759.0], [49.1, 16763.0], [49.2, 16763.0], [49.3, 16798.0], [49.4, 16798.0], [49.5, 16812.0], [49.6, 16812.0], [49.7, 16827.0], [49.8, 16827.0], [49.9, 16879.0], [50.0, 16879.0], [50.1, 16911.0], [50.2, 16911.0], [50.3, 16918.0], [50.4, 16918.0], [50.5, 16918.0], [50.6, 16918.0], [50.7, 16977.0], [50.8, 16977.0], [50.9, 17049.0], [51.0, 17049.0], [51.1, 17080.0], [51.2, 17080.0], [51.3, 17165.0], [51.4, 17165.0], [51.5, 17173.0], [51.6, 17173.0], [51.7, 17174.0], [51.8, 17174.0], [51.9, 17178.0], [52.0, 17178.0], [52.1, 17249.0], [52.2, 17249.0], [52.3, 17313.0], [52.4, 17313.0], [52.5, 17383.0], [52.6, 17383.0], [52.7, 17395.0], [52.8, 17395.0], [52.9, 17407.0], [53.0, 17407.0], [53.1, 17460.0], [53.2, 17460.0], [53.3, 17508.0], [53.4, 17508.0], [53.5, 17673.0], [53.6, 17673.0], [53.7, 17679.0], [53.8, 17679.0], [53.9, 17689.0], [54.0, 17689.0], [54.1, 17707.0], [54.2, 17707.0], [54.3, 17712.0], [54.4, 17712.0], [54.5, 17727.0], [54.6, 17727.0], [54.7, 17778.0], [54.8, 17778.0], [54.9, 17801.0], [55.0, 17801.0], [55.1, 17898.0], [55.2, 17898.0], [55.3, 17904.0], [55.4, 17904.0], [55.5, 18024.0], [55.6, 18024.0], [55.7, 18034.0], [55.8, 18034.0], [55.9, 18041.0], [56.0, 18041.0], [56.1, 18064.0], [56.2, 18064.0], [56.3, 18124.0], [56.4, 18124.0], [56.5, 18127.0], [56.6, 18127.0], [56.7, 18143.0], [56.8, 18143.0], [56.9, 18178.0], [57.0, 18178.0], [57.1, 18236.0], [57.2, 18236.0], [57.3, 18241.0], [57.4, 18241.0], [57.5, 18254.0], [57.6, 18254.0], [57.7, 18336.0], [57.8, 18336.0], [57.9, 18338.0], [58.0, 18338.0], [58.1, 18359.0], [58.2, 18359.0], [58.3, 18410.0], [58.4, 18410.0], [58.5, 18471.0], [58.6, 18471.0], [58.7, 18500.0], [58.8, 18500.0], [58.9, 18550.0], [59.0, 18550.0], [59.1, 18551.0], [59.2, 18551.0], [59.3, 18559.0], [59.4, 18559.0], [59.5, 18570.0], [59.6, 18570.0], [59.7, 18574.0], [59.8, 18574.0], [59.9, 18578.0], [60.0, 18578.0], [60.1, 18606.0], [60.2, 18606.0], [60.3, 18646.0], [60.4, 18646.0], [60.5, 18678.0], [60.6, 18678.0], [60.7, 18772.0], [60.8, 18772.0], [60.9, 18851.0], [61.0, 18851.0], [61.1, 18866.0], [61.2, 18866.0], [61.3, 18874.0], [61.4, 18874.0], [61.5, 18922.0], [61.6, 18922.0], [61.7, 18946.0], [61.8, 18946.0], [61.9, 18954.0], [62.0, 18954.0], [62.1, 18963.0], [62.2, 18963.0], [62.3, 19241.0], [62.4, 19241.0], [62.5, 19275.0], [62.6, 19275.0], [62.7, 19359.0], [62.8, 19359.0], [62.9, 19371.0], [63.0, 19371.0], [63.1, 19373.0], [63.2, 19373.0], [63.3, 19466.0], [63.4, 19466.0], [63.5, 19552.0], [63.6, 19552.0], [63.7, 19557.0], [63.8, 19557.0], [63.9, 19557.0], [64.0, 19557.0], [64.1, 19563.0], [64.2, 19563.0], [64.3, 19622.0], [64.4, 19622.0], [64.5, 19675.0], [64.6, 19675.0], [64.7, 19680.0], [64.8, 19680.0], [64.9, 19706.0], [65.0, 19706.0], [65.1, 19764.0], [65.2, 19764.0], [65.3, 19766.0], [65.4, 19766.0], [65.5, 19830.0], [65.6, 19830.0], [65.7, 19854.0], [65.8, 19854.0], [65.9, 19862.0], [66.0, 19862.0], [66.1, 19865.0], [66.2, 19865.0], [66.3, 19933.0], [66.4, 19933.0], [66.5, 19953.0], [66.6, 19953.0], [66.7, 19984.0], [66.8, 19984.0], [66.9, 19993.0], [67.0, 19993.0], [67.1, 20001.0], [67.2, 20001.0], [67.3, 20008.0], [67.4, 20008.0], [67.5, 20018.0], [67.6, 20018.0], [67.7, 20030.0], [67.8, 20030.0], [67.9, 20084.0], [68.0, 20084.0], [68.1, 20084.0], [68.2, 20084.0], [68.3, 20106.0], [68.4, 20106.0], [68.5, 20107.0], [68.6, 20107.0], [68.7, 20114.0], [68.8, 20114.0], [68.9, 20121.0], [69.0, 20121.0], [69.1, 20139.0], [69.2, 20139.0], [69.3, 20160.0], [69.4, 20160.0], [69.5, 20184.0], [69.6, 20184.0], [69.7, 20217.0], [69.8, 20217.0], [69.9, 20230.0], [70.0, 20230.0], [70.1, 20235.0], [70.2, 20235.0], [70.3, 20272.0], [70.4, 20272.0], [70.5, 20279.0], [70.6, 20279.0], [70.7, 20301.0], [70.8, 20301.0], [70.9, 20334.0], [71.0, 20334.0], [71.1, 20345.0], [71.2, 20345.0], [71.3, 20375.0], [71.4, 20375.0], [71.5, 20377.0], [71.6, 20377.0], [71.7, 20393.0], [71.8, 20393.0], [71.9, 20394.0], [72.0, 20394.0], [72.1, 20443.0], [72.2, 20443.0], [72.3, 20463.0], [72.4, 20463.0], [72.5, 20464.0], [72.6, 20464.0], [72.7, 20506.0], [72.8, 20506.0], [72.9, 20512.0], [73.0, 20512.0], [73.1, 20525.0], [73.2, 20525.0], [73.3, 20540.0], [73.4, 20540.0], [73.5, 20578.0], [73.6, 20578.0], [73.7, 20579.0], [73.8, 20579.0], [73.9, 20692.0], [74.0, 20692.0], [74.1, 20746.0], [74.2, 20746.0], [74.3, 20755.0], [74.4, 20755.0], [74.5, 20811.0], [74.6, 20811.0], [74.7, 20901.0], [74.8, 20901.0], [74.9, 20914.0], [75.0, 20914.0], [75.1, 20924.0], [75.2, 20924.0], [75.3, 20941.0], [75.4, 20941.0], [75.5, 20998.0], [75.6, 20998.0], [75.7, 21017.0], [75.8, 21017.0], [75.9, 21022.0], [76.0, 21022.0], [76.1, 21031.0], [76.2, 21031.0], [76.3, 21034.0], [76.4, 21034.0], [76.5, 21039.0], [76.6, 21039.0], [76.7, 21115.0], [76.8, 21115.0], [76.9, 21120.0], [77.0, 21120.0], [77.1, 21127.0], [77.2, 21127.0], [77.3, 21175.0], [77.4, 21175.0], [77.5, 21177.0], [77.6, 21177.0], [77.7, 21180.0], [77.8, 21180.0], [77.9, 21214.0], [78.0, 21214.0], [78.1, 21215.0], [78.2, 21215.0], [78.3, 21239.0], [78.4, 21239.0], [78.5, 21327.0], [78.6, 21327.0], [78.7, 21334.0], [78.8, 21334.0], [78.9, 21349.0], [79.0, 21349.0], [79.1, 21350.0], [79.2, 21350.0], [79.3, 21360.0], [79.4, 21360.0], [79.5, 21376.0], [79.6, 21376.0], [79.7, 21405.0], [79.8, 21405.0], [79.9, 21415.0], [80.0, 21415.0], [80.1, 21420.0], [80.2, 21420.0], [80.3, 21421.0], [80.4, 21421.0], [80.5, 21427.0], [80.6, 21427.0], [80.7, 21501.0], [80.8, 21501.0], [80.9, 21526.0], [81.0, 21526.0], [81.1, 21536.0], [81.2, 21536.0], [81.3, 21540.0], [81.4, 21540.0], [81.5, 21542.0], [81.6, 21542.0], [81.7, 21549.0], [81.8, 21549.0], [81.9, 21553.0], [82.0, 21553.0], [82.1, 21583.0], [82.2, 21583.0], [82.3, 21623.0], [82.4, 21623.0], [82.5, 21641.0], [82.6, 21641.0], [82.7, 21692.0], [82.8, 21692.0], [82.9, 21734.0], [83.0, 21734.0], [83.1, 21735.0], [83.2, 21735.0], [83.3, 21752.0], [83.4, 21752.0], [83.5, 21778.0], [83.6, 21778.0], [83.7, 21793.0], [83.8, 21793.0], [83.9, 21799.0], [84.0, 21799.0], [84.1, 21810.0], [84.2, 21810.0], [84.3, 21825.0], [84.4, 21825.0], [84.5, 21839.0], [84.6, 21839.0], [84.7, 21845.0], [84.8, 21845.0], [84.9, 21846.0], [85.0, 21846.0], [85.1, 21851.0], [85.2, 21851.0], [85.3, 21867.0], [85.4, 21867.0], [85.5, 21872.0], [85.6, 21872.0], [85.7, 21874.0], [85.8, 21874.0], [85.9, 21881.0], [86.0, 21881.0], [86.1, 21887.0], [86.2, 21887.0], [86.3, 21903.0], [86.4, 21903.0], [86.5, 21907.0], [86.6, 21907.0], [86.7, 21936.0], [86.8, 21936.0], [86.9, 21939.0], [87.0, 21939.0], [87.1, 21945.0], [87.2, 21945.0], [87.3, 21952.0], [87.4, 21952.0], [87.5, 21953.0], [87.6, 21953.0], [87.7, 21961.0], [87.8, 21961.0], [87.9, 21969.0], [88.0, 21969.0], [88.1, 21970.0], [88.2, 21970.0], [88.3, 21973.0], [88.4, 21973.0], [88.5, 21974.0], [88.6, 21974.0], [88.7, 21976.0], [88.8, 21976.0], [88.9, 21979.0], [89.0, 21979.0], [89.1, 21986.0], [89.2, 21986.0], [89.3, 21998.0], [89.4, 21998.0], [89.5, 21998.0], [89.6, 21998.0], [89.7, 22035.0], [89.8, 22035.0], [89.9, 22048.0], [90.0, 22048.0], [90.1, 22051.0], [90.2, 22051.0], [90.3, 22055.0], [90.4, 22055.0], [90.5, 22056.0], [90.6, 22056.0], [90.7, 22056.0], [90.8, 22056.0], [90.9, 22056.0], [91.0, 22056.0], [91.1, 22065.0], [91.2, 22065.0], [91.3, 22078.0], [91.4, 22078.0], [91.5, 22080.0], [91.6, 22080.0], [91.7, 22093.0], [91.8, 22093.0], [91.9, 22095.0], [92.0, 22095.0], [92.1, 22097.0], [92.2, 22097.0], [92.3, 22098.0], [92.4, 22098.0], [92.5, 22101.0], [92.6, 22101.0], [92.7, 22133.0], [92.8, 22133.0], [92.9, 22141.0], [93.0, 22141.0], [93.1, 22141.0], [93.2, 22141.0], [93.3, 22142.0], [93.4, 22142.0], [93.5, 22144.0], [93.6, 22144.0], [93.7, 22160.0], [93.8, 22160.0], [93.9, 22161.0], [94.0, 22161.0], [94.1, 22164.0], [94.2, 22164.0], [94.3, 22168.0], [94.4, 22168.0], [94.5, 22173.0], [94.6, 22173.0], [94.7, 22182.0], [94.8, 22182.0], [94.9, 22195.0], [95.0, 22195.0], [95.1, 22196.0], [95.2, 22196.0], [95.3, 22207.0], [95.4, 22207.0], [95.5, 22218.0], [95.6, 22218.0], [95.7, 22221.0], [95.8, 22221.0], [95.9, 22233.0], [96.0, 22233.0], [96.1, 22251.0], [96.2, 22251.0], [96.3, 22255.0], [96.4, 22255.0], [96.5, 22257.0], [96.6, 22257.0], [96.7, 22269.0], [96.8, 22269.0], [96.9, 22270.0], [97.0, 22270.0], [97.1, 22270.0], [97.2, 22270.0], [97.3, 22277.0], [97.4, 22277.0], [97.5, 22290.0], [97.6, 22290.0], [97.7, 22291.0], [97.8, 22291.0], [97.9, 22298.0], [98.0, 22298.0], [98.1, 22315.0], [98.2, 22315.0], [98.3, 22326.0], [98.4, 22326.0], [98.5, 22343.0], [98.6, 22343.0], [98.7, 22354.0], [98.8, 22354.0], [98.9, 22375.0], [99.0, 22375.0], [99.1, 22375.0], [99.2, 22375.0], [99.3, 22377.0], [99.4, 22377.0], [99.5, 22406.0], [99.6, 22406.0], [99.7, 22413.0], [99.8, 22413.0], [99.9, 22438.0], [100.0, 22438.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 8400.0, "maxY": 17.0, "series": [{"data": [[8500.0, 2.0], [8400.0, 2.0], [8700.0, 6.0], [8600.0, 2.0], [8800.0, 12.0], [8900.0, 5.0], [9000.0, 7.0], [9100.0, 10.0], [9200.0, 10.0], [9300.0, 11.0], [9400.0, 7.0], [9500.0, 6.0], [9600.0, 7.0], [9700.0, 14.0], [9800.0, 9.0], [9900.0, 3.0], [10000.0, 8.0], [10100.0, 9.0], [10200.0, 8.0], [10300.0, 7.0], [10400.0, 6.0], [10500.0, 10.0], [10600.0, 8.0], [10700.0, 9.0], [10800.0, 8.0], [10900.0, 8.0], [11000.0, 5.0], [11100.0, 2.0], [11400.0, 1.0], [11700.0, 1.0], [12100.0, 3.0], [12500.0, 1.0], [12900.0, 1.0], [13100.0, 1.0], [13400.0, 1.0], [13700.0, 1.0], [13800.0, 1.0], [13900.0, 1.0], [14300.0, 1.0], [14700.0, 1.0], [14800.0, 4.0], [15100.0, 3.0], [15200.0, 3.0], [15300.0, 1.0], [15600.0, 3.0], [15500.0, 1.0], [15700.0, 2.0], [15800.0, 1.0], [15900.0, 1.0], [16000.0, 1.0], [16100.0, 2.0], [17200.0, 1.0], [16500.0, 2.0], [16400.0, 3.0], [16600.0, 1.0], [16800.0, 3.0], [16700.0, 4.0], [16900.0, 4.0], [17000.0, 2.0], [17300.0, 3.0], [17400.0, 2.0], [17100.0, 4.0], [18200.0, 3.0], [17500.0, 1.0], [17700.0, 4.0], [17600.0, 3.0], [17900.0, 1.0], [17800.0, 2.0], [18100.0, 4.0], [18000.0, 4.0], [18300.0, 3.0], [18400.0, 2.0], [18500.0, 7.0], [18600.0, 3.0], [18700.0, 1.0], [18800.0, 3.0], [18900.0, 4.0], [19200.0, 2.0], [19300.0, 3.0], [19400.0, 1.0], [19700.0, 3.0], [19500.0, 4.0], [19600.0, 3.0], [19800.0, 4.0], [19900.0, 4.0], [20000.0, 6.0], [20100.0, 7.0], [20200.0, 5.0], [20300.0, 7.0], [20400.0, 3.0], [21300.0, 6.0], [20600.0, 1.0], [20500.0, 6.0], [20700.0, 2.0], [20900.0, 5.0], [20800.0, 1.0], [21000.0, 5.0], [21100.0, 6.0], [21200.0, 3.0], [21400.0, 5.0], [21500.0, 8.0], [21600.0, 3.0], [21700.0, 6.0], [21800.0, 11.0], [21900.0, 17.0], [22000.0, 14.0], [22100.0, 14.0], [22200.0, 14.0], [22300.0, 7.0], [22400.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 199.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 301.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 301.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 199.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 112.13901345291477, "minX": 1.62332694E12, "maxY": 362.10108303249126, "series": [{"data": [[1.623327E12, 112.13901345291477], [1.62332694E12, 362.10108303249126]], "isOverall": false, "label": "testingadw", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8468.0, "minX": 1.0, "maxY": 22438.0, "series": [{"data": [[2.0, 22375.0], [3.0, 22291.0], [4.0, 22377.0], [5.0, 22413.0], [6.0, 22298.0], [7.0, 22315.0], [8.0, 22438.0], [9.0, 22277.0], [10.0, 22270.0], [12.0, 22348.5], [13.0, 22290.0], [15.0, 22269.5], [16.0, 22406.0], [17.0, 22255.0], [19.0, 22229.0], [20.0, 22182.0], [22.0, 22243.0], [23.0, 22168.0], [24.0, 22164.0], [25.0, 22257.0], [26.0, 22144.0], [27.0, 22218.0], [28.0, 22078.0], [29.0, 22097.0], [30.0, 22233.0], [33.0, 22126.333333333332], [35.0, 22195.5], [39.0, 22056.0], [38.0, 22082.333333333332], [41.0, 22173.0], [40.0, 22161.0], [43.0, 22133.0], [42.0, 22098.0], [45.0, 22060.5], [47.0, 21976.0], [46.0, 22141.0], [49.0, 21969.5], [51.0, 22027.0], [53.0, 22080.0], [52.0, 22101.0], [55.0, 22004.5], [57.0, 22075.5], [59.0, 22035.0], [58.0, 21952.0], [61.0, 21946.0], [63.0, 21872.0], [62.0, 21874.0], [67.0, 21887.0], [66.0, 21851.0], [65.0, 21936.0], [64.0, 21986.0], [71.0, 21867.0], [70.0, 21998.0], [69.0, 21945.0], [68.0, 21881.0], [74.0, 21907.0], [73.0, 21839.0], [72.0, 21845.0], [79.0, 21778.0], [78.0, 21835.5], [76.0, 21973.5], [83.0, 21810.0], [82.0, 21752.0], [81.0, 21735.0], [80.0, 21903.0], [87.0, 21641.0], [86.0, 21793.0], [85.0, 21766.5], [91.0, 21536.0], [90.0, 21581.5], [88.0, 21583.0], [95.0, 21549.0], [94.0, 21692.0], [93.0, 21553.0], [92.0, 21542.0], [99.0, 21420.0], [98.0, 21421.0], [97.0, 21526.0], [96.0, 21427.0], [103.0, 21334.0], [102.0, 21360.0], [101.0, 21350.0], [100.0, 21501.0], [107.0, 21371.0], [105.0, 21349.0], [104.0, 21405.0], [111.0, 21214.0], [110.0, 21127.0], [109.0, 21215.0], [108.0, 21376.0], [115.0, 21034.0], [114.0, 21180.0], [113.0, 21115.0], [112.0, 21239.0], [118.0, 21177.0], [117.0, 21031.0], [116.0, 21120.0], [123.0, 20941.0], [122.0, 20924.0], [121.0, 21071.333333333332], [127.0, 20811.0], [126.0, 20914.0], [125.0, 20998.0], [124.0, 21039.0], [135.0, 20525.0], [134.0, 20692.0], [133.0, 20540.0], [132.0, 20579.0], [131.0, 20578.0], [130.0, 20746.0], [129.0, 20755.0], [128.0, 20901.0], [143.0, 20377.0], [142.0, 20301.0], [141.0, 20393.0], [140.0, 20463.0], [139.0, 20464.0], [138.0, 20394.0], [137.0, 20506.0], [136.0, 20512.0], [151.0, 20334.0], [150.0, 20264.5], [148.0, 20279.0], [147.0, 20217.0], [146.0, 20230.0], [145.0, 20443.0], [144.0, 20375.0], [159.0, 20160.0], [158.0, 20091.666666666668], [155.0, 20235.0], [154.0, 20121.0], [153.0, 20272.0], [152.0, 20114.0], [167.0, 19862.0], [166.0, 19933.0], [165.0, 20008.0], [164.0, 20018.0], [163.0, 20139.0], [162.0, 19984.0], [161.0, 20106.0], [160.0, 20030.0], [175.0, 19706.0], [174.0, 19766.0], [173.0, 19764.0], [172.0, 19854.0], [171.0, 19953.0], [170.0, 19933.0], [168.0, 19993.0], [183.0, 19563.0], [182.0, 19557.0], [181.0, 19557.0], [180.0, 19680.0], [179.0, 19622.0], [178.0, 19552.0], [177.0, 19675.0], [176.0, 19830.0], [191.0, 18946.0], [190.0, 18954.0], [189.0, 19241.0], [188.0, 19275.0], [187.0, 19371.0], [186.0, 19359.0], [185.0, 19373.0], [184.0, 19466.0], [199.0, 18709.0], [197.0, 18678.0], [196.0, 18866.0], [195.0, 18922.0], [194.0, 18851.0], [193.0, 18874.0], [192.0, 18963.0], [207.0, 18574.0], [206.0, 18500.0], [205.0, 18578.0], [204.0, 18559.0], [203.0, 18570.0], [202.0, 18550.0], [201.0, 18551.0], [200.0, 18606.0], [215.0, 18178.0], [214.0, 18236.0], [213.0, 18254.0], [212.0, 18338.0], [211.0, 18471.0], [210.0, 18359.0], [209.0, 18336.0], [208.0, 18410.0], [223.0, 18143.0], [222.0, 18024.0], [221.0, 18034.0], [220.0, 18041.0], [219.0, 18124.0], [218.0, 18064.0], [217.0, 18241.0], [216.0, 18127.0], [231.0, 17727.0], [230.0, 17673.0], [229.0, 17689.0], [228.0, 17707.0], [227.0, 17904.0], [226.0, 17898.0], [225.0, 17789.5], [239.0, 17313.0], [238.0, 17508.0], [237.0, 17433.5], [235.0, 17383.0], [234.0, 17395.0], [233.0, 17712.0], [232.0, 17679.0], [247.0, 16911.0], [246.0, 16977.0], [245.0, 17080.0], [244.0, 17249.0], [243.0, 17165.0], [242.0, 17173.0], [241.0, 17174.0], [240.0, 17178.0], [255.0, 16718.0], [254.0, 16798.0], [253.0, 16918.0], [252.0, 16918.0], [251.0, 16827.0], [250.0, 16763.0], [249.0, 16879.0], [248.0, 17049.0], [270.0, 15739.0], [271.0, 15623.0], [269.0, 15722.0], [268.0, 15845.0], [267.0, 15954.0], [266.0, 16066.0], [265.0, 16133.0], [264.0, 16145.0], [263.0, 16440.0], [257.0, 16812.0], [256.0, 16759.0], [259.0, 16632.0], [258.0, 16590.0], [262.0, 16468.0], [261.0, 16471.0], [260.0, 16567.0], [286.0, 14758.0], [287.0, 14307.0], [285.0, 14830.0], [284.0, 14891.0], [283.0, 14809.0], [282.0, 14889.0], [281.0, 15157.0], [280.0, 15237.5], [278.0, 15107.0], [273.0, 15534.0], [272.0, 15615.0], [275.0, 15324.0], [274.0, 15607.0], [277.0, 15118.0], [276.0, 15237.0], [302.0, 11120.0], [303.0, 11007.0], [301.0, 11021.0], [300.0, 11072.0], [299.0, 11409.0], [298.0, 11751.0], [297.0, 12107.0], [296.0, 12156.0], [295.0, 12111.0], [289.0, 13983.0], [288.0, 13863.0], [291.0, 13476.0], [290.0, 13798.0], [294.0, 12514.0], [293.0, 12908.0], [292.0, 13135.0], [318.0, 10836.0], [319.0, 10797.0], [317.0, 10850.0], [316.0, 10820.0], [315.0, 10860.0], [314.0, 10941.0], [313.0, 10933.0], [312.0, 10968.0], [311.0, 10901.0], [305.0, 10961.0], [304.0, 11113.0], [307.0, 11045.0], [306.0, 10921.0], [310.0, 10957.0], [309.0, 10990.0], [308.0, 11002.0], [334.0, 10619.0], [335.0, 10648.0], [333.0, 10744.0], [332.0, 10627.0], [331.0, 10699.0], [330.0, 10790.0], [329.0, 10749.0], [328.0, 10761.0], [327.0, 10701.0], [321.0, 10825.0], [320.0, 10766.0], [323.0, 10881.0], [322.0, 10890.0], [326.0, 10774.0], [325.0, 10809.0], [324.0, 10743.0], [350.0, 10402.0], [351.0, 10528.0], [349.0, 10564.0], [348.0, 10545.0], [347.0, 10521.0], [346.0, 10483.0], [345.0, 10551.0], [344.0, 10634.0], [343.0, 10511.0], [337.0, 10628.0], [336.0, 10584.0], [339.0, 10630.0], [338.0, 10548.0], [342.0, 10645.0], [341.0, 10533.0], [340.0, 10548.0], [366.0, 10202.0], [367.0, 10156.0], [365.0, 10307.0], [364.0, 10228.0], [363.0, 10278.0], [362.0, 10226.0], [361.0, 10371.0], [360.0, 10359.0], [359.0, 10428.0], [352.0, 10391.0], [355.0, 10410.0], [353.0, 10368.0], [358.0, 10356.0], [357.0, 10437.0], [356.0, 10433.0], [382.0, 10136.0], [383.0, 10142.0], [381.0, 10094.0], [380.0, 10015.0], [379.0, 10175.0], [378.0, 10155.0], [377.0, 10062.0], [376.0, 10210.0], [375.0, 10108.0], [369.0, 10204.0], [368.0, 10167.0], [371.0, 10197.0], [370.0, 10204.0], [373.0, 10204.0], [372.0, 10196.0], [398.0, 9730.0], [399.0, 9875.0], [397.0, 9755.0], [396.0, 9836.0], [395.0, 9788.0], [394.0, 9860.0], [393.0, 9879.0], [392.0, 9845.0], [391.0, 9852.0], [385.0, 9995.0], [384.0, 10013.0], [387.0, 10070.0], [386.0, 9977.0], [390.0, 9957.0], [389.0, 10050.0], [388.0, 10038.0], [414.0, 9737.0], [415.0, 9648.0], [413.0, 9764.0], [412.0, 9764.0], [411.0, 9775.0], [410.0, 9765.0], [409.0, 9718.0], [408.0, 9648.0], [407.0, 9793.0], [401.0, 9732.0], [400.0, 9722.0], [403.0, 9855.0], [402.0, 9813.0], [406.0, 9723.0], [405.0, 9799.0], [404.0, 9828.0], [430.0, 9384.0], [431.0, 9519.0], [429.0, 9391.0], [428.0, 9498.0], [426.0, 9429.0], [425.0, 9525.0], [424.0, 9472.0], [423.0, 9606.0], [417.0, 9658.0], [416.0, 9641.0], [419.0, 9643.0], [418.0, 9617.0], [422.0, 9501.0], [421.0, 9508.0], [420.0, 9512.0], [446.0, 9227.0], [447.0, 9282.0], [445.0, 9373.0], [444.0, 9228.0], [443.0, 9244.0], [442.0, 9397.0], [441.0, 9281.0], [440.0, 9370.0], [439.0, 9346.0], [433.0, 9493.0], [432.0, 9446.0], [435.0, 9464.0], [434.0, 9386.0], [438.0, 9431.0], [437.0, 9374.0], [436.0, 9392.0], [451.0, 9192.0], [463.0, 9189.0], [460.0, 9164.0], [450.0, 9175.0], [449.0, 9313.0], [448.0, 9237.0], [459.0, 9137.0], [457.0, 9195.0], [456.0, 9168.0], [455.0, 9199.0], [454.0, 9212.0], [453.0, 9142.0], [452.0, 9311.0], [476.0, 8888.0], [475.0, 8886.0], [473.0, 8918.0], [472.0, 8929.0], [471.0, 9093.0], [465.0, 9053.0], [464.0, 9132.5], [470.0, 9024.0], [469.0, 8955.0], [468.0, 9023.0], [467.0, 9006.0], [466.0, 9132.0], [494.0, 8739.0], [495.0, 8709.0], [493.0, 8645.0], [492.0, 8673.0], [491.0, 8772.0], [490.0, 8724.0], [489.0, 8860.0], [488.0, 8845.0], [487.0, 8851.0], [483.0, 8812.0], [482.0, 8919.166666666668], [486.0, 8895.0], [485.0, 8887.0], [484.0, 8795.0], [500.0, 8517.0], [499.0, 8468.0], [498.0, 8470.0], [497.0, 8545.0], [496.0, 8728.0], [1.0, 22375.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[250.6180000000001, 15663.860000000008]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 836.25, "minX": 1.62332694E12, "maxY": 78569.35, "series": [{"data": [[1.623327E12, 55969.28333333333], [1.62332694E12, 78569.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.623327E12, 836.25], [1.62332694E12, 1038.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 11507.631768953073, "minX": 1.62332694E12, "maxY": 20826.52914798206, "series": [{"data": [[1.623327E12, 20826.52914798206], [1.62332694E12, 11507.631768953073]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 11225.321299638994, "minX": 1.62332694E12, "maxY": 20543.286995515693, "series": [{"data": [[1.623327E12, 20543.286995515693], [1.62332694E12, 11225.321299638994]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3679.0896860986554, "minX": 1.62332694E12, "maxY": 5238.570397111911, "series": [{"data": [[1.623327E12, 3679.0896860986554], [1.62332694E12, 5238.570397111911]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9137.0, "minX": 1.62332694E12, "maxY": 22438.0, "series": [{"data": [[1.623327E12, 22438.0], [1.62332694E12, 17904.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.623327E12, 22219.8], [1.62332694E12, 17690.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.623327E12, 22411.32], [1.62332694E12, 17904.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.623327E12, 22296.6], [1.62332694E12, 17779.15]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.623327E12, 18024.0], [1.62332694E12, 9137.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.623327E12, 21180.0], [1.62332694E12, 16454.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8733.5, "minX": 4.0, "maxY": 22099.5, "series": [{"data": [[4.0, 12711.0], [17.0, 11409.0], [19.0, 16590.0], [76.0, 22099.5], [90.0, 9137.0], [47.0, 20272.0], [24.0, 19419.5], [49.0, 21415.0], [26.0, 17401.0], [27.0, 18359.0], [7.0, 14758.0], [14.0, 15282.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[17.0, 10979.0], [18.0, 8733.5], [78.0, 10430.5], [90.0, 9386.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 90.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8454.5, "minX": 4.0, "maxY": 21817.5, "series": [{"data": [[4.0, 12433.5], [17.0, 11126.0], [19.0, 16303.0], [76.0, 21817.5], [90.0, 8919.0], [47.0, 19979.0], [24.0, 19139.5], [49.0, 21138.0], [26.0, 17118.0], [27.0, 18070.0], [7.0, 14483.0], [14.0, 15003.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[17.0, 10693.0], [18.0, 8454.5], [78.0, 10146.5], [90.0, 9105.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 90.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.62332694E12, "maxY": 8.333333333333334, "series": [{"data": [[1.62332694E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62332694E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3, "minX": 1.62332694E12, "maxY": 3.716666666666667, "series": [{"data": [[1.623327E12, 3.716666666666667], [1.62332694E12, 1.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62332694E12, 3.316666666666667]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3, "minX": 1.62332694E12, "maxY": 3.716666666666667, "series": [{"data": [[1.62332694E12, 3.316666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.623327E12, 3.716666666666667], [1.62332694E12, 1.3]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3, "minX": 1.62332694E12, "maxY": 3.716666666666667, "series": [{"data": [[1.623327E12, 3.716666666666667], [1.62332694E12, 1.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62332694E12, 3.316666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

