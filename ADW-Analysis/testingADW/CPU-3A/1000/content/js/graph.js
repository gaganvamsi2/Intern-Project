/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8494.0, "minX": 0.0, "maxY": 26442.0, "series": [{"data": [[0.0, 8494.0], [0.1, 8541.0], [0.2, 8891.0], [0.3, 8891.0], [0.4, 9082.0], [0.5, 9092.0], [0.6, 9121.0], [0.7, 9152.0], [0.8, 9227.0], [0.9, 9248.0], [1.0, 9279.0], [1.1, 9297.0], [1.2, 9305.0], [1.3, 9326.0], [1.4, 9326.0], [1.5, 9331.0], [1.6, 9396.0], [1.7, 9414.0], [1.8, 9418.0], [1.9, 9446.0], [2.0, 9563.0], [2.1, 9574.0], [2.2, 9574.0], [2.3, 9579.0], [2.4, 9584.0], [2.5, 9587.0], [2.6, 9588.0], [2.7, 9598.0], [2.8, 9599.0], [2.9, 9604.0], [3.0, 9623.0], [3.1, 9632.0], [3.2, 9654.0], [3.3, 9654.0], [3.4, 9660.0], [3.5, 9671.0], [3.6, 9680.0], [3.7, 9695.0], [3.8, 9698.0], [3.9, 9708.0], [4.0, 9708.0], [4.1, 9719.0], [4.2, 9738.0], [4.3, 9778.0], [4.4, 9807.0], [4.5, 9809.0], [4.6, 9825.0], [4.7, 9850.0], [4.8, 9859.0], [4.9, 9872.0], [5.0, 9874.0], [5.1, 9877.0], [5.2, 9880.0], [5.3, 9884.0], [5.4, 9900.0], [5.5, 9962.0], [5.6, 9966.0], [5.7, 9972.0], [5.8, 9980.0], [5.9, 10004.0], [6.0, 10036.0], [6.1, 10050.0], [6.2, 10058.0], [6.3, 10097.0], [6.4, 10122.0], [6.5, 10123.0], [6.6, 10126.0], [6.7, 10189.0], [6.8, 10217.0], [6.9, 10219.0], [7.0, 10220.0], [7.1, 10220.0], [7.2, 10262.0], [7.3, 10265.0], [7.4, 10266.0], [7.5, 10288.0], [7.6, 10308.0], [7.7, 10326.0], [7.8, 10328.0], [7.9, 10346.0], [8.0, 10352.0], [8.1, 10379.0], [8.2, 10401.0], [8.3, 10402.0], [8.4, 10414.0], [8.5, 10425.0], [8.6, 10448.0], [8.7, 10455.0], [8.8, 10469.0], [8.9, 10480.0], [9.0, 10484.0], [9.1, 10485.0], [9.2, 10489.0], [9.3, 10516.0], [9.4, 10533.0], [9.5, 10554.0], [9.6, 10566.0], [9.7, 10568.0], [9.8, 10581.0], [9.9, 10581.0], [10.0, 10596.0], [10.1, 10636.0], [10.2, 10646.0], [10.3, 10648.0], [10.4, 10649.0], [10.5, 10650.0], [10.6, 10651.0], [10.7, 10652.0], [10.8, 10653.0], [10.9, 10695.0], [11.0, 10697.0], [11.1, 10716.0], [11.2, 10754.0], [11.3, 10755.0], [11.4, 10767.0], [11.5, 10770.0], [11.6, 10773.0], [11.7, 10830.0], [11.8, 10831.0], [11.9, 10841.0], [12.0, 10846.0], [12.1, 10856.0], [12.2, 10861.0], [12.3, 10861.0], [12.4, 10869.0], [12.5, 10872.0], [12.6, 10873.0], [12.7, 10883.0], [12.8, 10896.0], [12.9, 10908.0], [13.0, 10909.0], [13.1, 10928.0], [13.2, 10929.0], [13.3, 10934.0], [13.4, 10940.0], [13.5, 10958.0], [13.6, 10964.0], [13.7, 10968.0], [13.8, 10974.0], [13.9, 10987.0], [14.0, 10996.0], [14.1, 11002.0], [14.2, 11002.0], [14.3, 11016.0], [14.4, 11017.0], [14.5, 11026.0], [14.6, 11027.0], [14.7, 11031.0], [14.8, 11035.0], [14.9, 11037.0], [15.0, 11038.0], [15.1, 11045.0], [15.2, 11055.0], [15.3, 11056.0], [15.4, 11057.0], [15.5, 11061.0], [15.6, 11065.0], [15.7, 11066.0], [15.8, 11071.0], [15.9, 11074.0], [16.0, 11092.0], [16.1, 11103.0], [16.2, 11107.0], [16.3, 11117.0], [16.4, 11141.0], [16.5, 11151.0], [16.6, 11153.0], [16.7, 11164.0], [16.8, 11166.0], [16.9, 11166.0], [17.0, 11171.0], [17.1, 11173.0], [17.2, 11178.0], [17.3, 11189.0], [17.4, 11207.0], [17.5, 11214.0], [17.6, 11218.0], [17.7, 11220.0], [17.8, 11244.0], [17.9, 11258.0], [18.0, 11264.0], [18.1, 11267.0], [18.2, 11269.0], [18.3, 11273.0], [18.4, 11281.0], [18.5, 11291.0], [18.6, 11322.0], [18.7, 11334.0], [18.8, 11335.0], [18.9, 11337.0], [19.0, 11342.0], [19.1, 11356.0], [19.2, 11356.0], [19.3, 11379.0], [19.4, 11414.0], [19.5, 11427.0], [19.6, 11428.0], [19.7, 11451.0], [19.8, 11458.0], [19.9, 11466.0], [20.0, 11485.0], [20.1, 11492.0], [20.2, 11497.0], [20.3, 11514.0], [20.4, 11516.0], [20.5, 11530.0], [20.6, 11531.0], [20.7, 11569.0], [20.8, 11572.0], [20.9, 11596.0], [21.0, 11607.0], [21.1, 11608.0], [21.2, 11620.0], [21.3, 11620.0], [21.4, 11623.0], [21.5, 11627.0], [21.6, 11644.0], [21.7, 11658.0], [21.8, 11701.0], [21.9, 11702.0], [22.0, 11710.0], [22.1, 11712.0], [22.2, 11737.0], [22.3, 11743.0], [22.4, 11750.0], [22.5, 11752.0], [22.6, 11759.0], [22.7, 11773.0], [22.8, 11776.0], [22.9, 11781.0], [23.0, 11818.0], [23.1, 11818.0], [23.2, 11824.0], [23.3, 11825.0], [23.4, 11846.0], [23.5, 11860.0], [23.6, 11863.0], [23.7, 11865.0], [23.8, 11891.0], [23.9, 11919.0], [24.0, 11920.0], [24.1, 11931.0], [24.2, 11958.0], [24.3, 11968.0], [24.4, 11989.0], [24.5, 11989.0], [24.6, 12005.0], [24.7, 12008.0], [24.8, 12009.0], [24.9, 12014.0], [25.0, 12020.0], [25.1, 12040.0], [25.2, 12041.0], [25.3, 12042.0], [25.4, 12057.0], [25.5, 12058.0], [25.6, 12072.0], [25.7, 12090.0], [25.8, 12102.0], [25.9, 12106.0], [26.0, 12110.0], [26.1, 12111.0], [26.2, 12168.0], [26.3, 12171.0], [26.4, 12182.0], [26.5, 12187.0], [26.6, 12190.0], [26.7, 12199.0], [26.8, 12215.0], [26.9, 12216.0], [27.0, 12220.0], [27.1, 12234.0], [27.2, 12249.0], [27.3, 12275.0], [27.4, 12296.0], [27.5, 12307.0], [27.6, 12333.0], [27.7, 12334.0], [27.8, 12350.0], [27.9, 12351.0], [28.0, 12351.0], [28.1, 12353.0], [28.2, 12353.0], [28.3, 12366.0], [28.4, 12376.0], [28.5, 12385.0], [28.6, 12393.0], [28.7, 12394.0], [28.8, 12439.0], [28.9, 12441.0], [29.0, 12455.0], [29.1, 12458.0], [29.2, 12467.0], [29.3, 12488.0], [29.4, 12492.0], [29.5, 12494.0], [29.6, 12549.0], [29.7, 12565.0], [29.8, 12583.0], [29.9, 12585.0], [30.0, 12589.0], [30.1, 12596.0], [30.2, 12601.0], [30.3, 12620.0], [30.4, 12622.0], [30.5, 12625.0], [30.6, 12626.0], [30.7, 12634.0], [30.8, 12652.0], [30.9, 12658.0], [31.0, 12785.0], [31.1, 12786.0], [31.2, 12786.0], [31.3, 12788.0], [31.4, 12794.0], [31.5, 12802.0], [31.6, 12807.0], [31.7, 12810.0], [31.8, 12811.0], [31.9, 12815.0], [32.0, 12826.0], [32.1, 12828.0], [32.2, 12830.0], [32.3, 12830.0], [32.4, 12840.0], [32.5, 12842.0], [32.6, 12843.0], [32.7, 12845.0], [32.8, 12868.0], [32.9, 12872.0], [33.0, 12899.0], [33.1, 12910.0], [33.2, 12918.0], [33.3, 12937.0], [33.4, 13049.0], [33.5, 13051.0], [33.6, 13053.0], [33.7, 13061.0], [33.8, 13064.0], [33.9, 13069.0], [34.0, 13072.0], [34.1, 13074.0], [34.2, 13075.0], [34.3, 13082.0], [34.4, 13095.0], [34.5, 13097.0], [34.6, 13097.0], [34.7, 13100.0], [34.8, 13101.0], [34.9, 13101.0], [35.0, 13106.0], [35.1, 13110.0], [35.2, 13120.0], [35.3, 13129.0], [35.4, 13133.0], [35.5, 13158.0], [35.6, 13164.0], [35.7, 13168.0], [35.8, 13187.0], [35.9, 13251.0], [36.0, 13277.0], [36.1, 13299.0], [36.2, 13315.0], [36.3, 13316.0], [36.4, 13325.0], [36.5, 13329.0], [36.6, 13352.0], [36.7, 13355.0], [36.8, 13358.0], [36.9, 13368.0], [37.0, 13377.0], [37.1, 13384.0], [37.2, 13389.0], [37.3, 13391.0], [37.4, 13396.0], [37.5, 13402.0], [37.6, 13414.0], [37.7, 13416.0], [37.8, 13419.0], [37.9, 13429.0], [38.0, 13438.0], [38.1, 13438.0], [38.2, 13452.0], [38.3, 13453.0], [38.4, 13454.0], [38.5, 13465.0], [38.6, 13475.0], [38.7, 13496.0], [38.8, 13517.0], [38.9, 13524.0], [39.0, 13543.0], [39.1, 13547.0], [39.2, 13557.0], [39.3, 13566.0], [39.4, 13567.0], [39.5, 13617.0], [39.6, 13668.0], [39.7, 13679.0], [39.8, 13680.0], [39.9, 13699.0], [40.0, 13709.0], [40.1, 13710.0], [40.2, 13721.0], [40.3, 13736.0], [40.4, 13741.0], [40.5, 13752.0], [40.6, 13760.0], [40.7, 13787.0], [40.8, 13797.0], [40.9, 13805.0], [41.0, 13806.0], [41.1, 13815.0], [41.2, 13824.0], [41.3, 13826.0], [41.4, 13842.0], [41.5, 13843.0], [41.6, 13851.0], [41.7, 13854.0], [41.8, 13880.0], [41.9, 13886.0], [42.0, 13901.0], [42.1, 13932.0], [42.2, 13932.0], [42.3, 13938.0], [42.4, 13939.0], [42.5, 13941.0], [42.6, 13956.0], [42.7, 13959.0], [42.8, 13962.0], [42.9, 13964.0], [43.0, 13973.0], [43.1, 13989.0], [43.2, 13996.0], [43.3, 14007.0], [43.4, 14026.0], [43.5, 14033.0], [43.6, 14066.0], [43.7, 14098.0], [43.8, 14099.0], [43.9, 14130.0], [44.0, 14136.0], [44.1, 14160.0], [44.2, 14189.0], [44.3, 14213.0], [44.4, 14217.0], [44.5, 14218.0], [44.6, 14228.0], [44.7, 14237.0], [44.8, 14239.0], [44.9, 14250.0], [45.0, 14257.0], [45.1, 14271.0], [45.2, 14294.0], [45.3, 14298.0], [45.4, 14314.0], [45.5, 14325.0], [45.6, 14350.0], [45.7, 14352.0], [45.8, 14356.0], [45.9, 14358.0], [46.0, 14367.0], [46.1, 14378.0], [46.2, 14381.0], [46.3, 14392.0], [46.4, 14396.0], [46.5, 14397.0], [46.6, 14407.0], [46.7, 14423.0], [46.8, 14423.0], [46.9, 14428.0], [47.0, 14441.0], [47.1, 14450.0], [47.2, 14453.0], [47.3, 14466.0], [47.4, 14467.0], [47.5, 14467.0], [47.6, 14481.0], [47.7, 14488.0], [47.8, 14490.0], [47.9, 14507.0], [48.0, 14526.0], [48.1, 14529.0], [48.2, 14535.0], [48.3, 14545.0], [48.4, 14551.0], [48.5, 14563.0], [48.6, 14576.0], [48.7, 14584.0], [48.8, 14589.0], [48.9, 14634.0], [49.0, 14650.0], [49.1, 14653.0], [49.2, 14670.0], [49.3, 14673.0], [49.4, 14675.0], [49.5, 14679.0], [49.6, 14679.0], [49.7, 14680.0], [49.8, 14683.0], [49.9, 14698.0], [50.0, 14715.0], [50.1, 14718.0], [50.2, 14750.0], [50.3, 14768.0], [50.4, 14780.0], [50.5, 14794.0], [50.6, 14798.0], [50.7, 14799.0], [50.8, 14808.0], [50.9, 14809.0], [51.0, 14814.0], [51.1, 14854.0], [51.2, 14885.0], [51.3, 14887.0], [51.4, 14897.0], [51.5, 14899.0], [51.6, 14900.0], [51.7, 14910.0], [51.8, 14938.0], [51.9, 14953.0], [52.0, 14955.0], [52.1, 14963.0], [52.2, 15006.0], [52.3, 15006.0], [52.4, 15025.0], [52.5, 15053.0], [52.6, 15075.0], [52.7, 15107.0], [52.8, 15118.0], [52.9, 15128.0], [53.0, 15169.0], [53.1, 15181.0], [53.2, 15184.0], [53.3, 15185.0], [53.4, 15191.0], [53.5, 15204.0], [53.6, 15218.0], [53.7, 15248.0], [53.8, 15249.0], [53.9, 15250.0], [54.0, 15252.0], [54.1, 15258.0], [54.2, 15282.0], [54.3, 15286.0], [54.4, 15298.0], [54.5, 15322.0], [54.6, 15337.0], [54.7, 15352.0], [54.8, 15398.0], [54.9, 15404.0], [55.0, 15424.0], [55.1, 15438.0], [55.2, 15442.0], [55.3, 15453.0], [55.4, 15455.0], [55.5, 15456.0], [55.6, 15461.0], [55.7, 15466.0], [55.8, 15468.0], [55.9, 15469.0], [56.0, 15479.0], [56.1, 15507.0], [56.2, 15522.0], [56.3, 15523.0], [56.4, 15540.0], [56.5, 15564.0], [56.6, 15574.0], [56.7, 15587.0], [56.8, 15593.0], [56.9, 15609.0], [57.0, 15620.0], [57.1, 15628.0], [57.2, 15634.0], [57.3, 15647.0], [57.4, 15652.0], [57.5, 15674.0], [57.6, 15683.0], [57.7, 15728.0], [57.8, 15758.0], [57.9, 15762.0], [58.0, 15762.0], [58.1, 15784.0], [58.2, 15785.0], [58.3, 15832.0], [58.4, 15833.0], [58.5, 15836.0], [58.6, 15848.0], [58.7, 15863.0], [58.8, 15887.0], [58.9, 15968.0], [59.0, 15979.0], [59.1, 15980.0], [59.2, 15987.0], [59.3, 15996.0], [59.4, 16000.0], [59.5, 16011.0], [59.6, 16016.0], [59.7, 16028.0], [59.8, 16036.0], [59.9, 16053.0], [60.0, 16059.0], [60.1, 16117.0], [60.2, 16134.0], [60.3, 16147.0], [60.4, 16155.0], [60.5, 16189.0], [60.6, 16197.0], [60.7, 16201.0], [60.8, 16207.0], [60.9, 16208.0], [61.0, 16218.0], [61.1, 16237.0], [61.2, 16237.0], [61.3, 16246.0], [61.4, 16262.0], [61.5, 16288.0], [61.6, 16297.0], [61.7, 16303.0], [61.8, 16312.0], [61.9, 16321.0], [62.0, 16332.0], [62.1, 16338.0], [62.2, 16351.0], [62.3, 16360.0], [62.4, 16362.0], [62.5, 16371.0], [62.6, 16373.0], [62.7, 16385.0], [62.8, 16387.0], [62.9, 16414.0], [63.0, 16421.0], [63.1, 16422.0], [63.2, 16424.0], [63.3, 16430.0], [63.4, 16458.0], [63.5, 16466.0], [63.6, 16471.0], [63.7, 16517.0], [63.8, 16534.0], [63.9, 16550.0], [64.0, 16555.0], [64.1, 16563.0], [64.2, 16572.0], [64.3, 16585.0], [64.4, 16588.0], [64.5, 16588.0], [64.6, 16597.0], [64.7, 16598.0], [64.8, 16599.0], [64.9, 16606.0], [65.0, 16610.0], [65.1, 16613.0], [65.2, 16624.0], [65.3, 16627.0], [65.4, 16635.0], [65.5, 16641.0], [65.6, 16666.0], [65.7, 16677.0], [65.8, 16685.0], [65.9, 16695.0], [66.0, 16703.0], [66.1, 16706.0], [66.2, 16709.0], [66.3, 16712.0], [66.4, 16719.0], [66.5, 16734.0], [66.6, 16749.0], [66.7, 16755.0], [66.8, 16764.0], [66.9, 16765.0], [67.0, 16768.0], [67.1, 16772.0], [67.2, 16777.0], [67.3, 16783.0], [67.4, 16788.0], [67.5, 16789.0], [67.6, 16790.0], [67.7, 16801.0], [67.8, 16804.0], [67.9, 16810.0], [68.0, 16848.0], [68.1, 16863.0], [68.2, 16863.0], [68.3, 16865.0], [68.4, 16869.0], [68.5, 16911.0], [68.6, 16984.0], [68.7, 17007.0], [68.8, 17010.0], [68.9, 17023.0], [69.0, 17065.0], [69.1, 17079.0], [69.2, 17093.0], [69.3, 17099.0], [69.4, 17108.0], [69.5, 17150.0], [69.6, 17212.0], [69.7, 17224.0], [69.8, 17288.0], [69.9, 17305.0], [70.0, 17402.0], [70.1, 17596.0], [70.2, 17688.0], [70.3, 17764.0], [70.4, 17792.0], [70.5, 17807.0], [70.6, 17846.0], [70.7, 17927.0], [70.8, 17956.0], [70.9, 17965.0], [71.0, 18138.0], [71.1, 18152.0], [71.2, 18233.0], [71.3, 18234.0], [71.4, 18236.0], [71.5, 18317.0], [71.6, 18415.0], [71.7, 18459.0], [71.8, 18532.0], [71.9, 18540.0], [72.0, 18540.0], [72.1, 18547.0], [72.2, 18548.0], [72.3, 18574.0], [72.4, 18752.0], [72.5, 18825.0], [72.6, 18941.0], [72.7, 18961.0], [72.8, 19013.0], [72.9, 19048.0], [73.0, 19082.0], [73.1, 19142.0], [73.2, 19156.0], [73.3, 19156.0], [73.4, 19159.0], [73.5, 19205.0], [73.6, 19241.0], [73.7, 19249.0], [73.8, 19333.0], [73.9, 19365.0], [74.0, 19378.0], [74.1, 19447.0], [74.2, 19458.0], [74.3, 19460.0], [74.4, 19468.0], [74.5, 19499.0], [74.6, 19512.0], [74.7, 19532.0], [74.8, 19557.0], [74.9, 19576.0], [75.0, 19594.0], [75.1, 19684.0], [75.2, 19731.0], [75.3, 19733.0], [75.4, 19757.0], [75.5, 19764.0], [75.6, 19799.0], [75.7, 19976.0], [75.8, 19977.0], [75.9, 20002.0], [76.0, 20008.0], [76.1, 20040.0], [76.2, 20073.0], [76.3, 20099.0], [76.4, 20127.0], [76.5, 20132.0], [76.6, 20176.0], [76.7, 20191.0], [76.8, 20211.0], [76.9, 20217.0], [77.0, 20228.0], [77.1, 20239.0], [77.2, 20265.0], [77.3, 20285.0], [77.4, 20290.0], [77.5, 20388.0], [77.6, 20409.0], [77.7, 20452.0], [77.8, 20598.0], [77.9, 20643.0], [78.0, 20693.0], [78.1, 20700.0], [78.2, 20700.0], [78.3, 20730.0], [78.4, 20746.0], [78.5, 20792.0], [78.6, 20807.0], [78.7, 20808.0], [78.8, 20857.0], [78.9, 21025.0], [79.0, 21031.0], [79.1, 21048.0], [79.2, 21122.0], [79.3, 21130.0], [79.4, 21137.0], [79.5, 21144.0], [79.6, 21226.0], [79.7, 21263.0], [79.8, 21272.0], [79.9, 21324.0], [80.0, 21361.0], [80.1, 21376.0], [80.2, 21463.0], [80.3, 21469.0], [80.4, 21480.0], [80.5, 21535.0], [80.6, 21559.0], [80.7, 21624.0], [80.8, 21632.0], [80.9, 21660.0], [81.0, 21674.0], [81.1, 21676.0], [81.2, 21752.0], [81.3, 21847.0], [81.4, 21854.0], [81.5, 21866.0], [81.6, 21954.0], [81.7, 21967.0], [81.8, 21980.0], [81.9, 22069.0], [82.0, 22076.0], [82.1, 22262.0], [82.2, 22315.0], [82.3, 22352.0], [82.4, 22381.0], [82.5, 22381.0], [82.6, 22393.0], [82.7, 22394.0], [82.8, 22439.0], [82.9, 22455.0], [83.0, 22469.0], [83.1, 22485.0], [83.2, 22490.0], [83.3, 22493.0], [83.4, 22594.0], [83.5, 22601.0], [83.6, 22633.0], [83.7, 22651.0], [83.8, 22657.0], [83.9, 22664.0], [84.0, 22667.0], [84.1, 22667.0], [84.2, 22686.0], [84.3, 22689.0], [84.4, 22780.0], [84.5, 22811.0], [84.6, 22852.0], [84.7, 22855.0], [84.8, 22888.0], [84.9, 22981.0], [85.0, 23013.0], [85.1, 23015.0], [85.2, 23036.0], [85.3, 23099.0], [85.4, 23104.0], [85.5, 23106.0], [85.6, 23172.0], [85.7, 23175.0], [85.8, 23189.0], [85.9, 23191.0], [86.0, 23191.0], [86.1, 23198.0], [86.2, 23216.0], [86.3, 23221.0], [86.4, 23282.0], [86.5, 23330.0], [86.6, 23334.0], [86.7, 23385.0], [86.8, 23437.0], [86.9, 23496.0], [87.0, 23577.0], [87.1, 23685.0], [87.2, 23788.0], [87.3, 24339.0], [87.4, 24377.0], [87.5, 24401.0], [87.6, 24452.0], [87.7, 24455.0], [87.8, 24563.0], [87.9, 24568.0], [88.0, 24574.0], [88.1, 24580.0], [88.2, 24581.0], [88.3, 24585.0], [88.4, 24614.0], [88.5, 24617.0], [88.6, 24620.0], [88.7, 24620.0], [88.8, 24628.0], [88.9, 24636.0], [89.0, 24637.0], [89.1, 24640.0], [89.2, 24640.0], [89.3, 24641.0], [89.4, 24645.0], [89.5, 24645.0], [89.6, 24651.0], [89.7, 24654.0], [89.8, 24662.0], [89.9, 24669.0], [90.0, 24677.0], [90.1, 24693.0], [90.2, 24697.0], [90.3, 24701.0], [90.4, 24705.0], [90.5, 24713.0], [90.6, 24729.0], [90.7, 24775.0], [90.8, 24784.0], [90.9, 24822.0], [91.0, 24838.0], [91.1, 24865.0], [91.2, 24872.0], [91.3, 24874.0], [91.4, 24882.0], [91.5, 24897.0], [91.6, 24899.0], [91.7, 24900.0], [91.8, 24915.0], [91.9, 24920.0], [92.0, 24921.0], [92.1, 24935.0], [92.2, 24942.0], [92.3, 24950.0], [92.4, 24967.0], [92.5, 25047.0], [92.6, 25087.0], [92.7, 25098.0], [92.8, 25113.0], [92.9, 25165.0], [93.0, 25277.0], [93.1, 25286.0], [93.2, 25322.0], [93.3, 25322.0], [93.4, 25354.0], [93.5, 25382.0], [93.6, 25390.0], [93.7, 25449.0], [93.8, 25460.0], [93.9, 25639.0], [94.0, 25646.0], [94.1, 25648.0], [94.2, 25665.0], [94.3, 25692.0], [94.4, 25698.0], [94.5, 25725.0], [94.6, 25750.0], [94.7, 25757.0], [94.8, 25897.0], [94.9, 25931.0], [95.0, 25962.0], [95.1, 25965.0], [95.2, 25969.0], [95.3, 26000.0], [95.4, 26011.0], [95.5, 26025.0], [95.6, 26065.0], [95.7, 26074.0], [95.8, 26088.0], [95.9, 26096.0], [96.0, 26104.0], [96.1, 26105.0], [96.2, 26112.0], [96.3, 26120.0], [96.4, 26141.0], [96.5, 26159.0], [96.6, 26165.0], [96.7, 26184.0], [96.8, 26193.0], [96.9, 26198.0], [97.0, 26199.0], [97.1, 26212.0], [97.2, 26274.0], [97.3, 26281.0], [97.4, 26281.0], [97.5, 26297.0], [97.6, 26300.0], [97.7, 26301.0], [97.8, 26302.0], [97.9, 26303.0], [98.0, 26304.0], [98.1, 26305.0], [98.2, 26311.0], [98.3, 26314.0], [98.4, 26315.0], [98.5, 26318.0], [98.6, 26366.0], [98.7, 26389.0], [98.8, 26396.0], [98.9, 26396.0], [99.0, 26400.0], [99.1, 26404.0], [99.2, 26405.0], [99.3, 26407.0], [99.4, 26409.0], [99.5, 26415.0], [99.6, 26420.0], [99.7, 26424.0], [99.8, 26426.0], [99.9, 26442.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 8400.0, "maxY": 20.0, "series": [{"data": [[8500.0, 1.0], [8400.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [9000.0, 2.0], [9100.0, 2.0], [9200.0, 4.0], [9300.0, 4.0], [9400.0, 3.0], [9500.0, 9.0], [9600.0, 10.0], [9700.0, 5.0], [9800.0, 11.0], [9900.0, 5.0], [10000.0, 5.0], [10100.0, 4.0], [10200.0, 8.0], [10300.0, 6.0], [10400.0, 11.0], [10500.0, 8.0], [10600.0, 10.0], [10700.0, 6.0], [10800.0, 12.0], [10900.0, 12.0], [11000.0, 20.0], [11100.0, 13.0], [11200.0, 12.0], [11300.0, 7.0], [11400.0, 9.0], [11500.0, 7.0], [11700.0, 12.0], [11600.0, 8.0], [11900.0, 7.0], [11800.0, 9.0], [12200.0, 7.0], [12000.0, 12.0], [12100.0, 10.0], [12300.0, 13.0], [12500.0, 6.0], [12400.0, 8.0], [12600.0, 8.0], [12700.0, 5.0], [12800.0, 16.0], [13000.0, 13.0], [12900.0, 3.0], [13200.0, 3.0], [13300.0, 13.0], [13100.0, 12.0], [13400.0, 13.0], [13500.0, 7.0], [13800.0, 11.0], [13600.0, 5.0], [13700.0, 9.0], [13900.0, 13.0], [14000.0, 6.0], [14200.0, 11.0], [14300.0, 12.0], [14100.0, 4.0], [14400.0, 13.0], [14500.0, 10.0], [14600.0, 11.0], [14700.0, 8.0], [14800.0, 8.0], [15100.0, 8.0], [15200.0, 10.0], [14900.0, 6.0], [15000.0, 5.0], [15300.0, 4.0], [15400.0, 12.0], [15500.0, 8.0], [15600.0, 8.0], [15700.0, 6.0], [15800.0, 6.0], [16000.0, 7.0], [15900.0, 5.0], [16100.0, 6.0], [16200.0, 10.0], [16300.0, 12.0], [17200.0, 3.0], [16500.0, 12.0], [16400.0, 8.0], [16600.0, 11.0], [16700.0, 17.0], [16800.0, 8.0], [16900.0, 2.0], [17000.0, 7.0], [17100.0, 2.0], [17300.0, 1.0], [17400.0, 1.0], [17500.0, 1.0], [17600.0, 1.0], [17700.0, 2.0], [17800.0, 2.0], [17900.0, 3.0], [18100.0, 2.0], [18200.0, 3.0], [18300.0, 1.0], [18400.0, 2.0], [18500.0, 6.0], [18700.0, 1.0], [18800.0, 1.0], [19000.0, 3.0], [18900.0, 2.0], [19100.0, 4.0], [19200.0, 3.0], [19300.0, 3.0], [19400.0, 5.0], [19600.0, 1.0], [19500.0, 5.0], [19700.0, 5.0], [19900.0, 3.0], [20000.0, 5.0], [20100.0, 4.0], [20200.0, 7.0], [20300.0, 1.0], [20400.0, 2.0], [21300.0, 3.0], [20600.0, 2.0], [20500.0, 1.0], [20700.0, 5.0], [20800.0, 3.0], [21000.0, 3.0], [21100.0, 4.0], [21200.0, 3.0], [21400.0, 3.0], [21500.0, 2.0], [21600.0, 5.0], [21700.0, 1.0], [21800.0, 3.0], [21900.0, 3.0], [22000.0, 2.0], [22300.0, 6.0], [22200.0, 1.0], [22400.0, 6.0], [22500.0, 1.0], [23300.0, 3.0], [22600.0, 9.0], [22700.0, 1.0], [22800.0, 4.0], [22900.0, 1.0], [23000.0, 4.0], [23100.0, 8.0], [23200.0, 3.0], [23400.0, 2.0], [23500.0, 1.0], [23600.0, 1.0], [23700.0, 1.0], [24400.0, 3.0], [24300.0, 2.0], [24500.0, 6.0], [24700.0, 6.0], [24600.0, 19.0], [24800.0, 8.0], [24900.0, 8.0], [25000.0, 3.0], [25100.0, 2.0], [25200.0, 2.0], [25300.0, 5.0], [25400.0, 2.0], [25700.0, 3.0], [25600.0, 6.0], [25800.0, 1.0], [26000.0, 7.0], [25900.0, 4.0], [26100.0, 11.0], [26200.0, 5.0], [26300.0, 14.0], [26400.0, 10.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 427.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 573.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 427.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 573.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.61500000000024, "minX": 1.623327E12, "maxY": 500.61500000000024, "series": [{"data": [[1.623327E12, 500.61500000000024]], "isOverall": false, "label": "testingadw", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8494.0, "minX": 1.0, "maxY": 26426.0, "series": [{"data": [[2.0, 26407.0], [3.0, 26400.0], [4.0, 26396.0], [6.0, 26423.5], [7.0, 26424.0], [9.0, 26392.5], [10.0, 26415.0], [11.0, 26420.0], [12.0, 26409.0], [13.0, 26404.0], [14.0, 26366.0], [15.0, 26314.0], [16.0, 26302.0], [17.0, 26297.0], [20.0, 26308.666666666668], [21.0, 26318.0], [23.0, 26292.5], [24.0, 26301.0], [27.0, 26296.333333333332], [28.0, 26193.0], [29.0, 26274.0], [30.0, 26212.0], [31.0, 26198.0], [33.0, 26184.0], [32.0, 26199.0], [35.0, 26112.0], [34.0, 26120.0], [37.0, 26141.0], [41.0, 26025.0], [40.0, 26133.25], [43.0, 26069.5], [45.0, 26088.0], [44.0, 26096.0], [47.0, 25965.0], [46.0, 25931.0], [49.0, 26011.0], [48.0, 25969.0], [51.0, 26000.0], [50.0, 25962.0], [53.0, 25750.0], [52.0, 25897.0], [54.0, 25692.0], [57.0, 25665.0], [56.0, 25741.0], [59.0, 25648.0], [58.0, 25639.0], [61.0, 25646.0], [60.0, 25698.0], [63.0, 25382.0], [62.0, 25449.0], [67.0, 25356.0], [65.0, 25354.0], [64.0, 25460.0], [71.0, 25113.0], [70.0, 25277.0], [69.0, 25286.0], [68.0, 25322.0], [75.0, 25047.0], [74.0, 25087.0], [73.0, 25098.0], [72.0, 25165.0], [79.0, 24882.0], [78.0, 24868.5], [76.0, 24967.0], [83.0, 24921.0], [82.0, 24935.0], [81.0, 24838.0], [80.0, 24900.0], [87.0, 24920.0], [86.0, 24928.5], [84.0, 24950.0], [91.0, 24899.0], [90.0, 24897.0], [89.0, 24775.0], [88.0, 24784.0], [95.0, 24669.0], [94.0, 24713.0], [93.0, 24705.0], [92.0, 24822.0], [99.0, 24636.0], [98.0, 24641.0], [97.0, 24645.0], [96.0, 24645.0], [103.0, 24628.0], [102.0, 24614.0], [101.0, 24693.0], [100.0, 24651.0], [107.0, 24874.0], [106.0, 24563.0], [105.0, 24574.0], [104.0, 24637.0], [111.0, 24662.0], [110.0, 24729.0], [109.0, 24568.0], [108.0, 24581.0], [115.0, 24701.0], [114.0, 24620.0], [113.0, 24697.0], [112.0, 24455.0], [119.0, 24617.0], [118.0, 24640.0], [117.0, 24677.0], [116.0, 24654.0], [123.0, 24585.0], [122.0, 24620.0], [121.0, 24546.0], [127.0, 24401.0], [126.0, 24339.0], [125.0, 24377.0], [124.0, 24580.0], [135.0, 23189.0], [134.0, 23191.0], [133.0, 23437.0], [132.0, 23385.0], [131.0, 23496.0], [130.0, 23577.0], [129.0, 23685.0], [128.0, 23788.0], [143.0, 23216.0], [142.0, 23221.0], [141.0, 23282.0], [140.0, 23198.0], [139.0, 23175.0], [138.0, 23172.0], [137.0, 23334.0], [136.0, 23330.0], [151.0, 22855.0], [150.0, 23015.0], [149.0, 23013.0], [148.0, 23036.0], [147.0, 23099.0], [146.0, 23104.0], [145.0, 23106.0], [144.0, 23191.0], [159.0, 22811.0], [158.0, 22667.0], [157.0, 22660.5], [155.0, 22667.0], [154.0, 22852.0], [153.0, 22888.0], [152.0, 22981.0], [167.0, 22455.0], [166.0, 22601.0], [165.0, 22485.0], [164.0, 22686.0], [163.0, 22689.0], [162.0, 22633.0], [161.0, 22780.0], [160.0, 22651.0], [175.0, 22394.0], [174.0, 22262.0], [173.0, 22469.0], [172.0, 22493.0], [171.0, 22490.0], [170.0, 22352.0], [169.0, 22439.0], [168.0, 22594.0], [183.0, 21980.0], [182.0, 21954.0], [181.0, 22069.0], [180.0, 22076.0], [179.0, 22315.0], [178.0, 22381.0], [176.0, 22393.0], [191.0, 21674.0], [190.0, 21676.0], [189.0, 21624.0], [188.0, 21752.0], [187.0, 21847.0], [186.0, 21854.0], [185.0, 21866.0], [184.0, 21967.0], [199.0, 21376.0], [198.0, 21463.0], [197.0, 21514.0], [195.0, 21535.0], [194.0, 21480.0], [193.0, 21660.0], [192.0, 21632.0], [207.0, 21048.0], [206.0, 21137.0], [205.0, 21144.0], [204.0, 21226.0], [203.0, 21263.0], [202.0, 21272.0], [201.0, 21361.0], [200.0, 21324.0], [215.0, 20746.0], [214.0, 20807.0], [213.0, 20792.0], [212.0, 20857.0], [211.0, 21025.0], [210.0, 21031.0], [209.0, 21130.0], [208.0, 21122.0], [223.0, 20452.0], [222.0, 20645.5], [220.0, 20643.0], [219.0, 20700.0], [217.0, 20730.0], [216.0, 20808.0], [231.0, 20239.0], [230.0, 20176.0], [229.0, 20228.0], [228.0, 20265.0], [227.0, 20290.0], [226.0, 20388.0], [225.0, 20285.0], [224.0, 20409.0], [239.0, 20073.0], [238.0, 19977.0], [237.0, 20099.0], [236.0, 20191.0], [235.0, 20132.0], [234.0, 20127.0], [233.0, 20211.0], [232.0, 20217.0], [247.0, 19764.0], [246.0, 19684.0], [245.0, 19799.0], [244.0, 19975.0], [243.0, 19976.0], [242.0, 20002.0], [241.0, 20040.0], [240.0, 20008.0], [255.0, 19576.0], [254.0, 19528.0], [252.0, 19512.0], [251.0, 19594.0], [250.0, 19733.0], [249.0, 19757.0], [248.0, 19731.0], [270.0, 19082.0], [271.0, 19142.0], [269.0, 19156.0], [268.0, 19241.0], [267.0, 19157.5], [265.0, 19249.0], [264.0, 19205.0], [263.0, 19365.0], [257.0, 19458.0], [256.0, 19532.0], [259.0, 19378.0], [258.0, 19447.0], [262.0, 19333.0], [261.0, 19460.0], [260.0, 19468.0], [286.0, 18317.0], [287.0, 18233.0], [285.0, 18415.0], [284.0, 18499.5], [282.0, 18547.0], [281.0, 18540.0], [280.0, 18548.0], [279.0, 18532.0], [273.0, 18941.0], [272.0, 19048.0], [275.0, 19013.0], [274.0, 18961.0], [278.0, 18574.0], [277.0, 18752.0], [276.0, 18825.0], [302.0, 16863.0], [303.0, 16865.0], [301.0, 16869.0], [300.0, 17596.0], [299.0, 17688.0], [298.0, 17792.0], [297.0, 17764.0], [296.0, 17807.0], [295.0, 17846.0], [289.0, 18138.0], [288.0, 18234.0], [291.0, 18152.0], [290.0, 18236.0], [294.0, 17960.5], [293.0, 17927.0], [318.0, 16706.0], [319.0, 16666.0], [317.0, 16712.0], [316.0, 16719.0], [315.0, 17402.0], [314.0, 16734.0], [313.0, 16749.0], [312.0, 16755.0], [311.0, 16764.0], [305.0, 16810.0], [304.0, 16848.0], [307.0, 16790.0], [306.0, 16804.0], [310.0, 16765.0], [309.0, 16777.0], [308.0, 16788.0], [334.0, 17099.0], [335.0, 16471.0], [333.0, 16534.0], [332.0, 17108.0], [331.0, 17150.0], [330.0, 16550.0], [329.0, 16585.0], [328.0, 16588.0], [327.0, 16597.0], [321.0, 17305.0], [320.0, 16641.0], [323.0, 17288.0], [322.0, 17224.0], [326.0, 16610.0], [325.0, 16912.5], [350.0, 16911.0], [351.0, 16297.0], [349.0, 16332.0], [348.0, 16351.0], [347.0, 16362.0], [346.0, 16373.0], [345.0, 16387.0], [344.0, 17007.0], [343.0, 16421.0], [337.0, 17079.0], [336.0, 16458.0], [339.0, 16984.0], [338.0, 17093.0], [342.0, 17037.5], [340.0, 17023.0], [355.0, 16783.0], [365.0, 16768.0], [367.0, 16410.0], [364.0, 16772.0], [354.0, 16801.0], [353.0, 16237.0], [352.0, 16262.0], [363.0, 16421.5], [361.0, 16742.0], [359.0, 16189.0], [358.0, 16201.0], [357.0, 16218.0], [356.0, 16863.0], [382.0, 15968.0], [383.0, 16572.0], [381.0, 16588.0], [380.0, 16598.0], [379.0, 16555.0], [378.0, 15979.0], [377.0, 15987.0], [376.0, 16000.0], [375.0, 16599.0], [369.0, 16631.0], [374.0, 16028.0], [373.0, 16606.0], [372.0, 16662.0], [398.0, 16338.0], [399.0, 16360.0], [397.0, 16303.0], [396.0, 16321.0], [395.0, 15832.0], [394.0, 15836.0], [393.0, 15848.0], [392.0, 16371.0], [391.0, 16430.0], [385.0, 16540.0], [387.0, 16422.0], [386.0, 16466.0], [390.0, 16385.0], [389.0, 16414.0], [388.0, 16424.0], [414.0, 15587.0], [415.0, 16155.0], [413.0, 15620.0], [412.0, 15634.0], [411.0, 15647.0], [410.0, 16237.0], [409.0, 16246.0], [408.0, 16197.0], [407.0, 15674.0], [401.0, 16288.0], [400.0, 16312.0], [403.0, 15728.0], [402.0, 15762.0], [406.0, 15683.0], [405.0, 16208.0], [404.0, 16207.0], [430.0, 15466.0], [431.0, 15461.0], [429.0, 15468.0], [428.0, 15479.0], [427.0, 16019.5], [425.0, 15996.0], [424.0, 15896.25], [420.0, 15523.0], [417.0, 15564.0], [416.0, 16147.0], [419.0, 15540.0], [418.0, 16053.0], [446.0, 15785.0], [447.0, 15784.0], [445.0, 15762.0], [444.0, 15298.0], [443.0, 15322.0], [442.0, 15337.0], [441.0, 15860.0], [439.0, 15352.0], [433.0, 15456.0], [432.0, 15453.0], [435.0, 15424.0], [434.0, 15442.0], [438.0, 15863.0], [437.0, 15398.0], [436.0, 15404.0], [462.0, 15609.0], [463.0, 15128.0], [461.0, 15169.0], [460.0, 15181.0], [459.0, 15652.0], [458.0, 15184.0], [457.0, 15191.0], [456.0, 15204.0], [455.0, 15218.0], [449.0, 15282.0], [448.0, 15758.0], [451.0, 15249.0], [450.0, 15258.0], [454.0, 15248.0], [453.0, 15250.0], [452.0, 15252.0], [478.0, 14963.0], [479.0, 14955.0], [477.0, 15438.0], [476.0, 15507.0], [475.0, 15455.0], [474.0, 15469.0], [473.0, 15006.0], [471.0, 15025.0], [465.0, 15118.0], [464.0, 15574.0], [467.0, 15107.0], [466.0, 15593.0], [470.0, 15053.0], [469.0, 15075.0], [468.0, 15628.0], [483.0, 14900.0], [495.0, 14780.0], [494.0, 14900.0], [489.0, 14814.0], [488.0, 14854.0], [487.0, 14886.0], [485.0, 14898.0], [482.0, 14910.0], [481.0, 14938.0], [480.0, 14953.0], [510.0, 14670.0], [511.0, 14653.0], [509.0, 14650.0], [508.0, 14675.0], [507.0, 14673.0], [506.0, 14679.0], [505.0, 14679.0], [504.0, 14680.0], [503.0, 14683.0], [497.0, 14768.0], [496.0, 14794.0], [499.0, 15185.0], [498.0, 14750.0], [502.0, 14698.0], [501.0, 14715.0], [500.0, 14718.0], [536.0, 14379.5], [542.0, 14314.0], [543.0, 14298.0], [528.0, 14453.0], [541.0, 14325.0], [540.0, 14353.333333333334], [537.0, 14367.0], [527.0, 14466.0], [513.0, 14589.0], [512.0, 14634.0], [515.0, 14576.0], [514.0, 14584.0], [517.0, 14545.0], [516.0, 14563.0], [519.0, 14526.0], [518.0, 14551.0], [526.0, 14467.0], [525.0, 14467.0], [524.0, 14488.0], [523.0, 14490.0], [522.0, 14507.0], [521.0, 14529.0], [520.0, 14535.0], [534.0, 14395.0], [531.0, 14423.0], [530.0, 14428.0], [529.0, 14441.0], [572.0, 13941.0], [575.0, 13932.0], [561.0, 14481.0], [560.0, 14244.5], [563.0, 14033.0], [562.0, 14450.0], [565.0, 13989.0], [564.0, 14007.0], [574.0, 13932.0], [573.0, 13938.0], [571.0, 13959.0], [570.0, 13962.0], [569.0, 13964.0], [568.0, 14356.0], [558.0, 14098.0], [545.0, 14271.0], [544.0, 14294.0], [547.0, 14250.0], [546.0, 14257.0], [549.0, 14228.0], [548.0, 14239.0], [551.0, 14218.0], [550.0, 14217.0], [557.0, 14099.0], [556.0, 14130.0], [555.0, 14136.0], [554.0, 14160.0], [553.0, 14189.0], [552.0, 14213.0], [567.0, 13973.0], [566.0, 14407.0], [604.0, 13557.0], [607.0, 13524.0], [593.0, 13710.0], [592.0, 13721.0], [595.0, 13699.0], [594.0, 13709.0], [597.0, 13680.0], [596.0, 13679.0], [606.0, 13543.0], [605.0, 13547.0], [603.0, 13956.0], [602.0, 13939.0], [601.0, 13996.0], [600.0, 13617.0], [591.0, 13736.0], [577.0, 14237.0], [576.0, 13901.0], [579.0, 13880.0], [578.0, 13886.0], [581.0, 13843.0], [580.0, 13851.0], [583.0, 13815.0], [582.0, 13826.0], [590.0, 13741.0], [589.0, 13752.0], [588.0, 13760.0], [587.0, 13787.0], [586.0, 13797.0], [585.0, 13806.0], [584.0, 13805.0], [599.0, 13668.0], [598.0, 14026.0], [633.0, 13325.0], [637.0, 13567.0], [639.0, 13421.5], [624.0, 13389.0], [626.0, 13396.0], [625.0, 13402.0], [628.0, 13384.0], [627.0, 13377.0], [636.0, 13299.0], [635.0, 13316.0], [634.0, 13315.0], [632.0, 13329.0], [614.0, 13453.0], [613.0, 13842.0], [612.0, 13854.0], [611.0, 13465.0], [610.0, 13824.0], [609.0, 13475.0], [608.0, 13517.0], [623.0, 13391.0], [622.0, 13416.0], [621.0, 13414.0], [620.0, 13419.0], [619.0, 13429.0], [618.0, 13438.0], [617.0, 13438.0], [616.0, 13453.0], [631.0, 13353.5], [629.0, 13368.0], [665.0, 13358.0], [669.0, 12910.0], [670.0, 12899.0], [657.0, 13075.0], [656.0, 13074.0], [659.0, 13072.0], [658.0, 13069.0], [661.0, 13061.0], [660.0, 13064.0], [668.0, 13251.0], [667.0, 12918.0], [666.0, 12937.0], [664.0, 13051.0], [647.0, 13133.0], [646.0, 13120.0], [645.0, 13129.0], [644.0, 13158.0], [643.0, 13164.0], [642.0, 13168.0], [641.0, 13496.0], [640.0, 13187.0], [655.0, 13082.0], [654.0, 13100.0], [653.0, 13101.5], [652.0, 13101.0], [650.0, 13095.0], [649.0, 13101.0], [648.0, 13110.0], [663.0, 13053.0], [662.0, 13049.0], [696.0, 12622.0], [700.0, 12589.0], [703.0, 12565.0], [691.0, 12658.0], [690.0, 12786.666666666666], [693.0, 12634.0], [692.0, 12652.0], [702.0, 12583.0], [701.0, 12585.0], [699.0, 12596.0], [698.0, 12601.0], [697.0, 12620.0], [687.0, 12785.0], [673.0, 12845.0], [672.0, 12870.0], [675.0, 12842.0], [674.0, 12843.0], [677.0, 12840.0], [676.0, 12830.0], [679.0, 12826.0], [678.0, 13097.0], [686.0, 12794.0], [685.0, 12802.0], [684.0, 12810.0], [683.0, 12815.0], [682.0, 12811.0], [681.0, 12828.0], [680.0, 12830.0], [695.0, 12626.0], [694.0, 12625.0], [729.0, 12234.0], [733.0, 12190.0], [735.0, 12184.5], [723.0, 12333.5], [721.0, 12351.333333333334], [725.0, 12307.0], [724.0, 12549.0], [732.0, 12199.0], [731.0, 12216.0], [730.0, 12220.0], [728.0, 12249.0], [710.0, 12458.0], [709.0, 12455.0], [708.0, 12467.0], [707.0, 12488.0], [706.0, 12494.0], [705.0, 12492.0], [704.0, 12807.0], [718.0, 12351.0], [717.0, 12366.0], [716.0, 12376.0], [715.0, 12385.0], [714.0, 12394.0], [713.0, 12393.0], [712.0, 12440.0], [727.0, 12275.0], [726.0, 12296.0], [760.0, 11931.0], [766.0, 11846.0], [767.0, 11825.0], [753.0, 12008.0], [752.0, 12009.0], [755.0, 11989.0], [754.0, 12005.0], [765.0, 11862.666666666666], [762.0, 11891.0], [761.0, 11919.0], [751.0, 12014.0], [736.0, 12168.0], [738.0, 12353.0], [737.0, 12171.0], [741.0, 12106.0], [740.0, 12110.5], [743.0, 12090.0], [742.0, 12102.0], [750.0, 12020.0], [749.0, 12040.0], [748.0, 12042.0], [747.0, 12041.0], [746.0, 12058.0], [745.0, 12057.0], [744.0, 12072.0], [759.0, 12215.0], [758.0, 11958.0], [757.0, 11968.0], [756.0, 11989.0], [793.0, 11570.5], [798.0, 11515.0], [799.0, 11497.0], [785.0, 11627.0], [784.0, 11644.0], [787.0, 11620.0], [786.0, 11623.0], [796.0, 11531.0], [795.0, 11530.0], [794.0, 11737.0], [783.0, 11658.0], [769.0, 11824.0], [773.0, 11776.666666666666], [770.0, 11818.0], [775.0, 11752.0], [774.0, 11759.0], [782.0, 11920.0], [781.0, 11701.0], [780.0, 11702.0], [779.0, 11710.0], [778.0, 11712.0], [777.0, 11743.0], [776.0, 11750.0], [791.0, 11596.0], [790.0, 11607.0], [789.0, 11608.0], [788.0, 11620.0], [824.0, 11207.0], [828.0, 11166.0], [831.0, 11151.0], [817.0, 11273.0], [816.0, 11281.0], [820.0, 11258.0], [819.0, 11266.5], [830.0, 11164.0], [829.0, 11166.0], [827.0, 11173.0], [826.0, 11171.0], [825.0, 11178.0], [815.0, 11291.0], [801.0, 11485.0], [800.0, 11492.0], [803.0, 11458.0], [802.0, 11466.0], [805.0, 11428.0], [804.0, 11451.0], [807.0, 11414.0], [806.0, 11427.0], [814.0, 11322.0], [813.0, 11334.0], [812.0, 11335.0], [811.0, 11337.0], [810.0, 11342.0], [809.0, 11356.0], [808.0, 11379.0], [823.0, 11217.0], [821.0, 11244.0], [860.0, 11055.0], [863.0, 11017.0], [849.0, 10958.0], [848.0, 11218.0], [851.0, 10934.0], [850.0, 10940.0], [853.0, 11153.0], [852.0, 10929.0], [862.0, 11026.0], [861.0, 11038.0], [859.0, 11061.0], [858.0, 11071.0], [857.0, 11074.0], [856.0, 11092.0], [847.0, 10987.0], [833.0, 11103.0], [832.0, 11117.0], [835.0, 11066.0], [834.0, 11267.0], [837.0, 11057.0], [836.0, 11065.0], [839.0, 11045.0], [838.0, 11056.0], [846.0, 10996.0], [845.0, 11189.0], [844.0, 11016.0], [843.0, 11027.0], [842.0, 11037.0], [841.0, 11031.0], [840.0, 11035.0], [855.0, 11107.0], [854.0, 11141.0], [888.0, 10755.0], [892.0, 10695.0], [894.0, 10652.5], [881.0, 10841.0], [880.0, 10846.0], [883.0, 10830.0], [882.0, 10831.0], [891.0, 10697.0], [890.0, 10716.0], [889.0, 10754.0], [879.0, 10856.0], [864.0, 10869.0], [867.0, 10974.0], [866.0, 11002.0], [869.0, 10964.0], [868.0, 10968.0], [871.0, 10909.0], [870.0, 10928.0], [878.0, 10861.0], [876.0, 10872.0], [875.0, 10873.0], [874.0, 10883.0], [873.0, 10896.0], [872.0, 10908.0], [887.0, 10767.0], [886.0, 10773.0], [885.0, 10770.0], [884.0, 10648.0], [924.0, 10326.0], [927.0, 10266.0], [912.0, 10484.0], [914.0, 10455.0], [913.0, 10469.0], [916.0, 10425.0], [915.0, 10448.0], [926.0, 10189.0], [925.0, 10308.0], [923.0, 10328.0], [922.0, 10346.0], [921.0, 10352.0], [920.0, 10379.0], [911.0, 10485.0], [896.0, 10649.5], [899.0, 10636.0], [898.0, 10648.5], [903.0, 10547.333333333334], [900.0, 10596.0], [910.0, 10489.0], [909.0, 10288.0], [908.0, 10516.0], [907.0, 10533.0], [906.0, 10554.0], [905.0, 10566.0], [904.0, 10568.0], [919.0, 10401.5], [917.0, 10414.0], [956.0, 9809.0], [959.0, 9738.0], [944.0, 9850.0], [946.0, 9966.0], [945.0, 9972.0], [948.0, 9806.0], [947.0, 9962.0], [958.0, 9778.0], [957.0, 9807.0], [955.0, 9825.0], [954.0, 9859.0], [953.0, 9874.0], [952.0, 9874.5], [943.0, 9900.0], [928.0, 10265.0], [930.0, 10220.0], [929.0, 10262.0], [933.0, 10217.0], [932.0, 10219.5], [935.0, 10122.0], [934.0, 10126.0], [942.0, 9980.0], [941.0, 10004.0], [940.0, 10036.0], [939.0, 10050.0], [938.0, 10058.0], [937.0, 10097.0], [936.0, 10123.0], [950.0, 9880.0], [949.0, 9884.0], [984.0, 9446.0], [988.0, 9305.0], [991.0, 9326.0], [977.0, 9587.5], [979.0, 9396.0], [978.0, 9584.0], [990.0, 9331.0], [989.0, 9227.0], [987.0, 9297.0], [986.0, 9414.0], [985.0, 9418.0], [975.0, 9574.0], [960.0, 9654.0], [963.0, 9708.0], [961.0, 9719.0], [965.0, 9698.0], [964.0, 9695.0], [967.0, 9671.0], [966.0, 9680.0], [974.0, 9598.0], [973.0, 9599.0], [972.0, 9604.0], [971.0, 9623.0], [970.0, 9632.0], [969.0, 9654.0], [968.0, 9660.0], [983.0, 9279.0], [982.0, 9572.0], [1000.0, 8541.0], [999.0, 8494.0], [998.0, 8891.0], [997.0, 8949.0], [996.0, 9082.0], [995.0, 9121.0], [994.0, 9092.0], [993.0, 9248.0], [992.0, 9152.0], [1.0, 26426.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.61500000000024, 16073.376999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3750.0, "minX": 1.623327E12, "maxY": 277035.15, "series": [{"data": [[1.623327E12, 277035.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.623327E12, 3750.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16073.376999999997, "minX": 1.623327E12, "maxY": 16073.376999999997, "series": [{"data": [[1.623327E12, 16073.376999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15789.271000000008, "minX": 1.623327E12, "maxY": 15789.271000000008, "series": [{"data": [[1.623327E12, 15789.271000000008]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7836.191999999999, "minX": 1.623327E12, "maxY": 7836.191999999999, "series": [{"data": [[1.623327E12, 7836.191999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8494.0, "minX": 1.623327E12, "maxY": 26442.0, "series": [{"data": [[1.623327E12, 26442.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.623327E12, 26076.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.623327E12, 26418.6]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.623327E12, 26302.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.623327E12, 8494.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.623327E12, 20807.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8517.5, "minX": 2.0, "maxY": 26303.5, "series": [{"data": [[2.0, 8517.5], [33.0, 21137.0], [32.0, 24304.5], [37.0, 24822.0], [39.0, 9106.5], [40.0, 26303.5], [70.0, 9900.0], [71.0, 17010.0], [80.0, 13358.0], [87.0, 11029.0], [84.0, 15488.0], [21.0, 21075.5], [89.0, 12215.0], [88.0, 14026.0], [92.0, 16295.5], [27.0, 20609.0], [28.0, 20113.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[70.0, 10326.0], [71.0, 16603.5], [39.0, 9587.0], [80.0, 12842.0], [87.0, 11057.0], [84.0, 14671.5], [89.0, 11963.0], [88.0, 13752.0], [92.0, 15463.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8252.0, "minX": 2.0, "maxY": 26015.5, "series": [{"data": [[2.0, 8252.0], [33.0, 20850.0], [32.0, 24026.5], [37.0, 24543.0], [39.0, 8828.0], [40.0, 26015.5], [70.0, 9615.0], [71.0, 16732.0], [80.0, 13070.0], [87.0, 10736.5], [84.0, 15209.5], [21.0, 20792.5], [89.0, 11927.0], [88.0, 13745.0], [92.0, 16019.0], [27.0, 20331.0], [28.0, 19832.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[70.0, 10039.0], [71.0, 16316.0], [39.0, 9263.0], [80.0, 12540.0], [87.0, 10777.0], [84.0, 14377.5], [89.0, 11681.5], [88.0, 13478.0], [92.0, 15183.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.623327E12, "maxY": 16.666666666666668, "series": [{"data": [[1.623327E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7.116666666666666, "minX": 1.623327E12, "maxY": 9.55, "series": [{"data": [[1.623327E12, 7.116666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.623327E12, 9.55]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.623327E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 7.116666666666666, "minX": 1.623327E12, "maxY": 9.55, "series": [{"data": [[1.623327E12, 7.116666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.623327E12, 9.55]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.116666666666666, "minX": 1.623327E12, "maxY": 9.55, "series": [{"data": [[1.623327E12, 7.116666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.623327E12, 9.55]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.623327E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

