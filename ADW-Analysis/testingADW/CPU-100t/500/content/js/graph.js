/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 35832.0, "minX": 0.0, "maxY": 215799.0, "series": [{"data": [[0.0, 35832.0], [0.1, 35832.0], [0.2, 40176.0], [0.3, 40176.0], [0.4, 40954.0], [0.5, 40954.0], [0.6, 40954.0], [0.7, 41324.0], [0.8, 42999.0], [0.9, 42999.0], [1.0, 43224.0], [1.1, 43224.0], [1.2, 45265.0], [1.3, 45265.0], [1.4, 46386.0], [1.5, 46386.0], [1.6, 47194.0], [1.7, 47194.0], [1.8, 48000.0], [1.9, 48000.0], [2.0, 50185.0], [2.1, 50185.0], [2.2, 50327.0], [2.3, 50327.0], [2.4, 50588.0], [2.5, 50588.0], [2.6, 50728.0], [2.7, 50728.0], [2.8, 50728.0], [2.9, 50870.0], [3.0, 50870.0], [3.1, 51170.0], [3.2, 51170.0], [3.3, 51282.0], [3.4, 51282.0], [3.5, 51601.0], [3.6, 51601.0], [3.7, 51683.0], [3.8, 51683.0], [3.9, 52201.0], [4.0, 52201.0], [4.1, 52362.0], [4.2, 52362.0], [4.3, 52417.0], [4.4, 52417.0], [4.5, 52787.0], [4.6, 52787.0], [4.7, 53010.0], [4.8, 53010.0], [4.9, 53024.0], [5.0, 53024.0], [5.1, 53227.0], [5.2, 53227.0], [5.3, 53469.0], [5.4, 53469.0], [5.5, 53930.0], [5.6, 53930.0], [5.7, 54024.0], [5.8, 54024.0], [5.9, 54217.0], [6.0, 54217.0], [6.1, 54394.0], [6.2, 54394.0], [6.3, 54620.0], [6.4, 54620.0], [6.5, 54880.0], [6.6, 54880.0], [6.7, 55015.0], [6.8, 55015.0], [6.9, 55555.0], [7.0, 55555.0], [7.1, 55564.0], [7.2, 55564.0], [7.3, 55593.0], [7.4, 55593.0], [7.5, 55916.0], [7.6, 55916.0], [7.7, 56155.0], [7.8, 56155.0], [7.9, 56369.0], [8.0, 56369.0], [8.1, 56712.0], [8.2, 56712.0], [8.3, 56721.0], [8.4, 56721.0], [8.5, 57324.0], [8.6, 57324.0], [8.7, 57621.0], [8.8, 57970.0], [8.9, 57970.0], [9.0, 58227.0], [9.1, 58227.0], [9.2, 58668.0], [9.3, 58668.0], [9.4, 58721.0], [9.5, 58721.0], [9.6, 58926.0], [9.7, 58926.0], [9.8, 59653.0], [9.9, 59653.0], [10.0, 59726.0], [10.1, 59726.0], [10.2, 60119.0], [10.3, 60119.0], [10.4, 60291.0], [10.5, 60291.0], [10.6, 60486.0], [10.7, 60486.0], [10.8, 60621.0], [10.9, 60621.0], [11.0, 60715.0], [11.1, 60715.0], [11.2, 61421.0], [11.3, 61421.0], [11.4, 61517.0], [11.5, 61517.0], [11.6, 61580.0], [11.7, 61580.0], [11.8, 61717.0], [11.9, 61717.0], [12.0, 61989.0], [12.1, 61989.0], [12.2, 62027.0], [12.3, 62027.0], [12.4, 62229.0], [12.5, 62229.0], [12.6, 62349.0], [12.7, 62349.0], [12.8, 62867.0], [12.9, 62867.0], [13.0, 62933.0], [13.1, 62933.0], [13.2, 63233.0], [13.3, 63233.0], [13.4, 63375.0], [13.5, 63375.0], [13.6, 63588.0], [13.7, 63588.0], [13.8, 63882.0], [13.9, 63882.0], [14.0, 63902.0], [14.1, 63902.0], [14.2, 63951.0], [14.3, 63951.0], [14.4, 64278.0], [14.5, 64278.0], [14.6, 64527.0], [14.7, 64527.0], [14.8, 64710.0], [14.9, 64710.0], [15.0, 64916.0], [15.1, 64916.0], [15.2, 65167.0], [15.3, 65167.0], [15.4, 65214.0], [15.5, 65214.0], [15.6, 65594.0], [15.7, 65594.0], [15.8, 65716.0], [15.9, 65716.0], [16.0, 65826.0], [16.1, 65826.0], [16.2, 66302.0], [16.3, 66302.0], [16.4, 66461.0], [16.5, 66461.0], [16.6, 66488.0], [16.7, 66488.0], [16.8, 67091.0], [16.9, 67091.0], [17.0, 67228.0], [17.1, 67228.0], [17.2, 67322.0], [17.3, 67322.0], [17.4, 67629.0], [17.5, 67629.0], [17.6, 67886.0], [17.7, 67886.0], [17.8, 68092.0], [17.9, 68092.0], [18.0, 68315.0], [18.1, 68315.0], [18.2, 68505.0], [18.3, 68505.0], [18.4, 68778.0], [18.5, 68778.0], [18.6, 68913.0], [18.7, 68913.0], [18.8, 69411.0], [18.9, 69411.0], [19.0, 69431.0], [19.1, 69431.0], [19.2, 69440.0], [19.3, 69440.0], [19.4, 69629.0], [19.5, 69629.0], [19.6, 85618.0], [19.7, 85618.0], [19.8, 89530.0], [19.9, 89530.0], [20.0, 89785.0], [20.1, 89785.0], [20.2, 89916.0], [20.3, 89916.0], [20.4, 90218.0], [20.5, 90218.0], [20.6, 90485.0], [20.7, 90485.0], [20.8, 90614.0], [20.9, 90614.0], [21.0, 91894.0], [21.1, 91894.0], [21.2, 92069.0], [21.3, 92069.0], [21.4, 93020.0], [21.5, 93020.0], [21.6, 94019.0], [21.7, 94019.0], [21.8, 94613.0], [21.9, 94613.0], [22.0, 94821.0], [22.1, 94821.0], [22.2, 95022.0], [22.3, 95022.0], [22.4, 95249.0], [22.5, 95249.0], [22.6, 95594.0], [22.7, 95594.0], [22.8, 96729.0], [22.9, 96729.0], [23.0, 96781.0], [23.1, 96781.0], [23.2, 96915.0], [23.3, 96915.0], [23.4, 97177.0], [23.5, 97177.0], [23.6, 97409.0], [23.7, 97409.0], [23.8, 97418.0], [23.9, 97418.0], [24.0, 97620.0], [24.1, 97620.0], [24.2, 97822.0], [24.3, 97822.0], [24.4, 97823.0], [24.5, 97823.0], [24.6, 98031.0], [24.7, 98031.0], [24.8, 98284.0], [24.9, 98284.0], [25.0, 98501.0], [25.1, 98501.0], [25.2, 98532.0], [25.3, 98532.0], [25.4, 99168.0], [25.5, 99168.0], [25.6, 99333.0], [25.7, 99333.0], [25.8, 99573.0], [25.9, 99573.0], [26.0, 99826.0], [26.1, 99826.0], [26.2, 100026.0], [26.3, 100026.0], [26.4, 100219.0], [26.5, 100219.0], [26.6, 100269.0], [26.7, 100269.0], [26.8, 100325.0], [26.9, 100325.0], [27.0, 100472.0], [27.1, 100472.0], [27.2, 100795.0], [27.3, 100795.0], [27.4, 100917.0], [27.5, 100917.0], [27.6, 101021.0], [27.7, 101021.0], [27.8, 101120.0], [27.9, 101120.0], [28.0, 101384.0], [28.1, 101384.0], [28.2, 101518.0], [28.3, 101518.0], [28.4, 101686.0], [28.5, 101686.0], [28.6, 101967.0], [28.7, 101967.0], [28.8, 102016.0], [28.9, 102016.0], [29.0, 102319.0], [29.1, 102319.0], [29.2, 102489.0], [29.3, 102489.0], [29.4, 102537.0], [29.5, 102537.0], [29.6, 102725.0], [29.7, 102725.0], [29.8, 102880.0], [29.9, 102880.0], [30.0, 103122.0], [30.1, 103122.0], [30.2, 103212.0], [30.3, 103212.0], [30.4, 103315.0], [30.5, 103315.0], [30.6, 103561.0], [30.7, 103561.0], [30.8, 103768.0], [30.9, 103768.0], [31.0, 103841.0], [31.1, 103841.0], [31.2, 103866.0], [31.3, 103866.0], [31.4, 104069.0], [31.5, 104069.0], [31.6, 104162.0], [31.7, 104162.0], [31.8, 104381.0], [31.9, 104381.0], [32.0, 104386.0], [32.1, 104386.0], [32.2, 104724.0], [32.3, 104724.0], [32.4, 104828.0], [32.5, 104828.0], [32.6, 105016.0], [32.7, 105016.0], [32.8, 105182.0], [32.9, 105182.0], [33.0, 105268.0], [33.1, 105268.0], [33.2, 105373.0], [33.3, 105373.0], [33.4, 105426.0], [33.5, 105426.0], [33.6, 105517.0], [33.7, 105517.0], [33.8, 105767.0], [33.9, 105767.0], [34.0, 105807.0], [34.1, 105807.0], [34.2, 106084.0], [34.3, 106084.0], [34.4, 106264.0], [34.5, 106264.0], [34.6, 106517.0], [34.7, 106517.0], [34.8, 106672.0], [34.9, 106672.0], [35.0, 106821.0], [35.1, 106821.0], [35.2, 107217.0], [35.3, 107217.0], [35.4, 107318.0], [35.5, 107318.0], [35.6, 107420.0], [35.7, 107420.0], [35.8, 107615.0], [35.9, 107615.0], [36.0, 107819.0], [36.1, 107819.0], [36.2, 107910.0], [36.3, 107910.0], [36.4, 108082.0], [36.5, 108082.0], [36.6, 108304.0], [36.7, 108304.0], [36.8, 108420.0], [36.9, 108420.0], [37.0, 108693.0], [37.1, 108693.0], [37.2, 108782.0], [37.3, 108782.0], [37.4, 109001.0], [37.5, 109001.0], [37.6, 109086.0], [37.7, 109086.0], [37.8, 109281.0], [37.9, 109281.0], [38.0, 109286.0], [38.1, 109286.0], [38.2, 109426.0], [38.3, 109426.0], [38.4, 109426.0], [38.5, 109685.0], [38.6, 109685.0], [38.7, 110081.0], [38.8, 110081.0], [38.9, 110262.0], [39.0, 110262.0], [39.1, 110284.0], [39.2, 110284.0], [39.3, 118823.0], [39.4, 118823.0], [39.5, 124275.0], [39.6, 124275.0], [39.7, 126530.0], [39.8, 126530.0], [39.9, 126732.0], [40.0, 126732.0], [40.1, 126914.0], [40.2, 126914.0], [40.3, 127339.0], [40.4, 127339.0], [40.5, 127420.0], [40.6, 127420.0], [40.7, 127484.0], [40.8, 127484.0], [40.9, 127813.0], [41.0, 127813.0], [41.1, 128428.0], [41.2, 128428.0], [41.3, 128529.0], [41.4, 128529.0], [41.5, 128687.0], [41.6, 128687.0], [41.7, 128935.0], [41.8, 128935.0], [41.9, 129436.0], [42.0, 129436.0], [42.1, 130029.0], [42.2, 130029.0], [42.3, 130894.0], [42.4, 130894.0], [42.5, 131098.0], [42.6, 131098.0], [42.7, 131228.0], [42.8, 131228.0], [42.9, 131622.0], [43.0, 131622.0], [43.1, 131924.0], [43.2, 131924.0], [43.3, 132418.0], [43.4, 132418.0], [43.5, 132625.0], [43.6, 132625.0], [43.7, 132895.0], [43.8, 132895.0], [43.9, 133009.0], [44.0, 133009.0], [44.1, 133099.0], [44.2, 133099.0], [44.3, 133243.0], [44.4, 133243.0], [44.5, 133302.0], [44.6, 133302.0], [44.7, 133613.0], [44.8, 133613.0], [44.9, 133681.0], [45.0, 133681.0], [45.1, 133906.0], [45.2, 133906.0], [45.3, 134099.0], [45.4, 134099.0], [45.5, 134208.0], [45.6, 134208.0], [45.7, 134402.0], [45.8, 134402.0], [45.9, 134450.0], [46.0, 134450.0], [46.1, 134800.0], [46.2, 134800.0], [46.3, 134950.0], [46.4, 134950.0], [46.5, 135002.0], [46.6, 135002.0], [46.7, 135132.0], [46.8, 135132.0], [46.9, 135260.0], [47.0, 135260.0], [47.1, 135340.0], [47.2, 135340.0], [47.3, 135534.0], [47.4, 135534.0], [47.5, 135738.0], [47.6, 135738.0], [47.7, 135931.0], [47.8, 135931.0], [47.9, 136126.0], [48.0, 136126.0], [48.1, 136327.0], [48.2, 136327.0], [48.3, 136439.0], [48.4, 136439.0], [48.5, 136532.0], [48.6, 136532.0], [48.7, 136726.0], [48.8, 136726.0], [48.9, 136932.0], [49.0, 136932.0], [49.1, 137126.0], [49.2, 137126.0], [49.3, 137135.0], [49.4, 137135.0], [49.5, 137631.0], [49.6, 137631.0], [49.7, 137733.0], [49.8, 137733.0], [49.9, 137926.0], [50.0, 137926.0], [50.1, 138021.0], [50.2, 138021.0], [50.3, 138026.0], [50.4, 138026.0], [50.5, 138318.0], [50.6, 138318.0], [50.7, 138421.0], [50.8, 138421.0], [50.9, 138623.0], [51.0, 138623.0], [51.1, 138932.0], [51.2, 138932.0], [51.3, 139119.0], [51.4, 139119.0], [51.5, 139129.0], [51.6, 139129.0], [51.7, 139327.0], [51.8, 139327.0], [51.9, 139521.0], [52.0, 139521.0], [52.1, 139720.0], [52.2, 139720.0], [52.3, 139821.0], [52.4, 139821.0], [52.5, 140126.0], [52.6, 140126.0], [52.7, 140218.0], [52.8, 140218.0], [52.9, 140324.0], [53.0, 140324.0], [53.1, 140415.0], [53.2, 140415.0], [53.3, 140809.0], [53.4, 140809.0], [53.5, 141025.0], [53.6, 141025.0], [53.7, 141110.0], [53.8, 141110.0], [53.9, 141414.0], [54.0, 141414.0], [54.1, 141420.0], [54.2, 141420.0], [54.3, 141813.0], [54.4, 141813.0], [54.5, 141910.0], [54.6, 141910.0], [54.7, 142124.0], [54.8, 142124.0], [54.9, 142612.0], [55.0, 142612.0], [55.1, 143216.0], [55.2, 143216.0], [55.3, 143411.0], [55.4, 143411.0], [55.5, 143608.0], [55.6, 143608.0], [55.7, 143712.0], [55.8, 143712.0], [55.9, 143815.0], [56.0, 143815.0], [56.1, 143895.0], [56.2, 143895.0], [56.3, 144314.0], [56.4, 144314.0], [56.5, 144425.0], [56.6, 144425.0], [56.7, 144508.0], [56.8, 144508.0], [56.9, 144794.0], [57.0, 144794.0], [57.1, 145009.0], [57.2, 145009.0], [57.3, 145211.0], [57.4, 145211.0], [57.5, 145404.0], [57.6, 145404.0], [57.7, 145594.0], [57.8, 145594.0], [57.9, 145605.0], [58.0, 145605.0], [58.1, 145993.0], [58.2, 145993.0], [58.3, 146190.0], [58.4, 146190.0], [58.5, 146194.0], [58.6, 146194.0], [58.7, 146794.0], [58.8, 146794.0], [58.9, 153591.0], [59.0, 153591.0], [59.1, 156086.0], [59.2, 156086.0], [59.3, 156381.0], [59.4, 156381.0], [59.5, 157897.0], [59.6, 157897.0], [59.7, 159713.0], [59.8, 159713.0], [59.9, 161889.0], [60.0, 161889.0], [60.1, 162285.0], [60.2, 162285.0], [60.3, 162581.0], [60.4, 162581.0], [60.5, 162895.0], [60.6, 162895.0], [60.7, 163279.0], [60.8, 163279.0], [60.9, 163690.0], [61.0, 163690.0], [61.1, 163987.0], [61.2, 163987.0], [61.3, 163988.0], [61.4, 163988.0], [61.5, 164270.0], [61.6, 164270.0], [61.7, 164484.0], [61.8, 164484.0], [61.9, 164781.0], [62.0, 164781.0], [62.1, 165584.0], [62.2, 165584.0], [62.3, 166090.0], [62.4, 166090.0], [62.5, 166278.0], [62.6, 166278.0], [62.7, 166504.0], [62.8, 166504.0], [62.9, 166581.0], [63.0, 166581.0], [63.1, 166779.0], [63.2, 166779.0], [63.3, 166984.0], [63.4, 166984.0], [63.5, 167211.0], [63.6, 167211.0], [63.7, 167271.0], [63.8, 167271.0], [63.9, 167585.0], [64.0, 167585.0], [64.1, 167686.0], [64.2, 167686.0], [64.3, 167889.0], [64.4, 167889.0], [64.5, 167975.0], [64.6, 167975.0], [64.7, 168177.0], [64.8, 168177.0], [64.9, 168288.0], [65.0, 168288.0], [65.1, 168379.0], [65.2, 168379.0], [65.3, 168577.0], [65.4, 168577.0], [65.5, 168668.0], [65.6, 168668.0], [65.7, 168874.0], [65.8, 168874.0], [65.9, 168876.0], [66.0, 168876.0], [66.1, 168978.0], [66.2, 168978.0], [66.3, 169373.0], [66.4, 169373.0], [66.5, 169469.0], [66.6, 169469.0], [66.7, 169664.0], [66.8, 169664.0], [66.9, 169965.0], [67.0, 169965.0], [67.1, 170050.0], [67.2, 170050.0], [67.3, 170271.0], [67.4, 170271.0], [67.5, 170655.0], [67.6, 170655.0], [67.7, 170867.0], [67.8, 170867.0], [67.9, 171058.0], [68.0, 171058.0], [68.1, 171471.0], [68.2, 171471.0], [68.3, 171760.0], [68.4, 171760.0], [68.5, 172264.0], [68.6, 172264.0], [68.7, 172270.0], [68.8, 172270.0], [68.9, 172467.0], [69.0, 172467.0], [69.1, 172759.0], [69.2, 172759.0], [69.3, 172954.0], [69.4, 172954.0], [69.5, 172961.0], [69.6, 172961.0], [69.7, 172962.0], [69.8, 172962.0], [69.9, 173256.0], [70.0, 173256.0], [70.1, 173256.0], [70.2, 173256.0], [70.3, 173260.0], [70.4, 173260.0], [70.5, 173353.0], [70.6, 173353.0], [70.7, 173453.0], [70.8, 173453.0], [70.9, 173664.0], [71.0, 173664.0], [71.1, 173846.0], [71.2, 173846.0], [71.3, 174047.0], [71.4, 174047.0], [71.5, 174159.0], [71.6, 174159.0], [71.7, 174444.0], [71.8, 174444.0], [71.9, 174652.0], [72.0, 174652.0], [72.1, 174658.0], [72.2, 174658.0], [72.3, 174846.0], [72.4, 174846.0], [72.5, 174851.0], [72.6, 174851.0], [72.7, 175048.0], [72.8, 175048.0], [72.9, 175152.0], [73.0, 175152.0], [73.1, 175240.0], [73.2, 175240.0], [73.3, 175436.0], [73.4, 175436.0], [73.5, 175848.0], [73.6, 175848.0], [73.7, 176045.0], [73.8, 176045.0], [73.9, 176330.0], [74.0, 176330.0], [74.1, 176435.0], [74.2, 176435.0], [74.3, 176541.0], [74.4, 176541.0], [74.5, 177130.0], [74.6, 177130.0], [74.7, 177142.0], [74.8, 177142.0], [74.9, 177640.0], [75.0, 177640.0], [75.1, 178129.0], [75.2, 178129.0], [75.3, 178331.0], [75.4, 178331.0], [75.5, 178332.0], [75.6, 178332.0], [75.7, 178536.0], [75.8, 178536.0], [75.9, 178540.0], [76.0, 178540.0], [76.1, 178927.0], [76.2, 178927.0], [76.3, 179132.0], [76.4, 179132.0], [76.5, 179229.0], [76.6, 179229.0], [76.7, 179618.0], [76.8, 179618.0], [76.9, 180527.0], [77.0, 180527.0], [77.1, 180829.0], [77.2, 180829.0], [77.3, 181027.0], [77.4, 181027.0], [77.5, 181215.0], [77.6, 181215.0], [77.7, 181519.0], [77.8, 181519.0], [77.9, 181727.0], [78.0, 181727.0], [78.1, 182046.0], [78.2, 182046.0], [78.3, 182324.0], [78.4, 182324.0], [78.5, 183027.0], [78.6, 183027.0], [78.7, 189414.0], [78.8, 189414.0], [78.9, 191732.0], [79.0, 191732.0], [79.1, 192121.0], [79.2, 192121.0], [79.3, 193810.0], [79.4, 193810.0], [79.5, 195145.0], [79.6, 195145.0], [79.7, 195224.0], [79.8, 195224.0], [79.9, 196590.0], [80.0, 196590.0], [80.1, 197093.0], [80.2, 197093.0], [80.3, 198822.0], [80.4, 198822.0], [80.5, 199217.0], [80.6, 199217.0], [80.7, 199410.0], [80.8, 199410.0], [80.9, 199619.0], [81.0, 199619.0], [81.1, 200019.0], [81.2, 200019.0], [81.3, 200313.0], [81.4, 200313.0], [81.5, 200320.0], [81.6, 200320.0], [81.7, 200615.0], [81.8, 200615.0], [81.9, 200701.0], [82.0, 200701.0], [82.1, 201112.0], [82.2, 201112.0], [82.3, 201417.0], [82.4, 201417.0], [82.5, 202105.0], [82.6, 202105.0], [82.7, 202310.0], [82.8, 202310.0], [82.9, 202405.0], [83.0, 202405.0], [83.1, 202808.0], [83.2, 202808.0], [83.3, 202906.0], [83.4, 202906.0], [83.5, 203213.0], [83.6, 203213.0], [83.7, 203229.0], [83.8, 203229.0], [83.9, 203307.0], [84.0, 203307.0], [84.1, 203403.0], [84.2, 203403.0], [84.3, 203619.0], [84.4, 203619.0], [84.5, 203707.0], [84.6, 203707.0], [84.7, 203819.0], [84.8, 203819.0], [84.9, 203908.0], [85.0, 203908.0], [85.1, 204101.0], [85.2, 204101.0], [85.3, 204200.0], [85.4, 204200.0], [85.5, 204302.0], [85.6, 204302.0], [85.7, 204413.0], [85.8, 204413.0], [85.9, 204504.0], [86.0, 204504.0], [86.1, 204510.0], [86.2, 204510.0], [86.3, 204807.0], [86.4, 204807.0], [86.5, 204908.0], [86.6, 204908.0], [86.7, 205006.0], [86.8, 205006.0], [86.9, 205106.0], [87.0, 205106.0], [87.1, 205317.0], [87.2, 205317.0], [87.3, 205501.0], [87.4, 205501.0], [87.5, 205594.0], [87.6, 205594.0], [87.7, 205603.0], [87.8, 205603.0], [87.9, 205710.0], [88.0, 205710.0], [88.1, 205802.0], [88.2, 205802.0], [88.3, 205909.0], [88.4, 205909.0], [88.5, 205998.0], [88.6, 205998.0], [88.7, 206203.0], [88.8, 206203.0], [88.9, 206389.0], [89.0, 206389.0], [89.1, 206400.0], [89.2, 206400.0], [89.3, 206500.0], [89.4, 206500.0], [89.5, 206611.0], [89.6, 206611.0], [89.7, 206715.0], [89.8, 206715.0], [89.9, 206812.0], [90.0, 206812.0], [90.1, 207007.0], [90.2, 207007.0], [90.3, 207195.0], [90.4, 207195.0], [90.5, 207200.0], [90.6, 207200.0], [90.7, 207393.0], [90.8, 207393.0], [90.9, 207495.0], [91.0, 207495.0], [91.1, 207706.0], [91.2, 207706.0], [91.3, 207894.0], [91.4, 207894.0], [91.5, 207994.0], [91.6, 207994.0], [91.7, 208393.0], [91.8, 208393.0], [91.9, 208596.0], [92.0, 208596.0], [92.1, 208598.0], [92.2, 208598.0], [92.3, 208790.0], [92.4, 208790.0], [92.5, 208803.0], [92.6, 208803.0], [92.7, 209194.0], [92.8, 209194.0], [92.9, 209506.0], [93.0, 209506.0], [93.1, 209794.0], [93.2, 209794.0], [93.3, 210186.0], [93.4, 210186.0], [93.5, 210768.0], [93.6, 210768.0], [93.7, 210780.0], [93.8, 210780.0], [93.9, 210892.0], [94.0, 210892.0], [94.1, 211287.0], [94.2, 211287.0], [94.3, 211659.0], [94.4, 211659.0], [94.5, 211662.0], [94.6, 211662.0], [94.7, 212266.0], [94.8, 212266.0], [94.9, 212341.0], [95.0, 212341.0], [95.1, 212353.0], [95.2, 212353.0], [95.3, 212662.0], [95.4, 212662.0], [95.5, 212749.0], [95.6, 212749.0], [95.7, 212838.0], [95.8, 212838.0], [95.9, 212854.0], [96.0, 212854.0], [96.1, 213063.0], [96.2, 213063.0], [96.3, 213247.0], [96.4, 213247.0], [96.5, 213431.0], [96.6, 213431.0], [96.7, 213444.0], [96.8, 213444.0], [96.9, 213551.0], [97.0, 213551.0], [97.1, 213648.0], [97.2, 213648.0], [97.3, 213741.0], [97.4, 213741.0], [97.5, 213941.0], [97.6, 213941.0], [97.7, 214049.0], [97.8, 214049.0], [97.9, 214237.0], [98.0, 214237.0], [98.1, 214238.0], [98.2, 214238.0], [98.3, 214243.0], [98.4, 214243.0], [98.5, 214645.0], [98.6, 214645.0], [98.7, 215004.0], [98.8, 215004.0], [98.9, 215150.0], [99.0, 215150.0], [99.1, 215240.0], [99.2, 215240.0], [99.3, 215336.0], [99.4, 215336.0], [99.5, 215646.0], [99.6, 215646.0], [99.7, 215704.0], [99.8, 215704.0], [99.9, 215799.0], [100.0, 215799.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 35800.0, "maxY": 3.0, "series": [{"data": [[135200.0, 1.0], [138400.0, 1.0], [167200.0, 2.0], [173600.0, 1.0], [199200.0, 1.0], [202400.0, 1.0], [205600.0, 1.0], [208800.0, 1.0], [215200.0, 1.0], [136100.0, 1.0], [139300.0, 1.0], [168100.0, 1.0], [203300.0, 1.0], [206500.0, 1.0], [209700.0, 1.0], [68300.0, 1.0], [95500.0, 1.0], [97100.0, 1.0], [100300.0, 1.0], [101900.0, 1.0], [103500.0, 1.0], [105100.0, 1.0], [108300.0, 1.0], [140200.0, 1.0], [143400.0, 1.0], [172200.0, 2.0], [175400.0, 1.0], [204200.0, 1.0], [207400.0, 1.0], [137900.0, 1.0], [141100.0, 1.0], [144300.0, 1.0], [40100.0, 1.0], [40900.0, 1.0], [166700.0, 1.0], [169900.0, 1.0], [176300.0, 1.0], [50500.0, 1.0], [205100.0, 1.0], [208300.0, 1.0], [56100.0, 1.0], [60100.0, 1.0], [61700.0, 1.0], [63300.0, 1.0], [64900.0, 1.0], [65800.0, 1.0], [93000.0, 1.0], [94600.0, 1.0], [97800.0, 2.0], [101000.0, 1.0], [105800.0, 1.0], [107400.0, 1.0], [109000.0, 2.0], [132400.0, 1.0], [145200.0, 1.0], [164400.0, 1.0], [167600.0, 1.0], [170800.0, 1.0], [174000.0, 1.0], [199600.0, 1.0], [202800.0, 1.0], [215600.0, 1.0], [133300.0, 1.0], [136500.0, 1.0], [139700.0, 1.0], [146100.0, 2.0], [168500.0, 1.0], [171700.0, 1.0], [178100.0, 1.0], [203700.0, 1.0], [210100.0, 1.0], [96900.0, 1.0], [98500.0, 2.0], [103300.0, 1.0], [106500.0, 1.0], [127300.0, 1.0], [128900.0, 1.0], [134200.0, 1.0], [143800.0, 2.0], [166200.0, 1.0], [169400.0, 1.0], [175800.0, 1.0], [201400.0, 1.0], [207800.0, 1.0], [214200.0, 3.0], [131900.0, 1.0], [135100.0, 1.0], [138300.0, 1.0], [144700.0, 1.0], [163900.0, 2.0], [43200.0, 1.0], [48000.0, 1.0], [202300.0, 1.0], [51200.0, 1.0], [205500.0, 2.0], [208700.0, 1.0], [215100.0, 1.0], [57600.0, 1.0], [63200.0, 1.0], [67200.0, 1.0], [97600.0, 1.0], [102400.0, 1.0], [104000.0, 1.0], [107200.0, 1.0], [131200.0, 1.0], [134400.0, 2.0], [137600.0, 1.0], [140800.0, 1.0], [163200.0, 1.0], [169600.0, 1.0], [176000.0, 1.0], [179200.0, 1.0], [195200.0, 1.0], [204800.0, 1.0], [211200.0, 1.0], [135300.0, 1.0], [205700.0, 1.0], [215300.0, 1.0], [68700.0, 1.0], [89500.0, 1.0], [99100.0, 1.0], [100700.0, 1.0], [102300.0, 1.0], [105500.0, 1.0], [108700.0, 1.0], [133000.0, 2.0], [142600.0, 1.0], [161800.0, 1.0], [168200.0, 1.0], [171400.0, 1.0], [174600.0, 2.0], [181000.0, 1.0], [193800.0, 1.0], [197000.0, 1.0], [203400.0, 1.0], [206600.0, 1.0], [213000.0, 1.0], [133900.0, 1.0], [137100.0, 2.0], [140300.0, 1.0], [146700.0, 1.0], [156300.0, 1.0], [50700.0, 1.0], [201100.0, 1.0], [204300.0, 1.0], [52300.0, 1.0], [210700.0, 2.0], [53900.0, 1.0], [213900.0, 1.0], [55500.0, 3.0], [56300.0, 1.0], [57900.0, 1.0], [58700.0, 1.0], [61900.0, 1.0], [65100.0, 1.0], [63500.0, 1.0], [67800.0, 1.0], [69400.0, 3.0], [90200.0, 1.0], [91800.0, 1.0], [95000.0, 1.0], [98200.0, 1.0], [99800.0, 1.0], [106200.0, 1.0], [107800.0, 1.0], [109400.0, 1.0], [128600.0, 1.0], [131600.0, 1.0], [134800.0, 1.0], [138000.0, 2.0], [144400.0, 1.0], [163600.0, 1.0], [170000.0, 1.0], [173200.0, 3.0], [176400.0, 1.0], [179600.0, 1.0], [198800.0, 1.0], [211600.0, 2.0], [135700.0, 1.0], [138900.0, 1.0], [142100.0, 1.0], [174100.0, 1.0], [180500.0, 1.0], [196500.0, 1.0], [202900.0, 1.0], [215700.0, 2.0], [68500.0, 1.0], [103700.0, 1.0], [105300.0, 1.0], [139800.0, 1.0], [162200.0, 1.0], [168600.0, 1.0], [175000.0, 1.0], [200600.0, 1.0], [203800.0, 1.0], [207000.0, 1.0], [213400.0, 2.0], [153500.0, 1.0], [172700.0, 1.0], [179100.0, 1.0], [182300.0, 1.0], [195100.0, 1.0], [52200.0, 1.0], [53000.0, 2.0], [207900.0, 1.0], [54600.0, 1.0], [58600.0, 1.0], [60200.0, 1.0], [64200.0, 1.0], [67600.0, 1.0], [94800.0, 1.0], [98000.0, 1.0], [102800.0, 1.0], [106000.0, 1.0], [107600.0, 1.0], [109200.0, 2.0], [118800.0, 1.0], [128400.0, 1.0], [130000.0, 1.0], [133600.0, 2.0], [143200.0, 1.0], [156000.0, 1.0], [168800.0, 2.0], [175200.0, 1.0], [207200.0, 1.0], [213600.0, 1.0], [137700.0, 1.0], [166500.0, 2.0], [172900.0, 3.0], [192100.0, 1.0], [204900.0, 1.0], [89900.0, 1.0], [99500.0, 1.0], [101100.0, 1.0], [102700.0, 1.0], [104300.0, 2.0], [126700.0, 1.0], [138600.0, 1.0], [141800.0, 1.0], [145000.0, 1.0], [157800.0, 1.0], [164200.0, 1.0], [170600.0, 1.0], [173800.0, 1.0], [199400.0, 1.0], [205800.0, 1.0], [212200.0, 1.0], [136300.0, 1.0], [139500.0, 1.0], [145900.0, 1.0], [41300.0, 1.0], [42900.0, 1.0], [168300.0, 1.0], [50100.0, 1.0], [200300.0, 2.0], [206700.0, 1.0], [57300.0, 1.0], [58900.0, 1.0], [59700.0, 1.0], [62900.0, 1.0], [64500.0, 1.0], [90600.0, 1.0], [100200.0, 2.0], [105000.0, 1.0], [106600.0, 1.0], [124200.0, 1.0], [127400.0, 2.0], [134000.0, 1.0], [140400.0, 1.0], [143600.0, 1.0], [162800.0, 1.0], [166000.0, 1.0], [172400.0, 1.0], [182000.0, 1.0], [204400.0, 1.0], [210800.0, 1.0], [214000.0, 1.0], [134900.0, 1.0], [144500.0, 1.0], [166900.0, 1.0], [173300.0, 1.0], [176500.0, 1.0], [202100.0, 1.0], [205300.0, 1.0], [208500.0, 2.0], [65700.0, 1.0], [67300.0, 1.0], [68900.0, 1.0], [89700.0, 1.0], [99300.0, 1.0], [100900.0, 1.0], [102500.0, 1.0], [104100.0, 1.0], [105700.0, 1.0], [107300.0, 1.0], [126500.0, 1.0], [132600.0, 1.0], [145400.0, 1.0], [167800.0, 1.0], [171000.0, 1.0], [206200.0, 1.0], [212600.0, 1.0], [136700.0, 1.0], [165500.0, 1.0], [175100.0, 1.0], [178300.0, 2.0], [45200.0, 1.0], [181500.0, 1.0], [50800.0, 1.0], [200700.0, 1.0], [203900.0, 1.0], [51600.0, 2.0], [52400.0, 1.0], [53200.0, 1.0], [207100.0, 1.0], [54000.0, 1.0], [54800.0, 1.0], [213500.0, 1.0], [59600.0, 1.0], [60400.0, 1.0], [62000.0, 1.0], [62800.0, 1.0], [65200.0, 1.0], [66400.0, 2.0], [68000.0, 1.0], [69600.0, 1.0], [85600.0, 1.0], [90400.0, 1.0], [92000.0, 1.0], [95200.0, 1.0], [100000.0, 1.0], [101600.0, 1.0], [103200.0, 1.0], [104800.0, 1.0], [108000.0, 1.0], [109600.0, 1.0], [132800.0, 1.0], [145600.0, 1.0], [174400.0, 1.0], [177600.0, 1.0], [180800.0, 1.0], [200000.0, 1.0], [203200.0, 2.0], [206400.0, 1.0], [212800.0, 2.0], [136900.0, 1.0], [140100.0, 1.0], [162500.0, 1.0], [168900.0, 1.0], [178500.0, 2.0], [181700.0, 1.0], [204100.0, 1.0], [207300.0, 1.0], [213700.0, 1.0], [66300.0, 1.0], [96700.0, 2.0], [101500.0, 1.0], [103100.0, 1.0], [104700.0, 1.0], [107900.0, 1.0], [141000.0, 1.0], [205000.0, 1.0], [214600.0, 1.0], [135500.0, 1.0], [141900.0, 1.0], [167500.0, 1.0], [177100.0, 2.0], [46300.0, 1.0], [47100.0, 1.0], [50300.0, 1.0], [51100.0, 1.0], [52700.0, 1.0], [205900.0, 2.0], [209100.0, 1.0], [212300.0, 2.0], [54300.0, 1.0], [55900.0, 1.0], [56700.0, 2.0], [60700.0, 1.0], [61500.0, 2.0], [62300.0, 1.0], [63900.0, 2.0], [64700.0, 1.0], [65500.0, 1.0], [67000.0, 1.0], [97400.0, 2.0], [103800.0, 2.0], [105400.0, 1.0], [108600.0, 1.0], [110200.0, 2.0], [127800.0, 1.0], [129400.0, 1.0], [131000.0, 1.0], [133200.0, 1.0], [136400.0, 1.0], [174800.0, 2.0], [181200.0, 1.0], [203600.0, 1.0], [206800.0, 1.0], [213200.0, 1.0], [143700.0, 1.0], [159700.0, 1.0], [169300.0, 1.0], [178900.0, 1.0], [191700.0, 1.0], [204500.0, 2.0], [207700.0, 1.0], [101300.0, 1.0], [126900.0, 1.0], [128500.0, 1.0], [135000.0, 1.0], [141400.0, 2.0], [170200.0, 1.0], [173400.0, 1.0], [183000.0, 1.0], [189400.0, 1.0], [215000.0, 1.0], [135900.0, 1.0], [139100.0, 2.0], [35800.0, 1.0], [145500.0, 1.0], [164700.0, 1.0], [167900.0, 1.0], [206300.0, 1.0], [209500.0, 1.0], [212700.0, 1.0], [53400.0, 1.0], [54200.0, 1.0], [55000.0, 1.0], [58200.0, 1.0], [60600.0, 1.0], [61400.0, 1.0], [62200.0, 1.0], [63800.0, 1.0], [94000.0, 1.0], [100400.0, 1.0], [102000.0, 1.0], [105200.0, 1.0], [106800.0, 1.0], [108400.0, 1.0], [110000.0, 1.0], [130800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 215700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 67.01503759398499, "minX": 1.62477768E12, "maxY": 481.5, "series": [{"data": [[1.6247778E12, 219.0175438596491], [1.62477786E12, 67.01503759398499], [1.62477768E12, 481.5], [1.62477774E12, 383.50632911392404]], "isOverall": false, "label": "testinginstance", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62477786E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 35832.0, "minX": 1.0, "maxY": 215799.0, "series": [{"data": [[2.0, 215704.0], [3.0, 215646.0], [4.0, 215336.0], [5.0, 215240.0], [6.0, 215150.0], [7.0, 215004.0], [8.0, 214645.0], [9.0, 214243.0], [10.0, 214238.0], [11.0, 214237.0], [12.0, 214049.0], [13.0, 213941.0], [14.0, 213741.0], [15.0, 213648.0], [16.0, 213551.0], [17.0, 213444.0], [18.0, 213431.0], [19.0, 213247.0], [20.0, 213063.0], [21.0, 212854.0], [22.0, 212838.0], [23.0, 212749.0], [24.0, 212662.0], [25.0, 212353.0], [26.0, 212341.0], [27.0, 212266.0], [29.0, 211660.5], [30.0, 211287.0], [31.0, 210892.0], [33.0, 210780.0], [32.0, 210768.0], [35.0, 209794.0], [34.0, 210186.0], [37.0, 209194.0], [36.0, 209506.0], [39.0, 208790.0], [38.0, 208803.0], [41.0, 208596.0], [40.0, 208598.0], [43.0, 207994.0], [42.0, 208393.0], [45.0, 207706.0], [44.0, 207894.0], [47.0, 207393.0], [46.0, 207495.0], [49.0, 207195.0], [48.0, 207200.0], [51.0, 206812.0], [50.0, 207007.0], [53.0, 206611.0], [52.0, 206715.0], [55.0, 206400.0], [54.0, 206500.0], [57.0, 206203.0], [56.0, 206389.0], [59.0, 205909.0], [58.0, 205998.0], [61.0, 205710.0], [60.0, 205802.0], [63.0, 205594.0], [62.0, 205603.0], [67.0, 205006.0], [66.0, 205106.0], [65.0, 205317.0], [64.0, 205501.0], [71.0, 204507.0], [69.0, 204807.0], [68.0, 204908.0], [75.0, 204101.0], [74.0, 204200.0], [73.0, 204302.0], [72.0, 204413.0], [79.0, 203619.0], [78.0, 203707.0], [77.0, 203819.0], [76.0, 203908.0], [83.0, 203213.0], [82.0, 203229.0], [81.0, 203307.0], [80.0, 203403.0], [87.0, 202310.0], [86.0, 202405.0], [85.0, 202808.0], [84.0, 202906.0], [91.0, 200701.0], [90.0, 201112.0], [89.0, 201417.0], [88.0, 202105.0], [95.0, 200019.0], [94.0, 200313.0], [93.0, 200320.0], [92.0, 200615.0], [99.0, 198822.0], [98.0, 199217.0], [97.0, 199410.0], [96.0, 199619.0], [103.0, 195145.0], [102.0, 195224.0], [101.0, 196590.0], [100.0, 197093.0], [107.0, 189414.0], [106.0, 191732.0], [105.0, 192121.0], [104.0, 193810.0], [111.0, 181727.0], [110.0, 182046.0], [109.0, 182324.0], [108.0, 183027.0], [115.0, 180829.0], [114.0, 181027.0], [113.0, 181215.0], [112.0, 181519.0], [119.0, 179132.0], [118.0, 179229.0], [117.0, 179618.0], [116.0, 180527.0], [123.0, 178331.0], [122.0, 178536.0], [121.0, 178540.0], [120.0, 178927.0], [127.0, 177142.0], [126.0, 177640.0], [125.0, 178129.0], [124.0, 178332.0], [135.0, 175240.0], [134.0, 175436.0], [133.0, 175848.0], [132.0, 176045.0], [131.0, 176330.0], [130.0, 176435.0], [129.0, 176541.0], [128.0, 177130.0], [143.0, 174159.0], [142.0, 174444.0], [141.0, 174652.0], [140.0, 174658.0], [139.0, 174846.0], [138.0, 174851.0], [137.0, 175048.0], [136.0, 175152.0], [151.0, 173256.0], [149.0, 173260.0], [148.0, 173353.0], [147.0, 173453.0], [146.0, 173664.0], [145.0, 173846.0], [144.0, 174047.0], [159.0, 171760.0], [158.0, 172267.0], [156.0, 172467.0], [155.0, 172759.0], [154.0, 172957.5], [152.0, 172962.0], [167.0, 169664.0], [166.0, 169965.0], [165.0, 170050.0], [164.0, 170271.0], [163.0, 170655.0], [162.0, 170867.0], [161.0, 171058.0], [160.0, 171471.0], [175.0, 168379.0], [174.0, 168577.0], [173.0, 168668.0], [172.0, 168876.0], [171.0, 168874.0], [170.0, 168978.0], [169.0, 169373.0], [168.0, 169469.0], [183.0, 166984.0], [182.0, 167271.0], [181.0, 167585.0], [180.0, 167686.0], [179.0, 167889.0], [178.0, 167975.0], [177.0, 168177.0], [176.0, 168288.0], [191.0, 164781.0], [190.0, 165584.0], [189.0, 166090.0], [188.0, 166278.0], [187.0, 166504.0], [186.0, 166581.0], [185.0, 166779.0], [184.0, 167211.0], [199.0, 162581.0], [198.0, 162895.0], [197.0, 163279.0], [196.0, 163690.0], [195.0, 163988.0], [194.0, 163987.0], [193.0, 164270.0], [192.0, 164484.0], [207.0, 146794.0], [206.0, 153591.0], [205.0, 156086.0], [204.0, 156381.0], [203.0, 157897.0], [202.0, 159713.0], [201.0, 161889.0], [200.0, 162285.0], [215.0, 145009.0], [214.0, 145211.0], [213.0, 145404.0], [212.0, 145594.0], [211.0, 145605.0], [210.0, 146190.0], [209.0, 145993.0], [208.0, 146194.0], [223.0, 143608.0], [222.0, 143712.0], [221.0, 143815.0], [220.0, 143895.0], [219.0, 144314.0], [218.0, 144425.0], [217.0, 144508.0], [216.0, 144794.0], [231.0, 141414.0], [230.0, 141420.0], [229.0, 141813.0], [228.0, 141910.0], [227.0, 142124.0], [226.0, 142612.0], [225.0, 143216.0], [224.0, 143411.0], [239.0, 139821.0], [238.0, 140126.0], [237.0, 140218.0], [236.0, 140324.0], [235.0, 140415.0], [234.0, 140809.0], [233.0, 141025.0], [232.0, 141110.0], [247.0, 138421.0], [246.0, 138623.0], [245.0, 138932.0], [244.0, 139119.0], [243.0, 139129.0], [242.0, 139327.0], [241.0, 139521.0], [240.0, 139720.0], [255.0, 137126.0], [254.0, 137135.0], [253.0, 137631.0], [252.0, 137733.0], [251.0, 137926.0], [250.0, 138021.0], [249.0, 138026.0], [248.0, 138318.0], [270.0, 134800.0], [271.0, 134450.0], [269.0, 135002.0], [268.0, 134950.0], [267.0, 135132.0], [266.0, 135260.0], [265.0, 135340.0], [264.0, 135534.0], [263.0, 135738.0], [257.0, 136726.0], [256.0, 136932.0], [259.0, 136439.0], [258.0, 136532.0], [262.0, 135931.0], [261.0, 136126.0], [260.0, 136327.0], [286.0, 131622.0], [287.0, 131228.0], [285.0, 131924.0], [284.0, 132418.0], [283.0, 132625.0], [282.0, 132895.0], [281.0, 133009.0], [280.0, 133099.0], [279.0, 133302.0], [273.0, 134208.0], [272.0, 134402.0], [275.0, 133906.0], [274.0, 134099.0], [278.0, 133243.0], [277.0, 133613.0], [276.0, 133681.0], [302.0, 126530.0], [303.0, 124275.0], [301.0, 126732.0], [300.0, 126914.0], [299.0, 127339.0], [298.0, 127484.0], [297.0, 127420.0], [296.0, 127813.0], [295.0, 128428.0], [289.0, 130894.0], [288.0, 131098.0], [291.0, 129436.0], [290.0, 130029.0], [294.0, 128687.0], [293.0, 128529.0], [292.0, 128935.0], [318.0, 108082.0], [319.0, 107910.0], [317.0, 108304.0], [316.0, 108420.0], [315.0, 108693.0], [314.0, 108782.0], [313.0, 109001.0], [312.0, 109086.0], [311.0, 109281.0], [304.0, 118823.0], [307.0, 110081.0], [306.0, 110273.0], [310.0, 109286.0], [309.0, 109426.0], [308.0, 109685.0], [334.0, 105373.0], [335.0, 105268.0], [333.0, 105426.0], [332.0, 105517.0], [331.0, 105767.0], [330.0, 105807.0], [329.0, 106084.0], [328.0, 106264.0], [327.0, 106517.0], [321.0, 107615.0], [320.0, 107819.0], [323.0, 107318.0], [322.0, 107420.0], [326.0, 106672.0], [325.0, 106821.0], [324.0, 107217.0], [350.0, 103122.0], [351.0, 102880.0], [349.0, 103212.0], [348.0, 103315.0], [347.0, 103561.0], [346.0, 103768.0], [345.0, 103841.0], [344.0, 103866.0], [343.0, 104069.0], [337.0, 105016.0], [336.0, 105182.0], [339.0, 104724.0], [338.0, 104828.0], [342.0, 104162.0], [341.0, 104381.0], [340.0, 104386.0], [366.0, 100325.0], [367.0, 100269.0], [365.0, 100472.0], [364.0, 100795.0], [363.0, 100917.0], [362.0, 101021.0], [361.0, 101120.0], [360.0, 101384.0], [359.0, 101518.0], [353.0, 102537.0], [352.0, 102725.0], [355.0, 102319.0], [354.0, 102489.0], [358.0, 101686.0], [357.0, 101967.0], [356.0, 102016.0], [382.0, 97418.0], [383.0, 97177.0], [381.0, 97409.0], [380.0, 97620.0], [379.0, 97823.0], [378.0, 97822.0], [377.0, 98031.0], [376.0, 98284.0], [375.0, 98501.0], [369.0, 100026.0], [368.0, 100219.0], [371.0, 99573.0], [370.0, 99826.0], [374.0, 98532.0], [373.0, 99168.0], [372.0, 99333.0], [398.0, 90218.0], [399.0, 89916.0], [397.0, 90485.0], [396.0, 90614.0], [395.0, 91894.0], [394.0, 92069.0], [393.0, 93020.0], [392.0, 94019.0], [391.0, 94613.0], [385.0, 96729.0], [384.0, 96915.0], [387.0, 95594.0], [386.0, 96781.0], [390.0, 94821.0], [389.0, 95022.0], [388.0, 95249.0], [414.0, 67322.0], [415.0, 67228.0], [413.0, 67629.0], [412.0, 67886.0], [411.0, 68092.0], [410.0, 68315.0], [409.0, 68505.0], [408.0, 68778.0], [407.0, 68913.0], [401.0, 89530.0], [400.0, 89785.0], [403.0, 69629.0], [402.0, 85618.0], [406.0, 69411.0], [405.0, 69431.0], [404.0, 69440.0], [430.0, 63902.0], [431.0, 63882.0], [429.0, 63951.0], [428.0, 64278.0], [427.0, 64527.0], [426.0, 64710.0], [425.0, 64916.0], [424.0, 65167.0], [423.0, 65214.0], [417.0, 66461.0], [416.0, 67091.0], [419.0, 66302.0], [418.0, 66488.0], [422.0, 65594.0], [421.0, 65716.0], [420.0, 65826.0], [446.0, 60621.0], [447.0, 60486.0], [445.0, 60715.0], [444.0, 61421.0], [443.0, 61517.0], [442.0, 61580.0], [441.0, 61717.0], [440.0, 61989.0], [439.0, 62027.0], [433.0, 63375.0], [432.0, 63588.0], [435.0, 62933.0], [434.0, 63233.0], [438.0, 62229.0], [437.0, 62349.0], [436.0, 62867.0], [462.0, 56155.0], [463.0, 55916.0], [461.0, 56369.0], [460.0, 56712.0], [459.0, 56721.0], [458.0, 57324.0], [457.0, 57621.0], [456.0, 57970.0], [455.0, 58227.0], [449.0, 60119.0], [448.0, 60291.0], [451.0, 59653.0], [450.0, 59726.0], [454.0, 58668.0], [453.0, 58721.0], [452.0, 58926.0], [478.0, 52787.0], [479.0, 52417.0], [477.0, 53010.0], [476.0, 53024.0], [475.0, 53227.0], [474.0, 53469.0], [473.0, 53930.0], [472.0, 54024.0], [471.0, 54217.0], [465.0, 55593.0], [464.0, 55555.0], [467.0, 55015.0], [466.0, 55564.0], [470.0, 54394.0], [469.0, 54620.0], [468.0, 54880.0], [494.0, 45265.0], [495.0, 43224.0], [493.0, 46386.0], [492.0, 47194.0], [491.0, 48000.0], [490.0, 50185.0], [489.0, 50327.0], [488.0, 50588.0], [487.0, 50728.0], [481.0, 52201.0], [480.0, 52362.0], [483.0, 51601.0], [482.0, 51683.0], [486.0, 50870.0], [485.0, 51170.0], [484.0, 51282.0], [500.0, 35832.0], [499.0, 40176.0], [498.0, 40954.0], [497.0, 41324.0], [496.0, 42999.0], [1.0, 215799.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[250.5119999999998, 136372.892]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 317.3, "minX": 1.62477768E12, "maxY": 31144.8, "series": [{"data": [[1.6247778E12, 31144.8], [1.62477786E12, 24223.733333333334], [1.62477768E12, 6921.066666666667], [1.62477774E12, 28777.066666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6247778E12, 1427.85], [1.62477786E12, 1110.55], [1.62477768E12, 317.3], [1.62477774E12, 1319.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62477786E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 50420.868421052626, "minX": 1.62477768E12, "maxY": 201283.39849624052, "series": [{"data": [[1.6247778E12, 150481.23976608182], [1.62477786E12, 201283.39849624052], [1.62477768E12, 50420.868421052626], [1.62477774E12, 87135.8797468354]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62477786E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 50401.0, "minX": 1.62477768E12, "maxY": 201277.76691729328, "series": [{"data": [[1.6247778E12, 150477.12280701761], [1.62477786E12, 201277.76691729328], [1.62477768E12, 50401.0], [1.62477774E12, 87128.8734177215]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62477786E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1319.4736842105262, "minX": 1.62477768E12, "maxY": 6122.4661654135325, "series": [{"data": [[1.6247778E12, 4158.619883040938], [1.62477786E12, 6122.4661654135325], [1.62477768E12, 1319.4736842105262], [1.62477774E12, 2142.2531645569616]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62477786E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35832.0, "minX": 1.62477768E12, "maxY": 215799.0, "series": [{"data": [[1.6247778E12, 175436.0], [1.62477786E12, 215799.0], [1.62477768E12, 55916.0], [1.62477774E12, 110284.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6247778E12, 173256.0], [1.62477786E12, 213861.0], [1.62477768E12, 55555.9], [1.62477774E12, 107828.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6247778E12, 175294.88], [1.62477786E12, 215766.7], [1.62477768E12, 55916.0], [1.62477774E12, 110271.02]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6247778E12, 174527.2], [1.62477786E12, 215047.8], [1.62477768E12, 55609.15], [1.62477774E12, 109095.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6247778E12, 118823.0], [1.62477786E12, 175848.0], [1.62477768E12, 35832.0], [1.62477774E12, 56155.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6247778E12, 144314.0], [1.62477786E12, 205006.0], [1.62477768E12, 51942.0], [1.62477774E12, 97046.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62477786E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 67989.0, "minX": 1.0, "maxY": 206203.0, "series": [{"data": [[1.0, 135534.5], [2.0, 130461.5], [4.0, 143509.5], [8.0, 155307.0], [9.0, 206203.0], [5.0, 67989.0], [10.0, 173256.0], [3.0, 130552.5], [6.0, 136383.0], [7.0, 168288.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 67984.0, "minX": 1.0, "maxY": 206201.0, "series": [{"data": [[1.0, 135488.5], [2.0, 130458.0], [4.0, 143506.5], [8.0, 155304.5], [9.0, 206201.0], [5.0, 67984.0], [10.0, 173252.5], [3.0, 130550.0], [6.0, 136381.5], [7.0, 168286.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.62477768E12, "maxY": 8.333333333333334, "series": [{"data": [[1.62477768E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62477768E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.62477768E12, "maxY": 2.85, "series": [{"data": [[1.6247778E12, 2.85], [1.62477786E12, 2.216666666666667], [1.62477768E12, 0.6333333333333333], [1.62477774E12, 2.6333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62477786E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.62477768E12, "maxY": 2.85, "series": [{"data": [[1.6247778E12, 2.85], [1.62477786E12, 2.216666666666667], [1.62477768E12, 0.6333333333333333], [1.62477774E12, 2.6333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62477786E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.62477768E12, "maxY": 2.85, "series": [{"data": [[1.6247778E12, 2.85], [1.62477786E12, 2.216666666666667], [1.62477768E12, 0.6333333333333333], [1.62477774E12, 2.6333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62477786E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

