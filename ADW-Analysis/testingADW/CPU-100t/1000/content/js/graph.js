/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6445.0, "minX": 0.0, "maxY": 300717.0, "series": [{"data": [[0.0, 6445.0], [0.1, 8443.0], [0.2, 9247.0], [0.3, 9247.0], [0.4, 16022.0], [0.5, 16621.0], [0.6, 17128.0], [0.7, 18022.0], [0.8, 19020.0], [0.9, 20625.0], [1.0, 21021.0], [1.1, 21832.0], [1.2, 21923.0], [1.3, 22124.0], [1.4, 22124.0], [1.5, 22223.0], [1.6, 22228.0], [1.7, 22422.0], [1.8, 22426.0], [1.9, 22723.0], [2.0, 22817.0], [2.1, 22921.0], [2.2, 23025.0], [2.3, 23111.0], [2.4, 23228.0], [2.5, 23413.0], [2.6, 23430.0], [2.7, 23624.0], [2.8, 23820.0], [2.9, 23825.0], [3.0, 24114.0], [3.1, 24429.0], [3.2, 24513.0], [3.3, 24719.0], [3.4, 24729.0], [3.5, 24913.0], [3.6, 24915.0], [3.7, 25113.0], [3.8, 25315.0], [3.9, 25410.0], [4.0, 25825.0], [4.1, 25838.0], [4.2, 25920.0], [4.3, 26012.0], [4.4, 26311.0], [4.5, 26403.0], [4.6, 26514.0], [4.7, 26709.0], [4.8, 26805.0], [4.9, 26903.0], [5.0, 27010.0], [5.1, 27195.0], [5.2, 27210.0], [5.3, 27303.0], [5.4, 27494.0], [5.5, 27506.0], [5.6, 27702.0], [5.7, 27803.0], [5.8, 27901.0], [5.9, 27998.0], [6.0, 28100.0], [6.1, 28212.0], [6.2, 28217.0], [6.3, 28406.0], [6.4, 28598.0], [6.5, 28808.0], [6.6, 28810.0], [6.7, 28996.0], [6.8, 29098.0], [6.9, 29303.0], [7.0, 29305.0], [7.1, 29479.0], [7.2, 29500.0], [7.3, 29545.0], [7.4, 29744.0], [7.5, 29795.0], [7.6, 29958.0], [7.7, 30051.0], [7.8, 30245.0], [7.9, 30452.0], [8.0, 30543.0], [8.1, 30836.0], [8.2, 30838.0], [8.3, 30949.0], [8.4, 31246.0], [8.5, 31443.0], [8.6, 31664.0], [8.7, 31739.0], [8.8, 31943.0], [8.9, 32140.0], [9.0, 32142.0], [9.1, 32248.0], [9.2, 32339.0], [9.3, 32438.0], [9.4, 32530.0], [9.5, 32733.0], [9.6, 32844.0], [9.7, 33030.0], [9.8, 36927.0], [9.9, 38934.0], [10.0, 39545.0], [10.1, 40943.0], [10.2, 45933.0], [10.3, 46345.0], [10.4, 46628.0], [10.5, 47226.0], [10.6, 47630.0], [10.7, 47941.0], [10.8, 48028.0], [10.9, 49340.0], [11.0, 50832.0], [11.1, 51230.0], [11.2, 51629.0], [11.3, 51632.0], [11.4, 51932.0], [11.5, 52036.0], [11.6, 52126.0], [11.7, 52235.0], [11.8, 52442.0], [11.9, 52536.0], [12.0, 52749.0], [12.1, 52858.0], [12.2, 53129.0], [12.3, 53133.0], [12.4, 53329.0], [12.5, 53534.0], [12.6, 53633.0], [12.7, 53849.0], [12.8, 54037.0], [12.9, 54245.0], [13.0, 54328.0], [13.1, 54539.0], [13.2, 55129.0], [13.3, 55226.0], [13.4, 55240.0], [13.5, 55422.0], [13.6, 55651.0], [13.7, 55734.0], [13.8, 55831.0], [13.9, 56028.0], [14.0, 56122.0], [14.1, 56321.0], [14.2, 56624.0], [14.3, 56723.0], [14.4, 56939.0], [14.5, 57062.0], [14.6, 57118.0], [14.7, 57253.0], [14.8, 57366.0], [14.9, 57414.0], [15.0, 57537.0], [15.1, 57702.0], [15.2, 57828.0], [15.3, 57860.0], [15.4, 57917.0], [15.5, 58055.0], [15.6, 58124.0], [15.7, 58129.0], [15.8, 58437.0], [15.9, 58548.0], [16.0, 58751.0], [16.1, 58769.0], [16.2, 58940.0], [16.3, 59044.0], [16.4, 59142.0], [16.5, 59205.0], [16.6, 59214.0], [16.7, 59515.0], [16.8, 59651.0], [16.9, 59718.0], [17.0, 59721.0], [17.1, 59855.0], [17.2, 59929.0], [17.3, 60021.0], [17.4, 60259.0], [17.5, 60325.0], [17.6, 60415.0], [17.7, 60604.0], [17.8, 60651.0], [17.9, 60904.0], [18.0, 61146.0], [18.1, 61238.0], [18.2, 61535.0], [18.3, 61603.0], [18.4, 62094.0], [18.5, 62357.0], [18.6, 62400.0], [18.7, 62620.0], [18.8, 62754.0], [18.9, 62812.0], [19.0, 62999.0], [19.1, 63111.0], [19.2, 63111.0], [19.3, 63200.0], [19.4, 63400.0], [19.5, 63752.0], [19.6, 63801.0], [19.7, 64096.0], [19.8, 66995.0], [19.9, 68950.0], [20.0, 69302.0], [20.1, 70846.0], [20.2, 74494.0], [20.3, 76099.0], [20.4, 77537.0], [20.5, 77890.0], [20.6, 78072.0], [20.7, 78540.0], [20.8, 78844.0], [20.9, 79048.0], [21.0, 79887.0], [21.1, 81555.0], [21.2, 82146.0], [21.3, 82191.0], [21.4, 82346.0], [21.5, 82464.0], [21.6, 82486.0], [21.7, 82580.0], [21.8, 82797.0], [21.9, 83052.0], [22.0, 83154.0], [22.1, 83181.0], [22.2, 83382.0], [22.3, 83390.0], [22.4, 83543.0], [22.5, 83747.0], [22.6, 83747.0], [22.7, 83849.0], [22.8, 83983.0], [22.9, 83990.0], [23.0, 84047.0], [23.1, 84456.0], [23.2, 84457.0], [23.3, 84550.0], [23.4, 84648.0], [23.5, 84751.0], [23.6, 84946.0], [23.7, 84981.0], [23.8, 85198.0], [23.9, 85550.0], [24.0, 85579.0], [24.1, 85673.0], [24.2, 85948.0], [24.3, 86084.0], [24.4, 86148.0], [24.5, 86164.0], [24.6, 86285.0], [24.7, 86351.0], [24.8, 86573.0], [24.9, 86652.0], [25.0, 86749.0], [25.1, 86894.0], [25.2, 86955.0], [25.3, 87082.0], [25.4, 87372.0], [25.5, 87560.0], [25.6, 87572.0], [25.7, 87671.0], [25.8, 87967.0], [25.9, 88078.0], [26.0, 88161.0], [26.1, 88455.0], [26.2, 88460.0], [26.3, 88473.0], [26.4, 88661.0], [26.5, 88767.0], [26.6, 88779.0], [26.7, 88859.0], [26.8, 88967.0], [26.9, 88968.0], [27.0, 89564.0], [27.1, 89566.0], [27.2, 89661.0], [27.3, 89769.0], [27.4, 90068.0], [27.5, 90068.0], [27.6, 90069.0], [27.7, 90373.0], [27.8, 90563.0], [27.9, 90759.0], [28.0, 91379.0], [28.1, 91766.0], [28.2, 91880.0], [28.3, 92067.0], [28.4, 92139.0], [28.5, 92493.0], [28.6, 92593.0], [28.7, 92752.0], [28.8, 92780.0], [28.9, 92883.0], [29.0, 92888.0], [29.1, 93059.0], [29.2, 93485.0], [29.3, 93755.0], [29.4, 93785.0], [29.5, 94178.0], [29.6, 94486.0], [29.7, 97154.0], [29.8, 98299.0], [29.9, 99001.0], [30.0, 99264.0], [30.1, 100980.0], [30.2, 104357.0], [30.3, 106092.0], [30.4, 106523.0], [30.5, 107088.0], [30.6, 107778.0], [30.7, 107864.0], [30.8, 107897.0], [30.9, 108286.0], [31.0, 108677.0], [31.1, 108787.0], [31.2, 109652.0], [31.3, 110947.0], [31.4, 111147.0], [31.5, 111498.0], [31.6, 111780.0], [31.7, 111845.0], [31.8, 111857.0], [31.9, 112100.0], [32.0, 112183.0], [32.1, 112198.0], [32.2, 112290.0], [32.3, 112354.0], [32.4, 112446.0], [32.5, 112486.0], [32.6, 112648.0], [32.7, 112758.0], [32.8, 112993.0], [32.9, 113188.0], [33.0, 113387.0], [33.1, 113586.0], [33.2, 113639.0], [33.3, 113647.0], [33.4, 113687.0], [33.5, 113688.0], [33.6, 113855.0], [33.7, 113933.0], [33.8, 114044.0], [33.9, 114294.0], [34.0, 114492.0], [34.1, 114592.0], [34.2, 114627.0], [34.3, 114746.0], [34.4, 114806.0], [34.5, 114990.0], [34.6, 115130.0], [34.7, 115243.0], [34.8, 115290.0], [34.9, 115884.0], [35.0, 115996.0], [35.1, 116035.0], [35.2, 116127.0], [35.3, 116338.0], [35.4, 116394.0], [35.5, 116788.0], [35.6, 116985.0], [35.7, 117027.0], [35.8, 117127.0], [35.9, 117593.0], [36.0, 117997.0], [36.1, 118116.0], [36.2, 118186.0], [36.3, 118621.0], [36.4, 118999.0], [36.5, 119498.0], [36.6, 119590.0], [36.7, 119791.0], [36.8, 119893.0], [36.9, 119994.0], [37.0, 120226.0], [37.1, 120388.0], [37.2, 120416.0], [37.3, 120986.0], [37.4, 121120.0], [37.5, 121199.0], [37.6, 121388.0], [37.7, 121421.0], [37.8, 121512.0], [37.9, 121641.0], [38.0, 122020.0], [38.1, 122021.0], [38.2, 122101.0], [38.3, 122391.0], [38.4, 122591.0], [38.5, 122796.0], [38.6, 123013.0], [38.7, 123013.0], [38.8, 123121.0], [38.9, 123207.0], [39.0, 123591.0], [39.1, 123618.0], [39.2, 123701.0], [39.3, 123817.0], [39.4, 123898.0], [39.5, 124892.0], [39.6, 126493.0], [39.7, 127407.0], [39.8, 128104.0], [39.9, 129798.0], [40.0, 130604.0], [40.1, 133513.0], [40.2, 134086.0], [40.3, 134407.0], [40.4, 135496.0], [40.5, 136105.0], [40.6, 137300.0], [40.7, 137497.0], [40.8, 137515.0], [40.9, 137994.0], [41.0, 138103.0], [41.1, 139591.0], [41.2, 140509.0], [41.3, 140518.0], [41.4, 140525.0], [41.5, 140890.0], [41.6, 140994.0], [41.7, 141017.0], [41.8, 141203.0], [41.9, 141206.0], [42.0, 141400.0], [42.1, 141499.0], [42.2, 141699.0], [42.3, 141806.0], [42.4, 141902.0], [42.5, 142203.0], [42.6, 142299.0], [42.7, 142311.0], [42.8, 142401.0], [42.9, 142503.0], [43.0, 142596.0], [43.1, 142799.0], [43.2, 142898.0], [43.3, 142902.0], [43.4, 143096.0], [43.5, 143207.0], [43.6, 143210.0], [43.7, 143400.0], [43.8, 143598.0], [43.9, 143699.0], [44.0, 143802.0], [44.1, 143802.0], [44.2, 144005.0], [44.3, 144097.0], [44.4, 144194.0], [44.5, 144200.0], [44.6, 144302.0], [44.7, 144403.0], [44.8, 144889.0], [44.9, 144902.0], [45.0, 144989.0], [45.1, 145296.0], [45.2, 145412.0], [45.3, 145492.0], [45.4, 145605.0], [45.5, 145889.0], [45.6, 146193.0], [45.7, 146593.0], [45.8, 146898.0], [45.9, 146901.0], [46.0, 147197.0], [46.1, 147387.0], [46.2, 147792.0], [46.3, 148194.0], [46.4, 148196.0], [46.5, 148681.0], [46.6, 148890.0], [46.7, 149094.0], [46.8, 149302.0], [46.9, 149498.0], [47.0, 149577.0], [47.1, 149595.0], [47.2, 149777.0], [47.3, 149888.0], [47.4, 150280.0], [47.5, 150399.0], [47.6, 150588.0], [47.7, 150589.0], [47.8, 150785.0], [47.9, 150972.0], [48.0, 151087.0], [48.1, 151177.0], [48.2, 151376.0], [48.3, 151391.0], [48.4, 151678.0], [48.5, 151778.0], [48.6, 151873.0], [48.7, 152172.0], [48.8, 152173.0], [48.9, 152376.0], [49.0, 152577.0], [49.1, 152653.0], [49.2, 152820.0], [49.3, 153024.0], [49.4, 153193.0], [49.5, 153918.0], [49.6, 155518.0], [49.7, 156522.0], [49.8, 157131.0], [49.9, 158515.0], [50.0, 159111.0], [50.1, 159319.0], [50.2, 162617.0], [50.3, 163509.0], [50.4, 163593.0], [50.5, 163717.0], [50.6, 163919.0], [50.7, 164164.0], [50.8, 165112.0], [50.9, 166028.0], [51.0, 166618.0], [51.1, 166809.0], [51.2, 167412.0], [51.3, 168505.0], [51.4, 169403.0], [51.5, 169612.0], [51.6, 169616.0], [51.7, 169808.0], [51.8, 169814.0], [51.9, 170030.0], [52.0, 170206.0], [52.1, 170208.0], [52.2, 170402.0], [52.3, 170505.0], [52.4, 170699.0], [52.5, 170805.0], [52.6, 170899.0], [52.7, 170996.0], [52.8, 171088.0], [52.9, 171296.0], [53.0, 171303.0], [53.1, 171490.0], [53.2, 171507.0], [53.3, 171589.0], [53.4, 171789.0], [53.5, 171899.0], [53.6, 171986.0], [53.7, 172088.0], [53.8, 172185.0], [53.9, 172385.0], [54.0, 172394.0], [54.1, 172577.0], [54.2, 172681.0], [54.3, 172774.0], [54.4, 172878.0], [54.5, 172986.0], [54.6, 173279.0], [54.7, 173379.0], [54.8, 173679.0], [54.9, 174178.0], [55.0, 174480.0], [55.1, 174772.0], [55.2, 175176.0], [55.3, 175382.0], [55.4, 175669.0], [55.5, 175870.0], [55.6, 175986.0], [55.7, 176487.0], [55.8, 176775.0], [55.9, 176959.0], [56.0, 177480.0], [56.1, 177767.0], [56.2, 177886.0], [56.3, 178271.0], [56.4, 178471.0], [56.5, 178680.0], [56.6, 178759.0], [56.7, 178859.0], [56.8, 179060.0], [56.9, 179268.0], [57.0, 179450.0], [57.1, 179660.0], [57.2, 179858.0], [57.3, 180063.0], [57.4, 180067.0], [57.5, 180259.0], [57.6, 180267.0], [57.7, 180465.0], [57.8, 180657.0], [57.9, 180852.0], [58.0, 180853.0], [58.1, 181068.0], [58.2, 181146.0], [58.3, 181255.0], [58.4, 181469.0], [58.5, 181558.0], [58.6, 181657.0], [58.7, 181751.0], [58.8, 181952.0], [58.9, 182054.0], [59.0, 182156.0], [59.1, 182258.0], [59.2, 182358.0], [59.3, 182558.0], [59.4, 183243.0], [59.5, 184748.0], [59.6, 185344.0], [59.7, 186047.0], [59.8, 187443.0], [59.9, 188036.0], [60.0, 188045.0], [60.1, 188349.0], [60.2, 188839.0], [60.3, 192043.0], [60.4, 192239.0], [60.5, 192438.0], [60.6, 192534.0], [60.7, 192738.0], [60.8, 193442.0], [60.9, 194537.0], [61.0, 196636.0], [61.1, 197726.0], [61.2, 198309.0], [61.3, 198446.0], [61.4, 198539.0], [61.5, 198724.0], [61.6, 198845.0], [61.7, 199025.0], [61.8, 199234.0], [61.9, 199242.0], [62.0, 199331.0], [62.1, 199339.0], [62.2, 199531.0], [62.3, 199719.0], [62.4, 199925.0], [62.5, 199929.0], [62.6, 200128.0], [62.7, 200219.0], [62.8, 200322.0], [62.9, 200421.0], [63.0, 200523.0], [63.1, 200719.0], [63.2, 200723.0], [63.3, 200914.0], [63.4, 200928.0], [63.5, 201016.0], [63.6, 201228.0], [63.7, 201416.0], [63.8, 201424.0], [63.9, 201633.0], [64.0, 201811.0], [64.1, 201817.0], [64.2, 201914.0], [64.3, 202011.0], [64.4, 202211.0], [64.5, 202307.0], [64.6, 202511.0], [64.7, 203014.0], [64.8, 203601.0], [64.9, 204101.0], [65.0, 204409.0], [65.1, 204799.0], [65.2, 205010.0], [65.3, 205330.0], [65.4, 205400.0], [65.5, 205564.0], [65.6, 205788.0], [65.7, 206088.0], [65.8, 206292.0], [65.9, 206837.0], [66.0, 206902.0], [66.1, 207305.0], [66.2, 207499.0], [66.3, 207800.0], [66.4, 208086.0], [66.5, 208403.0], [66.6, 208486.0], [66.7, 208679.0], [66.8, 208885.0], [66.9, 208890.0], [67.0, 209100.0], [67.1, 209288.0], [67.2, 209480.0], [67.3, 209494.0], [67.4, 209692.0], [67.5, 209892.0], [67.6, 209984.0], [67.7, 209988.0], [67.8, 210080.0], [67.9, 210280.0], [68.0, 210378.0], [68.1, 210583.0], [68.2, 210682.0], [68.3, 210682.0], [68.4, 210876.0], [68.5, 210978.0], [68.6, 211078.0], [68.7, 211179.0], [68.8, 211379.0], [68.9, 211473.0], [69.0, 211588.0], [69.1, 211789.0], [69.2, 212071.0], [69.3, 212276.0], [69.4, 212878.0], [69.5, 214476.0], [69.6, 214680.0], [69.7, 215474.0], [69.8, 216882.0], [69.9, 218056.0], [70.0, 218370.0], [70.1, 218973.0], [70.2, 220073.0], [70.3, 223263.0], [70.4, 223486.0], [70.5, 223673.0], [70.6, 223865.0], [70.7, 223970.0], [70.8, 224358.0], [70.9, 225362.0], [71.0, 226648.0], [71.1, 227973.0], [71.2, 228962.0], [71.3, 229461.0], [71.4, 229565.0], [71.5, 229763.0], [71.6, 229965.0], [71.7, 229967.0], [71.8, 230155.0], [71.9, 230170.0], [72.0, 230259.0], [72.1, 230455.0], [72.2, 230560.0], [72.3, 230658.0], [72.4, 230848.0], [72.5, 230957.0], [72.6, 231055.0], [72.7, 231165.0], [72.8, 231270.0], [72.9, 231458.0], [73.0, 231551.0], [73.1, 231752.0], [73.2, 231759.0], [73.3, 231956.0], [73.4, 232040.0], [73.5, 232153.0], [73.6, 232250.0], [73.7, 232538.0], [73.8, 232649.0], [73.9, 232746.0], [74.0, 232944.0], [74.1, 232951.0], [74.2, 233041.0], [74.3, 233244.0], [74.4, 233550.0], [74.5, 234236.0], [74.6, 235435.0], [74.7, 236149.0], [74.8, 236334.0], [74.9, 236349.0], [75.0, 236444.0], [75.1, 236844.0], [75.2, 237746.0], [75.3, 237932.0], [75.4, 237940.0], [75.5, 238239.0], [75.6, 238444.0], [75.7, 238855.0], [75.8, 239134.0], [75.9, 239540.0], [76.0, 239839.0], [76.1, 239921.0], [76.2, 239925.0], [76.3, 240333.0], [76.4, 240337.0], [76.5, 240339.0], [76.6, 240342.0], [76.7, 240442.0], [76.8, 240628.0], [76.9, 240635.0], [77.0, 240637.0], [77.1, 240828.0], [77.2, 240836.0], [77.3, 241009.0], [77.4, 241026.0], [77.5, 241206.0], [77.6, 241436.0], [77.7, 241532.0], [77.8, 241540.0], [77.9, 241630.0], [78.0, 241741.0], [78.1, 241908.0], [78.2, 242109.0], [78.3, 242117.0], [78.4, 242207.0], [78.5, 242326.0], [78.6, 242427.0], [78.7, 242725.0], [78.8, 242906.0], [78.9, 243006.0], [79.0, 243430.0], [79.1, 244205.0], [79.2, 244315.0], [79.3, 244612.0], [79.4, 246208.0], [79.5, 246209.0], [79.6, 247103.0], [79.7, 248417.0], [79.8, 249308.0], [79.9, 249498.0], [80.0, 251199.0], [80.1, 252610.0], [80.2, 252910.0], [80.3, 253104.0], [80.4, 253220.0], [80.5, 253307.0], [80.6, 253708.0], [80.7, 254208.0], [80.8, 256606.0], [80.9, 256891.0], [81.0, 258294.0], [81.1, 259190.0], [81.2, 259304.0], [81.3, 259362.0], [81.4, 259609.0], [81.5, 259611.0], [81.6, 259793.0], [81.7, 259892.0], [81.8, 259993.0], [81.9, 260092.0], [82.0, 260289.0], [82.1, 260304.0], [82.2, 260488.0], [82.3, 260584.0], [82.4, 260703.0], [82.5, 260790.0], [82.6, 260995.0], [82.7, 261204.0], [82.8, 261396.0], [82.9, 261411.0], [83.0, 261487.0], [83.1, 261595.0], [83.2, 261703.0], [83.3, 261895.0], [83.4, 261905.0], [83.5, 262023.0], [83.6, 262283.0], [83.7, 262304.0], [83.8, 262381.0], [83.9, 262426.0], [84.0, 262591.0], [84.1, 262784.0], [84.2, 262790.0], [84.3, 263191.0], [84.4, 263289.0], [84.5, 263887.0], [84.6, 264984.0], [84.7, 265384.0], [84.8, 265589.0], [84.9, 265902.0], [85.0, 266081.0], [85.1, 266390.0], [85.2, 266582.0], [85.3, 266688.0], [85.4, 266889.0], [85.5, 267090.0], [85.6, 267395.0], [85.7, 268001.0], [85.8, 268484.0], [85.9, 268487.0], [86.0, 268881.0], [86.1, 268982.0], [86.2, 268991.0], [86.3, 269177.0], [86.4, 269190.0], [86.5, 269482.0], [86.6, 269484.0], [86.7, 269678.0], [86.8, 269681.0], [86.9, 269874.0], [87.0, 269967.0], [87.1, 269978.0], [87.2, 270177.0], [87.3, 270277.0], [87.4, 270279.0], [87.5, 270404.0], [87.6, 270476.0], [87.7, 270562.0], [87.8, 270778.0], [87.9, 270982.0], [88.0, 271084.0], [88.1, 271170.0], [88.2, 271268.0], [88.3, 271465.0], [88.4, 271466.0], [88.5, 271767.0], [88.6, 271868.0], [88.7, 271969.0], [88.8, 272164.0], [88.9, 272177.0], [89.0, 272566.0], [89.1, 273575.0], [89.2, 273766.0], [89.3, 273868.0], [89.4, 274972.0], [89.5, 275261.0], [89.6, 275983.0], [89.7, 277270.0], [89.8, 278655.0], [89.9, 279959.0], [90.0, 280464.0], [90.1, 280765.0], [90.2, 282265.0], [90.3, 282371.0], [90.4, 282564.0], [90.5, 282766.0], [90.6, 282881.0], [90.7, 283161.0], [90.8, 285875.0], [90.9, 286263.0], [91.0, 287755.0], [91.1, 288053.0], [91.2, 288557.0], [91.3, 288658.0], [91.4, 288764.0], [91.5, 288959.0], [91.6, 289171.0], [91.7, 289257.0], [91.8, 289358.0], [91.9, 289656.0], [92.0, 289756.0], [92.1, 289959.0], [92.2, 290255.0], [92.3, 290355.0], [92.4, 290567.0], [92.5, 290751.0], [92.6, 290755.0], [92.7, 291250.0], [92.8, 291253.0], [92.9, 291377.0], [93.0, 291454.0], [93.1, 291550.0], [93.2, 291753.0], [93.3, 291850.0], [93.4, 291947.0], [93.5, 292250.0], [93.6, 292344.0], [93.7, 292662.0], [93.8, 292754.0], [93.9, 292942.0], [94.0, 293039.0], [94.1, 293155.0], [94.2, 293651.0], [94.3, 293844.0], [94.4, 294044.0], [94.5, 294352.0], [94.6, 294421.0], [94.7, 294648.0], [94.8, 294745.0], [94.9, 294939.0], [95.0, 294950.0], [95.1, 295244.0], [95.2, 295252.0], [95.3, 295439.0], [95.4, 295545.0], [95.5, 295644.0], [95.6, 295650.0], [95.7, 295843.0], [95.8, 295940.0], [95.9, 296034.0], [96.0, 296251.0], [96.1, 296342.0], [96.2, 296416.0], [96.3, 296540.0], [96.4, 296610.0], [96.5, 296618.0], [96.6, 296709.0], [96.7, 296929.0], [96.8, 296934.0], [96.9, 297019.0], [97.0, 297241.0], [97.1, 297336.0], [97.2, 297417.0], [97.3, 297539.0], [97.4, 297628.0], [97.5, 297739.0], [97.6, 297818.0], [97.7, 297912.0], [97.8, 298119.0], [97.9, 298320.0], [98.0, 298412.0], [98.1, 298625.0], [98.2, 298711.0], [98.3, 298832.0], [98.4, 298911.0], [98.5, 299230.0], [98.6, 299239.0], [98.7, 299309.0], [98.8, 299405.0], [98.9, 299599.0], [99.0, 299904.0], [99.1, 299911.0], [99.2, 300146.0], [99.3, 300305.0], [99.4, 300318.0], [99.5, 300357.0], [99.6, 300506.0], [99.7, 300507.0], [99.8, 300605.0], [99.9, 300717.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6400.0, "maxY": 4.0, "series": [{"data": [[141600.0, 1.0], [300100.0, 1.0], [173600.0, 1.0], [180000.0, 2.0], [199200.0, 2.0], [212000.0, 1.0], [231200.0, 1.0], [256800.0, 1.0], [270400.0, 2.0], [296000.0, 1.0], [269900.0, 2.0], [282700.0, 1.0], [152100.0, 2.0], [295500.0, 1.0], [158500.0, 1.0], [171300.0, 1.0], [177700.0, 1.0], [228900.0, 1.0], [241700.0, 1.0], [260900.0, 1.0], [278600.0, 1.0], [291400.0, 1.0], [82700.0, 1.0], [85900.0, 1.0], [114700.0, 1.0], [117900.0, 1.0], [121100.0, 2.0], [265300.0, 1.0], [143400.0, 1.0], [149800.0, 1.0], [162600.0, 1.0], [201000.0, 1.0], [207400.0, 1.0], [226600.0, 1.0], [233000.0, 1.0], [273500.0, 1.0], [153900.0, 1.0], [40900.0, 1.0], [198700.0, 1.0], [52100.0, 1.0], [211500.0, 1.0], [56900.0, 1.0], [224300.0, 1.0], [58500.0, 1.0], [269400.0, 2.0], [282200.0, 1.0], [113800.0, 1.0], [117000.0, 1.0], [120200.0, 1.0], [268900.0, 2.0], [145200.0, 1.0], [151600.0, 1.0], [170800.0, 2.0], [209200.0, 1.0], [241200.0, 1.0], [260400.0, 1.0], [142900.0, 1.0], [289900.0, 1.0], [149300.0, 1.0], [168500.0, 1.0], [200500.0, 1.0], [206900.0, 1.0], [232500.0, 1.0], [285800.0, 1.0], [298600.0, 1.0], [87300.0, 1.0], [90500.0, 1.0], [93700.0, 2.0], [6400.0, 1.0], [106500.0, 1.0], [112900.0, 1.0], [116100.0, 1.0], [122500.0, 1.0], [8400.0, 1.0], [272500.0, 1.0], [9200.0, 1.0], [298100.0, 1.0], [10800.0, 1.0], [172600.0, 1.0], [179000.0, 1.0], [211000.0, 1.0], [223800.0, 1.0], [230200.0, 1.0], [243000.0, 1.0], [249400.0, 1.0], [16000.0, 1.0], [268400.0, 2.0], [294000.0, 1.0], [22400.0, 2.0], [23200.0, 1.0], [26400.0, 1.0], [27200.0, 1.0], [28800.0, 2.0], [30400.0, 1.0], [31200.0, 1.0], [280700.0, 1.0], [151100.0, 1.0], [163900.0, 1.0], [176700.0, 1.0], [48000.0, 1.0], [202300.0, 1.0], [51200.0, 1.0], [52800.0, 1.0], [56000.0, 1.0], [227900.0, 1.0], [59200.0, 2.0], [62400.0, 1.0], [247100.0, 1.0], [64000.0, 1.0], [259900.0, 1.0], [263800.0, 1.0], [89600.0, 1.0], [92800.0, 2.0], [99200.0, 1.0], [115200.0, 2.0], [121600.0, 1.0], [124800.0, 1.0], [134400.0, 1.0], [140800.0, 1.0], [172800.0, 1.0], [179200.0, 1.0], [192000.0, 1.0], [198400.0, 1.0], [230400.0, 1.0], [236800.0, 1.0], [268800.0, 1.0], [294400.0, 1.0], [144900.0, 2.0], [151300.0, 2.0], [164100.0, 1.0], [170500.0, 1.0], [176900.0, 1.0], [202500.0, 1.0], [253700.0, 1.0], [83100.0, 2.0], [86300.0, 1.0], [89500.0, 2.0], [92700.0, 2.0], [108700.0, 1.0], [115100.0, 1.0], [121500.0, 1.0], [289300.0, 1.0], [149000.0, 1.0], [181000.0, 1.0], [187400.0, 1.0], [200200.0, 1.0], [232200.0, 1.0], [271900.0, 1.0], [153100.0, 1.0], [297500.0, 1.0], [39500.0, 1.0], [172300.0, 2.0], [178700.0, 1.0], [45900.0, 1.0], [57100.0, 1.0], [58700.0, 2.0], [229900.0, 2.0], [236300.0, 2.0], [60300.0, 1.0], [242700.0, 1.0], [261900.0, 1.0], [79000.0, 1.0], [88600.0, 1.0], [91800.0, 1.0], [98200.0, 1.0], [107800.0, 2.0], [114200.0, 1.0], [123800.0, 2.0], [267300.0, 1.0], [144400.0, 1.0], [292900.0, 1.0], [170000.0, 1.0], [176400.0, 1.0], [202000.0, 1.0], [208400.0, 2.0], [240400.0, 1.0], [253200.0, 1.0], [259600.0, 2.0], [263200.0, 1.0], [262700.0, 2.0], [174100.0, 1.0], [199700.0, 1.0], [218900.0, 1.0], [225300.0, 1.0], [231700.0, 2.0], [271400.0, 2.0], [297000.0, 1.0], [84500.0, 1.0], [94100.0, 1.0], [113300.0, 1.0], [119700.0, 1.0], [270900.0, 1.0], [152600.0, 1.0], [296500.0, 1.0], [171800.0, 1.0], [178200.0, 1.0], [210200.0, 1.0], [229400.0, 1.0], [242200.0, 1.0], [261400.0, 2.0], [266800.0, 1.0], [24100.0, 1.0], [24900.0, 2.0], [26500.0, 1.0], [27300.0, 1.0], [28100.0, 1.0], [28900.0, 1.0], [29700.0, 2.0], [30500.0, 1.0], [32100.0, 2.0], [137500.0, 1.0], [266300.0, 1.0], [291900.0, 1.0], [150300.0, 1.0], [175900.0, 1.0], [46600.0, 1.0], [182300.0, 1.0], [57800.0, 2.0], [233500.0, 1.0], [239900.0, 2.0], [62600.0, 1.0], [259100.0, 1.0], [262200.0, 1.0], [70800.0, 1.0], [300600.0, 1.0], [86800.0, 1.0], [90000.0, 3.0], [106000.0, 1.0], [112400.0, 2.0], [122000.0, 2.0], [264900.0, 1.0], [143200.0, 2.0], [290500.0, 1.0], [181600.0, 1.0], [188000.0, 2.0], [220000.0, 1.0], [299200.0, 2.0], [140900.0, 1.0], [147300.0, 1.0], [298700.0, 1.0], [172900.0, 1.0], [198500.0, 1.0], [211300.0, 1.0], [230500.0, 1.0], [294600.0, 1.0], [83500.0, 1.0], [86700.0, 1.0], [112300.0, 1.0], [170600.0, 1.0], [215400.0, 1.0], [241000.0, 2.0], [260200.0, 1.0], [277200.0, 1.0], [142700.0, 1.0], [155500.0, 1.0], [174700.0, 1.0], [181100.0, 1.0], [49300.0, 1.0], [200300.0, 1.0], [52500.0, 1.0], [55700.0, 1.0], [57300.0, 1.0], [58900.0, 1.0], [63700.0, 1.0], [108200.0, 1.0], [111400.0, 1.0], [114600.0, 1.0], [127400.0, 1.0], [130600.0, 1.0], [134000.0, 1.0], [272100.0, 2.0], [146800.0, 1.0], [297700.0, 1.0], [166000.0, 1.0], [178800.0, 1.0], [204400.0, 1.0], [210800.0, 1.0], [223600.0, 1.0], [236400.0, 1.0], [262000.0, 1.0], [268000.0, 1.0], [293600.0, 1.0], [138100.0, 1.0], [293100.0, 1.0], [150900.0, 1.0], [163700.0, 1.0], [253300.0, 1.0], [259700.0, 1.0], [68900.0, 1.0], [78500.0, 1.0], [84900.0, 2.0], [88100.0, 1.0], [91300.0, 1.0], [100900.0, 1.0], [116900.0, 1.0], [129700.0, 1.0], [142200.0, 2.0], [288500.0, 1.0], [148600.0, 1.0], [180600.0, 1.0], [193400.0, 1.0], [206200.0, 1.0], [238200.0, 1.0], [244600.0, 1.0], [297200.0, 1.0], [21000.0, 1.0], [21800.0, 1.0], [23400.0, 2.0], [25800.0, 2.0], [27400.0, 1.0], [28200.0, 2.0], [29000.0, 1.0], [31400.0, 1.0], [32200.0, 1.0], [133500.0, 1.0], [271100.0, 1.0], [296700.0, 1.0], [159100.0, 1.0], [171900.0, 1.0], [184700.0, 1.0], [51600.0, 2.0], [210300.0, 1.0], [58000.0, 1.0], [229500.0, 1.0], [59600.0, 1.0], [61200.0, 1.0], [242300.0, 1.0], [62800.0, 1.0], [261500.0, 1.0], [267000.0, 1.0], [292600.0, 1.0], [74400.0, 1.0], [84000.0, 1.0], [109600.0, 1.0], [116000.0, 1.0], [142400.0, 1.0], [288900.0, 1.0], [148800.0, 1.0], [174400.0, 1.0], [180800.0, 2.0], [212800.0, 1.0], [232000.0, 1.0], [238400.0, 1.0], [297600.0, 1.0], [146500.0, 1.0], [159300.0, 1.0], [172100.0, 1.0], [197700.0, 1.0], [204100.0, 1.0], [210500.0, 1.0], [229700.0, 1.0], [236100.0, 1.0], [261700.0, 1.0], [293000.0, 1.0], [77500.0, 1.0], [83900.0, 2.0], [90300.0, 1.0], [112700.0, 1.0], [115900.0, 1.0], [122300.0, 1.0], [144200.0, 1.0], [169800.0, 2.0], [201800.0, 2.0], [214600.0, 1.0], [262300.0, 2.0], [141900.0, 1.0], [300700.0, 1.0], [46300.0, 1.0], [47900.0, 1.0], [199500.0, 1.0], [52700.0, 1.0], [54300.0, 1.0], [57500.0, 1.0], [59100.0, 1.0], [231500.0, 1.0], [237900.0, 2.0], [244300.0, 1.0], [62300.0, 1.0], [271000.0, 1.0], [296600.0, 2.0], [79800.0, 1.0], [83000.0, 1.0], [86200.0, 1.0], [99000.0, 1.0], [108600.0, 1.0], [111800.0, 2.0], [121400.0, 1.0], [270500.0, 1.0], [203600.0, 1.0], [210000.0, 1.0], [248400.0, 1.0], [261200.0, 1.0], [137300.0, 1.0], [265900.0, 1.0], [291500.0, 1.0], [156500.0, 1.0], [182100.0, 1.0], [69300.0, 1.0], [82100.0, 2.0], [91700.0, 1.0], [107700.0, 1.0], [110900.0, 1.0], [123700.0, 1.0], [141400.0, 2.0], [179800.0, 1.0], [199000.0, 1.0], [205400.0, 1.0], [231000.0, 1.0], [256600.0, 1.0], [17100.0, 1.0], [282800.0, 1.0], [295600.0, 2.0], [21900.0, 1.0], [22700.0, 1.0], [25100.0, 1.0], [25900.0, 1.0], [26700.0, 1.0], [27500.0, 1.0], [29900.0, 1.0], [32300.0, 1.0], [282300.0, 1.0], [56600.0, 1.0], [59800.0, 1.0], [241500.0, 2.0], [260700.0, 2.0], [78000.0, 1.0], [84400.0, 2.0], [87600.0, 1.0], [144800.0, 1.0], [170400.0, 1.0], [183200.0, 1.0], [208800.0, 2.0], [240800.0, 2.0], [260000.0, 1.0], [289600.0, 1.0], [136100.0, 1.0], [142500.0, 2.0], [289100.0, 1.0], [200100.0, 1.0], [232100.0, 1.0], [297800.0, 1.0], [87500.0, 2.0], [90700.0, 1.0], [97100.0, 1.0], [113100.0, 1.0], [116300.0, 2.0], [119500.0, 1.0], [122700.0, 1.0], [271700.0, 1.0], [153000.0, 1.0], [297300.0, 1.0], [178600.0, 1.0], [210600.0, 2.0], [223400.0, 1.0], [261800.0, 1.0], [280400.0, 1.0], [137900.0, 1.0], [144300.0, 1.0], [279900.0, 1.0], [292700.0, 1.0], [36900.0, 1.0], [150700.0, 1.0], [157100.0, 1.0], [163500.0, 2.0], [201900.0, 1.0], [54500.0, 1.0], [56100.0, 1.0], [57700.0, 1.0], [60900.0, 1.0], [240300.0, 4.0], [253100.0, 1.0], [288600.0, 1.0], [86600.0, 1.0], [93000.0, 1.0], [112200.0, 1.0], [118600.0, 1.0], [262500.0, 1.0], [180400.0, 1.0], [206000.0, 1.0], [271200.0, 1.0], [270700.0, 1.0], [146100.0, 1.0], [152500.0, 1.0], [296300.0, 1.0], [171700.0, 1.0], [242100.0, 2.0], [261300.0, 1.0], [266600.0, 1.0], [292200.0, 1.0], [82500.0, 1.0], [88900.0, 2.0], [92100.0, 1.0], [114500.0, 1.0], [120900.0, 1.0], [137400.0, 1.0], [143800.0, 2.0], [291700.0, 1.0], [150200.0, 1.0], [169400.0, 1.0], [175800.0, 1.0], [182200.0, 1.0], [201400.0, 2.0], [207800.0, 1.0], [239800.0, 1.0], [246200.0, 2.0], [252600.0, 1.0], [18000.0, 1.0], [22800.0, 1.0], [23600.0, 1.0], [24400.0, 1.0], [26000.0, 1.0], [26800.0, 1.0], [28400.0, 1.0], [30000.0, 1.0], [30800.0, 2.0], [31600.0, 1.0], [32400.0, 1.0], [32800.0, 1.0], [299900.0, 2.0], [47200.0, 1.0], [192700.0, 1.0], [52000.0, 1.0], [205500.0, 1.0], [53600.0, 1.0], [55200.0, 2.0], [218300.0, 1.0], [58400.0, 1.0], [231100.0, 1.0], [60000.0, 1.0], [61600.0, 1.0], [63200.0, 1.0], [270200.0, 2.0], [295800.0, 1.0], [88000.0, 1.0], [94400.0, 1.0], [113600.0, 4.0], [123200.0, 1.0], [126400.0, 1.0], [266500.0, 1.0], [144000.0, 2.0], [169600.0, 2.0], [188800.0, 1.0], [201600.0, 1.0], [208000.0, 1.0], [214400.0, 1.0], [262400.0, 1.0], [275200.0, 1.0], [288000.0, 1.0], [148100.0, 2.0], [300300.0, 3.0], [199300.0, 2.0], [205700.0, 1.0], [237700.0, 1.0], [296200.0, 1.0], [81500.0, 1.0], [84700.0, 1.0], [87900.0, 1.0], [113500.0, 1.0], [116700.0, 1.0], [119900.0, 1.0], [123100.0, 1.0], [270100.0, 1.0], [145800.0, 1.0], [171400.0, 1.0], [177800.0, 1.0], [209800.0, 1.0], [235400.0, 1.0], [266000.0, 1.0], [265500.0, 1.0], [143500.0, 1.0], [181900.0, 1.0], [188300.0, 1.0], [53100.0, 2.0], [56300.0, 1.0], [57900.0, 1.0], [59500.0, 1.0], [61100.0, 1.0], [239500.0, 1.0], [62700.0, 1.0], [83800.0, 1.0], [87000.0, 1.0], [93400.0, 1.0], [112600.0, 1.0], [115800.0, 1.0], [273700.0, 1.0], [141200.0, 2.0], [299300.0, 1.0], [166800.0, 1.0], [173200.0, 1.0], [179600.0, 1.0], [186000.0, 1.0], [192400.0, 1.0], [198800.0, 1.0], [218000.0, 1.0], [230800.0, 1.0], [269600.0, 2.0], [295200.0, 2.0], [269100.0, 2.0], [294700.0, 1.0], [151700.0, 1.0], [170900.0, 1.0], [260500.0, 1.0], [66900.0, 1.0], [86100.0, 2.0], [92500.0, 1.0], [111700.0, 1.0], [114900.0, 1.0], [118100.0, 2.0], [121300.0, 1.0], [143000.0, 1.0], [149400.0, 1.0], [181400.0, 1.0], [232600.0, 1.0], [258200.0, 1.0], [298800.0, 1.0], [22100.0, 1.0], [22900.0, 1.0], [24500.0, 1.0], [25300.0, 1.0], [26900.0, 1.0], [27700.0, 1.0], [28500.0, 1.0], [29300.0, 2.0], [30900.0, 1.0], [31700.0, 1.0], [32500.0, 1.0], [33000.0, 1.0], [147100.0, 1.0], [298300.0, 1.0], [172700.0, 1.0], [198300.0, 1.0], [204700.0, 1.0], [52200.0, 1.0], [211100.0, 1.0], [53800.0, 1.0], [55400.0, 1.0], [57000.0, 1.0], [223900.0, 1.0], [60200.0, 1.0], [63400.0, 1.0], [78800.0, 1.0], [88400.0, 3.0], [114000.0, 1.0], [120400.0, 1.0], [123600.0, 1.0], [152800.0, 1.0], [296900.0, 2.0], [172000.0, 1.0], [178400.0, 1.0], [216800.0, 1.0], [223200.0, 1.0], [242400.0, 1.0], [144100.0, 1.0], [292300.0, 1.0], [150500.0, 2.0], [182500.0, 1.0], [252900.0, 1.0], [259300.0, 2.0], [85100.0, 1.0], [104300.0, 1.0], [113900.0, 1.0], [117100.0, 1.0], [120300.0, 1.0], [123500.0, 1.0], [135400.0, 1.0], [274900.0, 1.0], [141800.0, 1.0], [287700.0, 1.0], [300500.0, 2.0], [167400.0, 1.0], [180200.0, 2.0], [212200.0, 1.0], [231400.0, 1.0], [244200.0, 1.0], [296400.0, 1.0], [139500.0, 1.0], [283100.0, 1.0], [38900.0, 1.0], [152300.0, 1.0], [295900.0, 1.0], [165100.0, 1.0], [171500.0, 2.0], [209900.0, 2.0], [53300.0, 1.0], [58100.0, 2.0], [59700.0, 2.0], [241900.0, 1.0], [62900.0, 1.0], [291800.0, 1.0], [77800.0, 1.0], [119400.0, 1.0], [143600.0, 1.0], [291300.0, 1.0], [175600.0, 1.0], [182000.0, 1.0], [201200.0, 1.0], [233200.0, 1.0], [147700.0, 1.0], [299500.0, 1.0], [173300.0, 1.0], [192500.0, 1.0], [205300.0, 1.0], [211700.0, 1.0], [230900.0, 1.0], [237300.0, 1.0], [269800.0, 1.0], [295400.0, 1.0], [83300.0, 2.0], [86500.0, 1.0], [89700.0, 1.0], [112100.0, 3.0], [128100.0, 1.0], [145400.0, 2.0], [294900.0, 2.0], [151800.0, 1.0], [171000.0, 1.0], [177400.0, 1.0], [196600.0, 1.0], [203000.0, 1.0], [209400.0, 2.0], [241400.0, 1.0], [254200.0, 1.0], [16600.0, 1.0], [19000.0, 1.0], [20600.0, 1.0], [22200.0, 2.0], [23000.0, 1.0], [23800.0, 2.0], [25400.0, 1.0], [26200.0, 1.0], [27000.0, 1.0], [27800.0, 1.0], [29400.0, 1.0], [30200.0, 1.0], [290300.0, 1.0], [149500.0, 2.0], [175100.0, 1.0], [181500.0, 1.0], [47600.0, 1.0], [50800.0, 1.0], [200700.0, 2.0], [52400.0, 1.0], [54000.0, 1.0], [55600.0, 1.0], [57200.0, 1.0], [232700.0, 1.0], [60400.0, 1.0], [239100.0, 1.0], [62000.0, 1.0], [286200.0, 1.0], [76000.0, 1.0], [82400.0, 2.0], [85600.0, 1.0], [88800.0, 1.0], [92000.0, 1.0], [114400.0, 1.0], [145600.0, 1.0], [282500.0, 1.0], [171200.0, 1.0], [209600.0, 1.0], [241600.0, 1.0], [291200.0, 2.0], [290700.0, 2.0], [149700.0, 1.0], [175300.0, 1.0], [181700.0, 1.0], [194500.0, 1.0], [200900.0, 2.0], [207300.0, 1.0], [232900.0, 2.0], [273800.0, 1.0], [299400.0, 1.0], [82300.0, 1.0], [85500.0, 2.0], [88700.0, 2.0], [111100.0, 1.0], [117500.0, 1.0], [141000.0, 1.0], [298900.0, 1.0], [166600.0, 1.0], [179400.0, 1.0], [192200.0, 1.0], [205000.0, 1.0], [211400.0, 1.0], [230600.0, 1.0], [243400.0, 1.0], [294300.0, 1.0], [51900.0, 1.0], [209100.0, 1.0], [53500.0, 1.0], [55100.0, 1.0], [56700.0, 1.0], [59900.0, 1.0], [61500.0, 1.0], [63100.0, 1.0], [260300.0, 1.0], [290200.0, 1.0], [84600.0, 1.0], [107000.0, 1.0], [119800.0, 1.0], [123000.0, 2.0], [142800.0, 1.0], [289700.0, 1.0], [181200.0, 1.0], [200400.0, 1.0], [206800.0, 1.0], [238800.0, 1.0], [298400.0, 1.0], [140500.0, 3.0], [146900.0, 1.0], [297900.0, 1.0], [172500.0, 1.0], [185300.0, 1.0], [210900.0, 1.0], [230100.0, 2.0], [242900.0, 1.0], [249300.0, 1.0], [293800.0, 1.0], [83700.0, 2.0], [86900.0, 1.0], [118900.0, 1.0], [122100.0, 1.0], [151000.0, 1.0], [170200.0, 2.0], [202200.0, 1.0], [208600.0, 1.0], [234200.0, 1.0], [240600.0, 3.0], [259800.0, 1.0], [289200.0, 1.0], [23100.0, 1.0], [24700.0, 2.0], [26300.0, 1.0], [27100.0, 1.0], [27900.0, 2.0], [29500.0, 2.0], [31900.0, 1.0], [32700.0, 1.0], [263100.0, 1.0], [275900.0, 1.0], [142300.0, 1.0], [288700.0, 1.0], [199900.0, 2.0], [54200.0, 1.0], [55800.0, 1.0], [57400.0, 1.0], [59000.0, 1.0], [231900.0, 1.0], [60600.0, 2.0], [251100.0, 1.0], [63800.0, 1.0], [271800.0, 1.0], [297400.0, 1.0], [86000.0, 1.0], [92400.0, 1.0], [114800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 300700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 51.5, "minX": 1.6247787E12, "maxY": 951.0, "series": [{"data": [[1.62477888E12, 402.505], [1.62477894E12, 202.51000000000022], [1.62477876E12, 802.5202020202019], [1.62477882E12, 603.0298507462688], [1.6247787E12, 951.0], [1.624779E12, 51.5]], "isOverall": false, "label": "testinginstance", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.624779E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6445.0, "minX": 1.0, "maxY": 300717.0, "series": [{"data": [[2.0, 300605.0], [3.0, 300507.0], [4.0, 300506.0], [5.0, 300318.0], [6.0, 300305.0], [7.0, 300357.0], [8.0, 300146.0], [9.0, 299904.0], [10.0, 299911.0], [11.0, 299599.0], [12.0, 299405.0], [13.0, 299309.0], [14.0, 299239.0], [15.0, 299230.0], [16.0, 298911.0], [17.0, 298832.0], [18.0, 298711.0], [19.0, 298625.0], [20.0, 298412.0], [21.0, 298320.0], [22.0, 298119.0], [23.0, 297912.0], [24.0, 297818.0], [25.0, 297739.0], [26.0, 297628.0], [27.0, 297539.0], [28.0, 297417.0], [29.0, 297336.0], [30.0, 297241.0], [31.0, 297019.0], [33.0, 296934.0], [32.0, 296929.0], [35.0, 296618.0], [34.0, 296709.0], [37.0, 296540.0], [36.0, 296610.0], [39.0, 296342.0], [38.0, 296416.0], [41.0, 296034.0], [40.0, 296251.0], [43.0, 295843.0], [42.0, 295940.0], [45.0, 295644.0], [44.0, 295650.0], [47.0, 295439.0], [46.0, 295545.0], [49.0, 295244.0], [48.0, 295252.0], [51.0, 294939.0], [50.0, 294950.0], [53.0, 294648.0], [52.0, 294745.0], [55.0, 294352.0], [54.0, 294421.0], [57.0, 293844.0], [56.0, 294044.0], [59.0, 293155.0], [58.0, 293651.0], [61.0, 292942.0], [60.0, 293039.0], [63.0, 292662.0], [62.0, 292754.0], [67.0, 291850.0], [66.0, 291947.0], [65.0, 292250.0], [64.0, 292344.0], [71.0, 291377.0], [70.0, 291454.0], [69.0, 291550.0], [68.0, 291753.0], [75.0, 290751.0], [74.0, 290755.0], [73.0, 291250.0], [72.0, 291253.0], [79.0, 289959.0], [78.0, 290255.0], [77.0, 290355.0], [76.0, 290567.0], [83.0, 289257.0], [82.0, 289358.0], [81.0, 289656.0], [80.0, 289756.0], [87.0, 288658.0], [86.0, 288764.0], [85.0, 288959.0], [84.0, 289171.0], [91.0, 286263.0], [90.0, 287755.0], [89.0, 288053.0], [88.0, 288557.0], [95.0, 282766.0], [94.0, 282881.0], [93.0, 283161.0], [92.0, 285875.0], [99.0, 280765.0], [98.0, 282265.0], [97.0, 282371.0], [96.0, 282564.0], [103.0, 277270.0], [102.0, 278655.0], [101.0, 279959.0], [100.0, 280464.0], [107.0, 273868.0], [106.0, 274972.0], [105.0, 275261.0], [104.0, 275983.0], [111.0, 272177.0], [110.0, 272566.0], [109.0, 273575.0], [108.0, 273766.0], [115.0, 271767.0], [114.0, 271868.0], [113.0, 271969.0], [112.0, 272164.0], [119.0, 271170.0], [118.0, 271268.0], [117.0, 271465.0], [116.0, 271466.0], [123.0, 270562.0], [122.0, 270778.0], [121.0, 270982.0], [120.0, 271084.0], [127.0, 270277.0], [126.0, 270279.0], [125.0, 270404.0], [124.0, 270476.0], [135.0, 269482.0], [134.0, 269484.0], [133.0, 269678.0], [132.0, 269681.0], [131.0, 269874.0], [130.0, 269967.0], [129.0, 269978.0], [128.0, 270177.0], [143.0, 268001.0], [142.0, 268484.0], [141.0, 268487.0], [140.0, 268881.0], [139.0, 268982.0], [138.0, 268991.0], [137.0, 269177.0], [136.0, 269190.0], [151.0, 265902.0], [150.0, 266081.0], [149.0, 266390.0], [148.0, 266582.0], [147.0, 266688.0], [146.0, 266889.0], [145.0, 267090.0], [144.0, 267395.0], [159.0, 262784.0], [158.0, 262790.0], [157.0, 263191.0], [156.0, 263289.0], [155.0, 263887.0], [154.0, 264984.0], [153.0, 265384.0], [152.0, 265589.0], [167.0, 261895.0], [166.0, 261905.0], [165.0, 262023.0], [164.0, 262304.0], [163.0, 262283.0], [162.0, 262381.0], [161.0, 262426.0], [160.0, 262591.0], [175.0, 260790.0], [174.0, 260995.0], [173.0, 261204.0], [172.0, 261396.0], [171.0, 261411.0], [170.0, 261487.0], [169.0, 261595.0], [168.0, 261703.0], [183.0, 259892.0], [182.0, 259993.0], [181.0, 260092.0], [180.0, 260289.0], [179.0, 260304.0], [178.0, 260488.0], [177.0, 260584.0], [176.0, 260703.0], [191.0, 256891.0], [190.0, 258294.0], [189.0, 259190.0], [188.0, 259362.0], [187.0, 259304.0], [186.0, 259609.0], [185.0, 259611.0], [184.0, 259793.0], [199.0, 252610.0], [198.0, 252910.0], [197.0, 253104.0], [196.0, 253220.0], [195.0, 253307.0], [194.0, 253708.0], [193.0, 254208.0], [192.0, 256606.0], [207.0, 244612.0], [206.0, 246208.0], [205.0, 246209.0], [204.0, 247103.0], [203.0, 248417.0], [202.0, 249308.0], [201.0, 249498.0], [200.0, 251199.0], [215.0, 242326.0], [214.0, 242427.0], [213.0, 242725.0], [212.0, 242906.0], [211.0, 243006.0], [210.0, 243430.0], [209.0, 244205.0], [208.0, 244315.0], [223.0, 241532.0], [222.0, 241540.0], [221.0, 241630.0], [220.0, 241741.0], [219.0, 241908.0], [218.0, 242109.0], [217.0, 242117.0], [216.0, 242207.0], [231.0, 240635.0], [230.0, 240637.0], [229.0, 240828.0], [228.0, 240836.0], [227.0, 241017.5], [225.0, 241206.0], [224.0, 241436.0], [239.0, 239921.0], [238.0, 239925.0], [237.0, 240333.0], [236.0, 240338.0], [234.0, 240342.0], [233.0, 240442.0], [232.0, 240628.0], [247.0, 237932.0], [246.0, 237940.0], [245.0, 238239.0], [244.0, 238444.0], [243.0, 238855.0], [242.0, 239134.0], [241.0, 239540.0], [240.0, 239839.0], [255.0, 235435.0], [254.0, 236149.0], [253.0, 236334.0], [252.0, 236349.0], [251.0, 236444.0], [250.0, 236844.0], [249.0, 237345.0], [248.0, 237746.0], [270.0, 231752.0], [271.0, 231551.0], [269.0, 231759.0], [268.0, 231956.0], [267.0, 232040.0], [266.0, 232153.0], [265.0, 232250.0], [264.0, 232538.0], [263.0, 232649.0], [257.0, 233550.0], [256.0, 234236.0], [259.0, 233041.0], [258.0, 233244.0], [262.0, 232746.0], [261.0, 232944.0], [260.0, 232951.0], [286.0, 229763.0], [287.0, 229565.0], [285.0, 229965.0], [284.0, 229967.0], [283.0, 230155.0], [282.0, 230170.0], [281.0, 230259.0], [280.0, 230455.0], [279.0, 230560.0], [273.0, 231270.0], [272.0, 231458.0], [275.0, 231055.0], [274.0, 231165.0], [278.0, 230658.0], [277.0, 230848.0], [276.0, 230957.0], [302.0, 218056.0], [303.0, 216882.0], [301.0, 218370.0], [300.0, 218973.0], [299.0, 220073.0], [298.0, 223263.0], [297.0, 223486.0], [296.0, 223673.0], [295.0, 223865.0], [289.0, 228962.0], [288.0, 229461.0], [291.0, 226648.0], [290.0, 227973.0], [294.0, 223970.0], [293.0, 224358.0], [292.0, 225362.0], [318.0, 210682.0], [319.0, 210682.0], [317.0, 210876.0], [316.0, 210978.0], [315.0, 211078.0], [314.0, 211179.0], [313.0, 211379.0], [312.0, 211473.0], [311.0, 211588.0], [305.0, 214680.0], [304.0, 215474.0], [307.0, 212878.0], [306.0, 214476.0], [310.0, 211789.0], [309.0, 212071.0], [308.0, 212276.0], [334.0, 208679.0], [335.0, 208486.0], [333.0, 208885.0], [332.0, 208890.0], [331.0, 209100.0], [330.0, 209288.0], [329.0, 209480.0], [328.0, 209494.0], [327.0, 209692.0], [321.0, 210378.0], [320.0, 210583.0], [323.0, 210080.0], [322.0, 210280.0], [326.0, 209892.0], [325.0, 209984.0], [324.0, 209988.0], [350.0, 204799.0], [351.0, 204409.0], [349.0, 205010.0], [348.0, 205330.0], [347.0, 205400.0], [346.0, 205564.0], [345.0, 205788.0], [344.0, 206088.0], [343.0, 206292.0], [337.0, 208086.0], [336.0, 208403.0], [339.0, 207499.0], [338.0, 207800.0], [342.0, 206837.0], [341.0, 206902.0], [340.0, 207305.0], [366.0, 201016.0], [367.0, 200928.0], [365.0, 201228.0], [364.0, 201416.0], [363.0, 201424.0], [362.0, 201633.0], [361.0, 201811.0], [360.0, 201817.0], [359.0, 201914.0], [353.0, 203601.0], [352.0, 204101.0], [355.0, 202511.0], [354.0, 203014.0], [358.0, 202011.0], [357.0, 202211.0], [356.0, 202307.0], [382.0, 199242.0], [383.0, 199234.0], [381.0, 199331.0], [380.0, 199339.0], [379.0, 199531.0], [378.0, 199719.0], [377.0, 199925.0], [376.0, 199929.0], [375.0, 200128.0], [369.0, 200723.0], [368.0, 200914.0], [371.0, 200523.0], [370.0, 200719.0], [374.0, 200219.0], [373.0, 200322.0], [372.0, 200421.0], [398.0, 192043.0], [399.0, 188839.0], [397.0, 192239.0], [396.0, 192438.0], [395.0, 192534.0], [394.0, 192738.0], [393.0, 193442.0], [392.0, 194537.0], [391.0, 196636.0], [385.0, 198845.0], [384.0, 199025.0], [387.0, 198539.0], [386.0, 198724.0], [390.0, 197726.0], [389.0, 198309.0], [388.0, 198446.0], [414.0, 181751.0], [415.0, 181657.0], [413.0, 181952.0], [412.0, 182054.0], [411.0, 182156.0], [410.0, 182258.0], [409.0, 182358.0], [408.0, 182558.0], [407.0, 183243.0], [400.0, 188349.0], [403.0, 187443.0], [402.0, 188040.5], [406.0, 184748.0], [405.0, 185344.0], [404.0, 186047.0], [430.0, 179660.0], [431.0, 179450.0], [429.0, 179858.0], [428.0, 180063.0], [427.0, 180067.0], [426.0, 180259.0], [425.0, 180267.0], [424.0, 180465.0], [423.0, 180657.0], [417.0, 181469.0], [416.0, 181558.0], [419.0, 181146.0], [418.0, 181255.0], [422.0, 180853.0], [421.0, 180852.0], [420.0, 181068.0], [446.0, 175870.0], [447.0, 175669.0], [445.0, 175986.0], [444.0, 176487.0], [443.0, 176775.0], [442.0, 176959.0], [441.0, 177480.0], [440.0, 177767.0], [439.0, 177886.0], [433.0, 179060.0], [432.0, 179268.0], [435.0, 178759.0], [434.0, 178859.0], [438.0, 178271.0], [437.0, 178471.0], [436.0, 178680.0], [462.0, 172385.0], [463.0, 172185.0], [461.0, 172394.0], [460.0, 172577.0], [459.0, 172681.0], [458.0, 172774.0], [457.0, 172878.0], [456.0, 172986.0], [455.0, 173279.0], [449.0, 175176.0], [448.0, 175382.0], [451.0, 174480.0], [450.0, 174772.0], [454.0, 173379.0], [453.0, 173679.0], [452.0, 174178.0], [478.0, 170505.0], [479.0, 170402.0], [477.0, 170699.0], [476.0, 170805.0], [475.0, 170899.0], [474.0, 170996.0], [473.0, 171088.0], [472.0, 171296.0], [471.0, 171303.0], [465.0, 171986.0], [464.0, 172088.0], [467.0, 171789.0], [466.0, 171899.0], [470.0, 171490.0], [469.0, 171507.0], [468.0, 171589.0], [494.0, 164164.0], [495.0, 163919.0], [493.0, 165112.0], [492.0, 166028.0], [491.0, 166618.0], [490.0, 166809.0], [489.0, 167412.0], [488.0, 168505.0], [487.0, 169403.0], [481.0, 170206.0], [480.0, 170208.0], [483.0, 169814.0], [482.0, 170030.0], [486.0, 169612.0], [485.0, 169616.0], [484.0, 169808.0], [510.0, 152653.0], [511.0, 152577.0], [509.0, 153193.0], [508.0, 152820.0], [507.0, 153024.0], [506.0, 153918.0], [505.0, 155518.0], [504.0, 156522.0], [503.0, 157131.0], [497.0, 163593.0], [496.0, 163717.0], [499.0, 162617.0], [498.0, 163509.0], [502.0, 158515.0], [501.0, 159111.0], [500.0, 159319.0], [540.0, 147387.0], [543.0, 146898.0], [529.0, 149777.0], [528.0, 149888.0], [531.0, 149498.0], [530.0, 149577.0], [533.0, 149595.0], [532.0, 149302.0], [542.0, 146901.0], [541.0, 147197.0], [539.0, 147792.0], [538.0, 148194.0], [537.0, 148196.0], [536.0, 148681.0], [527.0, 150280.0], [513.0, 152173.0], [512.0, 152376.0], [515.0, 151873.0], [514.0, 152172.0], [517.0, 151678.0], [516.0, 151778.0], [519.0, 151376.0], [518.0, 151391.0], [526.0, 150399.0], [525.0, 150589.0], [524.0, 150588.0], [523.0, 150785.0], [522.0, 150972.0], [521.0, 151087.0], [520.0, 151177.0], [535.0, 148890.0], [534.0, 149094.0], [569.0, 142898.0], [574.0, 142353.0], [575.0, 142311.0], [562.0, 143699.0], [561.0, 143802.0], [564.0, 143096.0], [563.0, 143598.0], [572.0, 142596.0], [571.0, 142401.0], [570.0, 142799.0], [568.0, 143054.5], [551.0, 144989.0], [550.0, 145412.0], [549.0, 145605.0], [548.0, 145296.0], [547.0, 145492.0], [546.0, 145889.0], [545.0, 146193.0], [544.0, 146593.0], [559.0, 144005.0], [558.0, 144194.0], [557.0, 144403.0], [556.0, 144097.0], [555.0, 144200.0], [554.0, 144302.0], [553.0, 144902.0], [552.0, 144889.0], [566.0, 143210.0], [565.0, 143400.0], [604.0, 127407.0], [607.0, 123817.0], [593.0, 137515.0], [592.0, 137994.0], [595.0, 137300.0], [594.0, 137497.0], [597.0, 135496.0], [596.0, 136105.0], [606.0, 124892.0], [605.0, 126493.0], [603.0, 128104.0], [602.0, 129798.0], [601.0, 130604.0], [600.0, 133513.0], [591.0, 138103.0], [577.0, 141806.0], [576.0, 142299.0], [580.0, 141549.5], [578.0, 141902.0], [583.0, 141017.0], [582.0, 141351.0], [590.0, 139591.0], [589.0, 140509.0], [588.0, 140518.0], [587.0, 140525.0], [586.0, 140994.0], [585.0, 140890.0], [584.0, 141206.0], [599.0, 134086.0], [598.0, 134407.0], [636.0, 119498.0], [639.0, 118116.0], [625.0, 121120.0], [624.0, 121421.0], [627.0, 121199.0], [626.0, 121388.0], [629.0, 120416.0], [628.0, 120986.0], [638.0, 118621.0], [637.0, 118999.0], [635.0, 119590.0], [634.0, 119791.0], [633.0, 119893.0], [632.0, 119994.0], [623.0, 121512.0], [609.0, 123898.0], [608.0, 123618.0], [611.0, 123591.0], [610.0, 123701.0], [613.0, 123013.0], [612.0, 123121.0], [615.0, 123013.0], [614.0, 123207.0], [622.0, 121641.0], [621.0, 122101.0], [620.0, 122021.0], [619.0, 122020.0], [618.0, 122391.0], [617.0, 122591.0], [616.0, 122796.0], [631.0, 120388.0], [630.0, 120226.0], [668.0, 113688.0], [671.0, 113387.0], [657.0, 114990.0], [656.0, 114746.0], [659.0, 114806.0], [658.0, 114627.0], [661.0, 114492.0], [660.0, 114592.0], [670.0, 113586.0], [669.0, 113687.0], [667.0, 113639.0], [666.0, 113647.0], [665.0, 113855.0], [664.0, 113933.0], [655.0, 115290.0], [641.0, 117997.0], [640.0, 118186.0], [643.0, 117127.0], [642.0, 117593.0], [645.0, 116985.0], [644.0, 117027.0], [647.0, 116338.0], [646.0, 116788.0], [654.0, 115130.0], [653.0, 115243.0], [652.0, 115884.0], [651.0, 115996.0], [650.0, 116035.0], [649.0, 116127.0], [648.0, 116394.0], [663.0, 114294.0], [662.0, 114044.0], [700.0, 100980.0], [703.0, 98299.0], [689.0, 109652.0], [688.0, 110947.0], [691.0, 108677.0], [690.0, 108787.0], [693.0, 107864.0], [692.0, 108286.0], [702.0, 99001.0], [701.0, 99264.0], [699.0, 104357.0], [698.0, 106092.0], [697.0, 106523.0], [696.0, 107088.0], [687.0, 111147.0], [673.0, 112758.0], [672.0, 113188.0], [675.0, 112648.0], [674.0, 112993.0], [677.0, 112354.0], [676.0, 112446.0], [679.0, 112290.0], [678.0, 112486.0], [686.0, 111498.0], [685.0, 111780.0], [684.0, 111845.0], [683.0, 112100.0], [682.0, 111857.0], [681.0, 112190.5], [695.0, 107778.0], [694.0, 107897.0], [729.0, 89769.0], [734.0, 88779.0], [735.0, 88767.0], [721.0, 91379.0], [720.0, 91880.0], [723.0, 90563.0], [722.0, 90759.0], [725.0, 90068.0], [724.0, 90373.0], [733.0, 88967.0], [732.0, 88968.0], [731.0, 89565.0], [728.0, 89661.0], [711.0, 92888.0], [710.0, 93059.0], [709.0, 93485.0], [708.0, 93785.0], [707.0, 93755.0], [706.0, 94178.0], [705.0, 94486.0], [704.0, 97154.0], [719.0, 91766.0], [718.0, 92139.0], [717.0, 92067.0], [716.0, 92493.0], [715.0, 92593.0], [714.0, 92780.0], [713.0, 92883.0], [712.0, 92752.0], [727.0, 90068.0], [726.0, 90069.0], [764.0, 84981.0], [767.0, 84648.0], [753.0, 86652.0], [752.0, 86749.0], [755.0, 86351.0], [754.0, 86285.0], [757.0, 86084.0], [756.0, 86164.0], [766.0, 84751.0], [765.0, 84946.0], [763.0, 85198.0], [762.0, 85550.0], [761.0, 85579.0], [760.0, 85673.0], [751.0, 86573.0], [737.0, 88473.0], [736.0, 88859.0], [739.0, 88460.0], [738.0, 88661.0], [741.0, 88078.0], [740.0, 88455.0], [743.0, 87967.0], [742.0, 88161.0], [750.0, 86955.0], [749.0, 86894.0], [748.0, 87082.0], [747.0, 87372.0], [746.0, 87560.0], [745.0, 87572.0], [744.0, 87671.0], [759.0, 85948.0], [758.0, 86148.0], [796.0, 77890.0], [799.0, 74494.0], [785.0, 82486.0], [784.0, 82580.0], [787.0, 82191.0], [786.0, 82464.0], [789.0, 82146.0], [788.0, 82346.0], [798.0, 76099.0], [797.0, 77537.0], [795.0, 78072.0], [794.0, 78540.0], [793.0, 78844.0], [792.0, 79048.0], [783.0, 82797.0], [768.0, 84550.0], [770.0, 84456.0], [769.0, 84457.0], [772.0, 83983.0], [771.0, 83990.0], [774.0, 83849.0], [773.0, 84047.0], [782.0, 83052.0], [781.0, 83154.0], [780.0, 83181.0], [779.0, 83543.0], [778.0, 83382.0], [777.0, 83390.0], [776.0, 83747.0], [791.0, 79887.0], [790.0, 81555.0], [828.0, 59929.0], [831.0, 59718.0], [817.0, 61603.0], [816.0, 62094.0], [819.0, 61238.0], [818.0, 61535.0], [821.0, 60904.0], [820.0, 61146.0], [830.0, 59721.0], [829.0, 59855.0], [827.0, 60021.0], [826.0, 60259.0], [825.0, 60325.0], [824.0, 60415.0], [815.0, 62357.0], [801.0, 69302.0], [800.0, 70846.0], [803.0, 66995.0], [802.0, 68950.0], [805.0, 63801.0], [804.0, 64096.0], [807.0, 63400.0], [806.0, 63752.0], [814.0, 62400.0], [813.0, 62687.0], [811.0, 62812.0], [810.0, 62999.0], [809.0, 63111.0], [808.0, 63200.0], [823.0, 60651.0], [822.0, 60604.0], [860.0, 56122.0], [863.0, 55831.0], [849.0, 57702.0], [848.0, 57828.0], [851.0, 57414.0], [850.0, 57537.0], [853.0, 57253.0], [852.0, 57366.0], [862.0, 55734.0], [861.0, 56028.0], [859.0, 56321.0], [858.0, 56624.0], [857.0, 56723.0], [856.0, 56939.0], [847.0, 57860.0], [833.0, 59583.0], [835.0, 59205.0], [834.0, 59214.0], [837.0, 59044.0], [836.0, 59142.0], [839.0, 58769.0], [838.0, 58940.0], [846.0, 57917.0], [845.0, 58055.0], [844.0, 58124.0], [843.0, 58129.0], [842.0, 58437.0], [841.0, 58548.0], [840.0, 58751.0], [855.0, 57062.0], [854.0, 57118.0], [892.0, 48028.0], [895.0, 47226.0], [881.0, 52536.0], [880.0, 52749.0], [883.0, 52235.0], [882.0, 52442.0], [885.0, 52036.0], [884.0, 52126.0], [894.0, 47630.0], [893.0, 47941.0], [891.0, 49340.0], [890.0, 50832.0], [889.0, 51230.0], [888.0, 51632.0], [879.0, 52858.0], [865.0, 55422.0], [864.0, 55651.0], [867.0, 55240.0], [866.0, 55226.0], [869.0, 54539.0], [868.0, 55129.0], [871.0, 54245.0], [870.0, 54328.0], [878.0, 53129.0], [877.0, 53133.0], [876.0, 53329.0], [875.0, 53534.0], [874.0, 53633.0], [873.0, 53849.0], [872.0, 54037.0], [887.0, 51629.0], [886.0, 51932.0], [924.0, 29958.0], [927.0, 29545.0], [913.0, 31739.0], [912.0, 31943.0], [915.0, 31443.0], [914.0, 31664.0], [917.0, 30949.0], [916.0, 31246.0], [926.0, 29744.0], [925.0, 29795.0], [923.0, 30051.0], [922.0, 30245.0], [921.0, 30452.0], [920.0, 30543.0], [911.0, 32140.0], [897.0, 46345.0], [896.0, 46628.0], [899.0, 40943.0], [898.0, 45933.0], [901.0, 38934.0], [900.0, 39545.0], [903.0, 33030.0], [902.0, 36927.0], [910.0, 32142.0], [909.0, 32248.0], [908.0, 32339.0], [907.0, 32438.0], [906.0, 32530.0], [905.0, 32733.0], [904.0, 32844.0], [919.0, 30836.0], [918.0, 30838.0], [956.0, 26311.0], [959.0, 25920.0], [945.0, 27506.0], [944.0, 27702.0], [947.0, 27303.0], [946.0, 27494.0], [949.0, 27195.0], [948.0, 27210.0], [958.0, 26012.0], [957.0, 26214.0], [955.0, 26403.0], [954.0, 26514.0], [953.0, 26709.0], [952.0, 26805.0], [943.0, 27803.0], [929.0, 29479.0], [928.0, 29500.0], [931.0, 29305.0], [930.0, 29303.0], [933.0, 28996.0], [932.0, 29098.0], [935.0, 28808.0], [934.0, 28810.0], [942.0, 27901.0], [941.0, 27998.0], [940.0, 28100.0], [939.0, 28212.0], [938.0, 28217.0], [937.0, 28406.0], [936.0, 28598.0], [951.0, 26903.0], [950.0, 27010.0], [988.0, 21923.0], [991.0, 20625.0], [977.0, 23228.0], [976.0, 23413.0], [979.0, 23025.0], [978.0, 23111.0], [981.0, 22817.0], [980.0, 22921.0], [990.0, 21021.0], [989.0, 21832.0], [987.0, 22124.0], [986.0, 22223.0], [985.0, 22228.0], [984.0, 22426.0], [975.0, 23430.0], [961.0, 25825.0], [960.0, 25838.0], [963.0, 25315.0], [962.0, 25410.0], [965.0, 24915.0], [964.0, 25113.0], [967.0, 24719.0], [966.0, 24913.0], [974.0, 23624.0], [973.0, 23825.0], [972.0, 23820.0], [971.0, 24114.0], [970.0, 24429.0], [969.0, 24513.0], [968.0, 24729.0], [983.0, 22422.0], [982.0, 22723.0], [1000.0, 6445.0], [999.0, 8443.0], [998.0, 9247.0], [997.0, 10820.0], [996.0, 16022.0], [995.0, 16621.0], [994.0, 17128.0], [993.0, 18022.0], [992.0, 19020.0], [1.0, 300717.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.5129999999999, 160710.29800000016]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 826.65, "minX": 1.6247787E12, "maxY": 36608.8, "series": [{"data": [[1.62477888E12, 36426.666666666664], [1.62477894E12, 36426.666666666664], [1.62477876E12, 36062.4], [1.62477882E12, 36608.8], [1.6247787E12, 18031.2], [1.624779E12, 18577.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62477888E12, 1670.0], [1.62477894E12, 1670.0], [1.62477876E12, 1653.3], [1.62477882E12, 1678.35], [1.6247787E12, 826.65], [1.624779E12, 851.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.624779E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26085.545454545467, "minX": 1.6247787E12, "maxY": 293503.1960784313, "series": [{"data": [[1.62477888E12, 189178.5899999999], [1.62477894E12, 250072.78499999992], [1.62477876E12, 71277.45959595959], [1.62477882E12, 130484.03482587067], [1.6247787E12, 26085.545454545467], [1.624779E12, 293503.1960784313]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.624779E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 26081.989898989894, "minX": 1.6247787E12, "maxY": 293499.14705882355, "series": [{"data": [[1.62477888E12, 189175.88999999998], [1.62477894E12, 250067.55999999997], [1.62477876E12, 71272.96969696968], [1.62477882E12, 130480.15422885575], [1.6247787E12, 26081.989898989894], [1.624779E12, 293499.14705882355]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.624779E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1457.727272727273, "minX": 1.6247787E12, "maxY": 13181.607843137255, "series": [{"data": [[1.62477888E12, 8569.945000000002], [1.62477894E12, 11226.974999999999], [1.62477876E12, 3489.5353535353556], [1.62477882E12, 6096.527363184081], [1.6247787E12, 1457.727272727273], [1.624779E12, 13181.607843137255]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.624779E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6445.0, "minX": 1.6247787E12, "maxY": 300717.0, "series": [{"data": [[1.62477888E12, 216882.0], [1.62477894E12, 277270.0], [1.62477876E12, 97154.0], [1.62477882E12, 157131.0], [1.6247787E12, 36927.0], [1.624779E12, 300717.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62477888E12, 210260.0], [1.62477894E12, 270756.4], [1.62477876E12, 90582.6], [1.62477882E12, 150934.6], [1.6247787E12, 32140.0], [1.624779E12, 299812.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62477888E12, 215466.06], [1.62477894E12, 275975.78], [1.62477876E12, 94512.67999999998], [1.62477882E12, 156501.91999999998], [1.6247787E12, 36927.0], [1.624779E12, 300713.64]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62477888E12, 211468.3], [1.62477894E12, 272154.25], [1.62477876E12, 92785.15], [1.62477882E12, 152355.69999999998], [1.6247787E12, 32530.0], [1.624779E12, 300351.15]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62477888E12, 158515.0], [1.62477894E12, 218056.0], [1.62477876E12, 38934.0], [1.62477882E12, 98299.0], [1.6247787E12, 6445.0], [1.624779E12, 278655.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62477888E12, 187739.5], [1.62477894E12, 248862.5], [1.62477876E12, 67972.5], [1.62477882E12, 128104.0], [1.6247787E12, 26903.0], [1.624779E12, 294842.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.624779E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 83747.0, "minX": 1.0, "maxY": 240339.0, "series": [{"data": [[1.0, 158515.0], [2.0, 156514.5], [8.0, 175481.0], [4.0, 176414.5], [9.0, 200818.5], [5.0, 192438.0], [10.0, 83747.0], [11.0, 240339.0], [6.0, 122904.5], [3.0, 204409.0], [7.0, 102706.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 83744.0, "minX": 1.0, "maxY": 240334.0, "series": [{"data": [[1.0, 158513.0], [2.0, 156513.0], [8.0, 175478.0], [4.0, 176412.0], [9.0, 200816.5], [5.0, 192436.0], [10.0, 83744.0], [11.0, 240334.0], [6.0, 122900.5], [3.0, 204407.0], [7.0, 102704.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6247787E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6247787E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6247787E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.65, "minX": 1.6247787E12, "maxY": 3.35, "series": [{"data": [[1.62477888E12, 3.3333333333333335], [1.62477894E12, 3.3333333333333335], [1.62477876E12, 3.3], [1.62477882E12, 3.35], [1.6247787E12, 1.65], [1.624779E12, 1.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.624779E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.65, "minX": 1.6247787E12, "maxY": 3.35, "series": [{"data": [[1.62477888E12, 3.3333333333333335], [1.62477894E12, 3.3333333333333335], [1.62477876E12, 3.3], [1.62477882E12, 3.35], [1.6247787E12, 1.65], [1.624779E12, 1.7]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.624779E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.65, "minX": 1.6247787E12, "maxY": 3.35, "series": [{"data": [[1.62477888E12, 3.3333333333333335], [1.62477894E12, 3.3333333333333335], [1.62477876E12, 3.3], [1.62477882E12, 3.35], [1.6247787E12, 1.65], [1.624779E12, 1.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.624779E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

