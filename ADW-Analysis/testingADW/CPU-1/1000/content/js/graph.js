/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8021.0, "minX": 0.0, "maxY": 119227.0, "series": [{"data": [[0.0, 8021.0], [0.1, 8381.0], [0.2, 8470.0], [0.3, 8470.0], [0.4, 8517.0], [0.5, 8651.0], [0.6, 8748.0], [0.7, 8838.0], [0.8, 8859.0], [0.9, 8910.0], [1.0, 9028.0], [1.1, 9183.0], [1.2, 9355.0], [1.3, 9476.0], [1.4, 9476.0], [1.5, 9555.0], [1.6, 10071.0], [1.7, 10137.0], [1.8, 10308.0], [1.9, 10478.0], [2.0, 10502.0], [2.1, 10556.0], [2.2, 10592.0], [2.3, 10597.0], [2.4, 10601.0], [2.5, 10662.0], [2.6, 10722.0], [2.7, 10741.0], [2.8, 10756.0], [2.9, 10757.0], [3.0, 10789.0], [3.1, 10792.0], [3.2, 10799.0], [3.3, 10801.0], [3.4, 10857.0], [3.5, 10902.0], [3.6, 10910.0], [3.7, 10921.0], [3.8, 10925.0], [3.9, 10954.0], [4.0, 10963.0], [4.1, 10964.0], [4.2, 10982.0], [4.3, 11006.0], [4.4, 11050.0], [4.5, 11051.0], [4.6, 11076.0], [4.7, 11079.0], [4.8, 11085.0], [4.9, 11096.0], [5.0, 11108.0], [5.1, 11133.0], [5.2, 11136.0], [5.3, 11174.0], [5.4, 11177.0], [5.5, 11179.0], [5.6, 11181.0], [5.7, 11189.0], [5.8, 11243.0], [5.9, 11252.0], [6.0, 11293.0], [6.1, 11327.0], [6.2, 11327.0], [6.3, 11328.0], [6.4, 11328.0], [6.5, 11365.0], [6.6, 11366.0], [6.7, 11372.0], [6.8, 11390.0], [6.9, 11515.0], [7.0, 11536.0], [7.1, 11543.0], [7.2, 11546.0], [7.3, 11568.0], [7.4, 11571.0], [7.5, 11577.0], [7.6, 11583.0], [7.7, 11584.0], [7.8, 11610.0], [7.9, 11647.0], [8.0, 11665.0], [8.1, 11671.0], [8.2, 11712.0], [8.3, 11719.0], [8.4, 11751.0], [8.5, 11768.0], [8.6, 11818.0], [8.7, 11842.0], [8.8, 11852.0], [8.9, 11871.0], [9.0, 11875.0], [9.1, 11890.0], [9.2, 11915.0], [9.3, 11937.0], [9.4, 11941.0], [9.5, 11949.0], [9.6, 11956.0], [9.7, 11962.0], [9.8, 11982.0], [9.9, 11983.0], [10.0, 11984.0], [10.1, 11999.0], [10.2, 12013.0], [10.3, 12057.0], [10.4, 12079.0], [10.5, 12083.0], [10.6, 12113.0], [10.7, 12120.0], [10.8, 12174.0], [10.9, 12208.0], [11.0, 12232.0], [11.1, 12234.0], [11.2, 12245.0], [11.3, 12256.0], [11.4, 12264.0], [11.5, 12318.0], [11.6, 12346.0], [11.7, 12350.0], [11.8, 12380.0], [11.9, 12382.0], [12.0, 12398.0], [12.1, 12425.0], [12.2, 12427.0], [12.3, 12433.0], [12.4, 12476.0], [12.5, 12487.0], [12.6, 12493.0], [12.7, 12504.0], [12.8, 12509.0], [12.9, 12518.0], [13.0, 12534.0], [13.1, 12537.0], [13.2, 12537.0], [13.3, 12570.0], [13.4, 12580.0], [13.5, 12592.0], [13.6, 12598.0], [13.7, 12624.0], [13.8, 12635.0], [13.9, 12652.0], [14.0, 12689.0], [14.1, 12696.0], [14.2, 12702.0], [14.3, 12707.0], [14.4, 12719.0], [14.5, 12724.0], [14.6, 12764.0], [14.7, 12781.0], [14.8, 12804.0], [14.9, 12811.0], [15.0, 12843.0], [15.1, 12845.0], [15.2, 12846.0], [15.3, 12856.0], [15.4, 12885.0], [15.5, 12917.0], [15.6, 12928.0], [15.7, 12947.0], [15.8, 12963.0], [15.9, 12965.0], [16.0, 12997.0], [16.1, 12998.0], [16.2, 13000.0], [16.3, 13005.0], [16.4, 13015.0], [16.5, 13037.0], [16.6, 13042.0], [16.7, 13048.0], [16.8, 13058.0], [16.9, 13079.0], [17.0, 13118.0], [17.1, 13126.0], [17.2, 13126.0], [17.3, 13150.0], [17.4, 13189.0], [17.5, 13198.0], [17.6, 13205.0], [17.7, 13211.0], [17.8, 13213.0], [17.9, 13222.0], [18.0, 13242.0], [18.1, 13285.0], [18.2, 13302.0], [18.3, 13306.0], [18.4, 13311.0], [18.5, 13321.0], [18.6, 13335.0], [18.7, 13365.0], [18.8, 13381.0], [18.9, 13397.0], [19.0, 13419.0], [19.1, 13421.0], [19.2, 13421.0], [19.3, 13439.0], [19.4, 13452.0], [19.5, 13461.0], [19.6, 13480.0], [19.7, 13514.0], [19.8, 13515.0], [19.9, 13541.0], [20.0, 13544.0], [20.1, 13560.0], [20.2, 13574.0], [20.3, 13578.0], [20.4, 13588.0], [20.5, 13611.0], [20.6, 13615.0], [20.7, 13661.0], [20.8, 13697.0], [20.9, 13709.0], [21.0, 13711.0], [21.1, 13719.0], [21.2, 13758.0], [21.3, 13760.0], [21.4, 13761.0], [21.5, 13766.0], [21.6, 13771.0], [21.7, 13791.0], [21.8, 13793.0], [21.9, 13833.0], [22.0, 13836.0], [22.1, 13845.0], [22.2, 13857.0], [22.3, 13860.0], [22.4, 13866.0], [22.5, 13897.0], [22.6, 13904.0], [22.7, 13919.0], [22.8, 13922.0], [22.9, 13926.0], [23.0, 13926.0], [23.1, 13998.0], [23.2, 14008.0], [23.3, 14011.0], [23.4, 14043.0], [23.5, 14045.0], [23.6, 14049.0], [23.7, 14081.0], [23.8, 14117.0], [23.9, 14120.0], [24.0, 14160.0], [24.1, 14161.0], [24.2, 14164.0], [24.3, 14174.0], [24.4, 14183.0], [24.5, 14185.0], [24.6, 14193.0], [24.7, 14199.0], [24.8, 14210.0], [24.9, 14251.0], [25.0, 14277.0], [25.1, 14278.0], [25.2, 14286.0], [25.3, 14290.0], [25.4, 14315.0], [25.5, 14337.0], [25.6, 14372.0], [25.7, 14377.0], [25.8, 14387.0], [25.9, 14391.0], [26.0, 14403.0], [26.1, 14412.0], [26.2, 14436.0], [26.3, 14455.0], [26.4, 14473.0], [26.5, 14483.0], [26.6, 14485.0], [26.7, 14487.0], [26.8, 14529.0], [26.9, 14531.0], [27.0, 14541.0], [27.1, 14545.0], [27.2, 14547.0], [27.3, 14554.0], [27.4, 14560.0], [27.5, 14563.0], [27.6, 14583.0], [27.7, 14589.0], [27.8, 14638.0], [27.9, 14639.0], [28.0, 14676.0], [28.1, 14684.0], [28.2, 14712.0], [28.3, 14715.0], [28.4, 14749.0], [28.5, 14759.0], [28.6, 14793.0], [28.7, 14796.0], [28.8, 14808.0], [28.9, 14818.0], [29.0, 14840.0], [29.1, 14854.0], [29.2, 14893.0], [29.3, 14894.0], [29.4, 14909.0], [29.5, 14921.0], [29.6, 14945.0], [29.7, 14946.0], [29.8, 14962.0], [29.9, 14975.0], [30.0, 14978.0], [30.1, 14986.0], [30.2, 14991.0], [30.3, 15002.0], [30.4, 15033.0], [30.5, 15035.0], [30.6, 15038.0], [30.7, 15043.0], [30.8, 15047.0], [30.9, 15057.0], [31.0, 15089.0], [31.1, 15090.0], [31.2, 15107.0], [31.3, 15132.0], [31.4, 15138.0], [31.5, 15157.0], [31.6, 15188.0], [31.7, 15193.0], [31.8, 15206.0], [31.9, 15215.0], [32.0, 15236.0], [32.1, 15243.0], [32.2, 15280.0], [32.3, 15292.0], [32.4, 15306.0], [32.5, 15334.0], [32.6, 15335.0], [32.7, 15340.0], [32.8, 15353.0], [32.9, 15372.0], [33.0, 15393.0], [33.1, 15421.0], [33.2, 15423.0], [33.3, 15436.0], [33.4, 15439.0], [33.5, 15468.0], [33.6, 15468.0], [33.7, 15508.0], [33.8, 15520.0], [33.9, 15537.0], [34.0, 15543.0], [34.1, 15551.0], [34.2, 15557.0], [34.3, 15557.0], [34.4, 15582.0], [34.5, 15590.0], [34.6, 15605.0], [34.7, 15622.0], [34.8, 15644.0], [34.9, 15663.0], [35.0, 15684.0], [35.1, 15691.0], [35.2, 15702.0], [35.3, 15713.0], [35.4, 15725.0], [35.5, 15731.0], [35.6, 15735.0], [35.7, 15752.0], [35.8, 15775.0], [35.9, 15821.0], [36.0, 15861.0], [36.1, 15863.0], [36.2, 15863.0], [36.3, 15869.0], [36.4, 15887.0], [36.5, 15904.0], [36.6, 15928.0], [36.7, 15951.0], [36.8, 15958.0], [36.9, 15960.0], [37.0, 15961.0], [37.1, 15975.0], [37.2, 15987.0], [37.3, 15998.0], [37.4, 16014.0], [37.5, 16024.0], [37.6, 16040.0], [37.7, 16068.0], [37.8, 16082.0], [37.9, 16092.0], [38.0, 16098.0], [38.1, 16121.0], [38.2, 16121.0], [38.3, 16155.0], [38.4, 16201.0], [38.5, 16207.0], [38.6, 16234.0], [38.7, 16236.0], [38.8, 16243.0], [38.9, 16257.0], [39.0, 16272.0], [39.1, 16283.0], [39.2, 16284.0], [39.3, 16316.0], [39.4, 16354.0], [39.5, 16365.0], [39.6, 16377.0], [39.7, 16395.0], [39.8, 16400.0], [39.9, 16422.0], [40.0, 16423.0], [40.1, 16423.0], [40.2, 16439.0], [40.3, 16484.0], [40.4, 16504.0], [40.5, 16545.0], [40.6, 16552.0], [40.7, 16572.0], [40.8, 16589.0], [40.9, 16597.0], [41.0, 16599.0], [41.1, 16602.0], [41.2, 16615.0], [41.3, 16633.0], [41.4, 16645.0], [41.5, 16657.0], [41.6, 16669.0], [41.7, 16687.0], [41.8, 16726.0], [41.9, 16743.0], [42.0, 16769.0], [42.1, 16804.0], [42.2, 16808.0], [42.3, 16838.0], [42.4, 16848.0], [42.5, 16856.0], [42.6, 16860.0], [42.7, 16882.0], [42.8, 16885.0], [42.9, 16900.0], [43.0, 16908.0], [43.1, 16945.0], [43.2, 16983.0], [43.3, 16984.0], [43.4, 16986.0], [43.5, 17013.0], [43.6, 17028.0], [43.7, 17033.0], [43.8, 17042.0], [43.9, 17051.0], [44.0, 17057.0], [44.1, 17078.0], [44.2, 17085.0], [44.3, 17101.0], [44.4, 17111.0], [44.5, 17176.0], [44.6, 17177.0], [44.7, 17185.0], [44.8, 17202.0], [44.9, 17211.0], [45.0, 17224.0], [45.1, 17228.0], [45.2, 17242.0], [45.3, 17257.0], [45.4, 17263.0], [45.5, 17265.0], [45.6, 17292.0], [45.7, 17305.0], [45.8, 17347.0], [45.9, 17352.0], [46.0, 17381.0], [46.1, 17389.0], [46.2, 17410.0], [46.3, 17444.0], [46.4, 17465.0], [46.5, 17483.0], [46.6, 17496.0], [46.7, 17510.0], [46.8, 17539.0], [46.9, 17545.0], [47.0, 17545.0], [47.1, 17550.0], [47.2, 17552.0], [47.3, 17561.0], [47.4, 17576.0], [47.5, 17634.0], [47.6, 17666.0], [47.7, 17683.0], [47.8, 17687.0], [47.9, 17704.0], [48.0, 17709.0], [48.1, 17724.0], [48.2, 17730.0], [48.3, 17734.0], [48.4, 17737.0], [48.5, 17757.0], [48.6, 17793.0], [48.7, 17807.0], [48.8, 17821.0], [48.9, 17831.0], [49.0, 17844.0], [49.1, 17849.0], [49.2, 17853.0], [49.3, 17861.0], [49.4, 17876.0], [49.5, 17882.0], [49.6, 17931.0], [49.7, 17931.0], [49.8, 17935.0], [49.9, 17940.0], [50.0, 17941.0], [50.1, 17944.0], [50.2, 17955.0], [50.3, 17965.0], [50.4, 17981.0], [50.5, 17984.0], [50.6, 18004.0], [50.7, 18022.0], [50.8, 18022.0], [50.9, 18026.0], [51.0, 18049.0], [51.1, 18073.0], [51.2, 18092.0], [51.3, 18100.0], [51.4, 18161.0], [51.5, 18164.0], [51.6, 18165.0], [51.7, 18169.0], [51.8, 18214.0], [51.9, 18219.0], [52.0, 18247.0], [52.1, 18265.0], [52.2, 18296.0], [52.3, 18301.0], [52.4, 18308.0], [52.5, 18352.0], [52.6, 18371.0], [52.7, 18371.0], [52.8, 18377.0], [52.9, 18394.0], [53.0, 18397.0], [53.1, 18412.0], [53.2, 18412.0], [53.3, 18415.0], [53.4, 18426.0], [53.5, 18495.0], [53.6, 18501.0], [53.7, 18506.0], [53.8, 18537.0], [53.9, 18546.0], [54.0, 18550.0], [54.1, 18555.0], [54.2, 18565.0], [54.3, 18574.0], [54.4, 18594.0], [54.5, 18595.0], [54.6, 18600.0], [54.7, 18622.0], [54.8, 18623.0], [54.9, 18634.0], [55.0, 18637.0], [55.1, 18657.0], [55.2, 18669.0], [55.3, 18687.0], [55.4, 18693.0], [55.5, 18725.0], [55.6, 18735.0], [55.7, 18735.0], [55.8, 18761.0], [55.9, 18789.0], [56.0, 18793.0], [56.1, 18800.0], [56.2, 18834.0], [56.3, 18850.0], [56.4, 18869.0], [56.5, 18889.0], [56.6, 18894.0], [56.7, 18900.0], [56.8, 18923.0], [56.9, 18933.0], [57.0, 18953.0], [57.1, 18957.0], [57.2, 18972.0], [57.3, 18980.0], [57.4, 18981.0], [57.5, 19009.0], [57.6, 19011.0], [57.7, 19067.0], [57.8, 19078.0], [57.9, 19078.0], [58.0, 19080.0], [58.1, 19096.0], [58.2, 19100.0], [58.3, 19121.0], [58.4, 19132.0], [58.5, 19145.0], [58.6, 19154.0], [58.7, 19186.0], [58.8, 19206.0], [58.9, 19215.0], [59.0, 19226.0], [59.1, 19227.0], [59.2, 19242.0], [59.3, 19250.0], [59.4, 19272.0], [59.5, 19276.0], [59.6, 19296.0], [59.7, 19297.0], [59.8, 19312.0], [59.9, 19344.0], [60.0, 19356.0], [60.1, 19384.0], [60.2, 19386.0], [60.3, 19389.0], [60.4, 19401.0], [60.5, 19404.0], [60.6, 19424.0], [60.7, 19425.0], [60.8, 19429.0], [60.9, 19463.0], [61.0, 19467.0], [61.1, 19509.0], [61.2, 19509.0], [61.3, 19527.0], [61.4, 19547.0], [61.5, 19548.0], [61.6, 19598.0], [61.7, 19600.0], [61.8, 19618.0], [61.9, 19634.0], [62.0, 19653.0], [62.1, 19660.0], [62.2, 19689.0], [62.3, 19696.0], [62.4, 19698.0], [62.5, 19711.0], [62.6, 19729.0], [62.7, 19729.0], [62.8, 19730.0], [62.9, 19770.0], [63.0, 19770.0], [63.1, 19780.0], [63.2, 19797.0], [63.3, 19818.0], [63.4, 19831.0], [63.5, 19836.0], [63.6, 19866.0], [63.7, 19867.0], [63.8, 19896.0], [63.9, 19902.0], [64.0, 19906.0], [64.1, 19908.0], [64.2, 19926.0], [64.3, 19952.0], [64.4, 19956.0], [64.5, 19997.0], [64.6, 20013.0], [64.7, 20031.0], [64.8, 20032.0], [64.9, 20038.0], [65.0, 20069.0], [65.1, 20077.0], [65.2, 20098.0], [65.3, 20104.0], [65.4, 20110.0], [65.5, 20156.0], [65.6, 20180.0], [65.7, 20184.0], [65.8, 20206.0], [65.9, 20225.0], [66.0, 20227.0], [66.1, 20227.0], [66.2, 20253.0], [66.3, 20263.0], [66.4, 20266.0], [66.5, 20268.0], [66.6, 20305.0], [66.7, 20315.0], [66.8, 20335.0], [66.9, 20338.0], [67.0, 20339.0], [67.1, 20368.0], [67.2, 20369.0], [67.3, 20385.0], [67.4, 20401.0], [67.5, 20420.0], [67.6, 20427.0], [67.7, 20435.0], [67.8, 20455.0], [67.9, 20491.0], [68.0, 20502.0], [68.1, 20505.0], [68.2, 20528.0], [68.3, 20535.0], [68.4, 20545.0], [68.5, 20563.0], [68.6, 20568.0], [68.7, 20611.0], [68.8, 20613.0], [68.9, 20618.0], [69.0, 20643.0], [69.1, 20667.0], [69.2, 20681.0], [69.3, 20689.0], [69.4, 20695.0], [69.5, 20708.0], [69.6, 20715.0], [69.7, 20718.0], [69.8, 20731.0], [69.9, 20734.0], [70.0, 20750.0], [70.1, 21466.0], [70.2, 22911.0], [70.3, 23261.0], [70.4, 33948.0], [70.5, 34120.0], [70.6, 34151.0], [70.7, 34219.0], [70.8, 34221.0], [70.9, 34326.0], [71.0, 34371.0], [71.1, 34387.0], [71.2, 34403.0], [71.3, 34468.0], [71.4, 34546.0], [71.5, 34586.0], [71.6, 34591.0], [71.7, 34752.0], [71.8, 54727.0], [71.9, 55651.0], [72.0, 59522.0], [72.1, 60633.0], [72.2, 62171.0], [72.3, 65371.0], [72.4, 66571.0], [72.5, 68518.0], [72.6, 68554.0], [72.7, 69105.0], [72.8, 69842.0], [72.9, 72063.0], [73.0, 72490.0], [73.1, 73369.0], [73.2, 74019.0], [73.3, 74948.0], [73.4, 75295.0], [73.5, 77042.0], [73.6, 77434.0], [73.7, 77567.0], [73.8, 78150.0], [73.9, 78403.0], [74.0, 78542.0], [74.1, 78888.0], [74.2, 79128.0], [74.3, 80092.0], [74.4, 80225.0], [74.5, 80559.0], [74.6, 80857.0], [74.7, 81084.0], [74.8, 81573.0], [74.9, 81870.0], [75.0, 82415.0], [75.1, 82582.0], [75.2, 82995.0], [75.3, 83099.0], [75.4, 83104.0], [75.5, 83368.0], [75.6, 83653.0], [75.7, 83724.0], [75.8, 84088.0], [75.9, 84135.0], [76.0, 84280.0], [76.1, 84442.0], [76.2, 84912.0], [76.3, 85115.0], [76.4, 85617.0], [76.5, 85674.0], [76.6, 85782.0], [76.7, 86136.0], [76.8, 86363.0], [76.9, 86613.0], [77.0, 86831.0], [77.1, 86964.0], [77.2, 87214.0], [77.3, 87337.0], [77.4, 87349.0], [77.5, 87947.0], [77.6, 88021.0], [77.7, 88035.0], [77.8, 88188.0], [77.9, 89003.0], [78.0, 89070.0], [78.1, 89188.0], [78.2, 89386.0], [78.3, 89772.0], [78.4, 89888.0], [78.5, 90088.0], [78.6, 90427.0], [78.7, 90430.0], [78.8, 90932.0], [78.9, 91366.0], [79.0, 91502.0], [79.1, 91590.0], [79.2, 91597.0], [79.3, 91655.0], [79.4, 91919.0], [79.5, 92173.0], [79.6, 92432.0], [79.7, 92575.0], [79.8, 92681.0], [79.9, 92833.0], [80.0, 93011.0], [80.1, 93406.0], [80.2, 93415.0], [80.3, 93494.0], [80.4, 93721.0], [80.5, 93810.0], [80.6, 94126.0], [80.7, 94152.0], [80.8, 94364.0], [80.9, 94437.0], [81.0, 94440.0], [81.1, 94642.0], [81.2, 94734.0], [81.3, 94957.0], [81.4, 94981.0], [81.5, 95211.0], [81.6, 95311.0], [81.7, 95574.0], [81.8, 95664.0], [81.9, 95722.0], [82.0, 95794.0], [82.1, 95985.0], [82.2, 96173.0], [82.3, 96176.0], [82.4, 96374.0], [82.5, 96837.0], [82.6, 97023.0], [82.7, 97369.0], [82.8, 97391.0], [82.9, 97595.0], [83.0, 97742.0], [83.1, 97892.0], [83.2, 98285.0], [83.3, 98345.0], [83.4, 98458.0], [83.5, 98591.0], [83.6, 98798.0], [83.7, 98948.0], [83.8, 99084.0], [83.9, 99719.0], [84.0, 99823.0], [84.1, 99910.0], [84.2, 100116.0], [84.3, 100182.0], [84.4, 100215.0], [84.5, 100370.0], [84.6, 100373.0], [84.7, 100477.0], [84.8, 100726.0], [84.9, 100955.0], [85.0, 101031.0], [85.1, 101257.0], [85.2, 101269.0], [85.3, 101359.0], [85.4, 101477.0], [85.5, 101526.0], [85.6, 101879.0], [85.7, 102021.0], [85.8, 102117.0], [85.9, 102302.0], [86.0, 102394.0], [86.1, 102524.0], [86.2, 102597.0], [86.3, 102911.0], [86.4, 103102.0], [86.5, 103278.0], [86.6, 103456.0], [86.7, 103606.0], [86.8, 103639.0], [86.9, 103676.0], [87.0, 103842.0], [87.1, 103882.0], [87.2, 104073.0], [87.3, 104395.0], [87.4, 104560.0], [87.5, 104668.0], [87.6, 104885.0], [87.7, 105014.0], [87.8, 105205.0], [87.9, 105237.0], [88.0, 105316.0], [88.1, 105480.0], [88.2, 105709.0], [88.3, 105843.0], [88.4, 106034.0], [88.5, 106101.0], [88.6, 106411.0], [88.7, 106445.0], [88.8, 106495.0], [88.9, 106514.0], [89.0, 106686.0], [89.1, 106836.0], [89.2, 106901.0], [89.3, 106958.0], [89.4, 107031.0], [89.5, 107186.0], [89.6, 107414.0], [89.7, 107606.0], [89.8, 107719.0], [89.9, 107736.0], [90.0, 107850.0], [90.1, 108240.0], [90.2, 108273.0], [90.3, 108355.0], [90.4, 108386.0], [90.5, 108474.0], [90.6, 108713.0], [90.7, 108902.0], [90.8, 108908.0], [90.9, 109164.0], [91.0, 109246.0], [91.1, 109364.0], [91.2, 109433.0], [91.3, 109575.0], [91.4, 109657.0], [91.5, 109660.0], [91.6, 109687.0], [91.7, 109802.0], [91.8, 110083.0], [91.9, 110132.0], [92.0, 110172.0], [92.1, 110457.0], [92.2, 110511.0], [92.3, 110860.0], [92.4, 110868.0], [92.5, 110893.0], [92.6, 111119.0], [92.7, 111303.0], [92.8, 111462.0], [92.9, 111731.0], [93.0, 111765.0], [93.1, 111909.0], [93.2, 112114.0], [93.3, 112184.0], [93.4, 112311.0], [93.5, 112500.0], [93.6, 112529.0], [93.7, 112575.0], [93.8, 112583.0], [93.9, 112673.0], [94.0, 112894.0], [94.1, 113064.0], [94.2, 113313.0], [94.3, 113318.0], [94.4, 113370.0], [94.5, 113582.0], [94.6, 113648.0], [94.7, 113802.0], [94.8, 113889.0], [94.9, 113939.0], [95.0, 114075.0], [95.1, 114118.0], [95.2, 114152.0], [95.3, 114201.0], [95.4, 114347.0], [95.5, 114715.0], [95.6, 114783.0], [95.7, 114792.0], [95.8, 114798.0], [95.9, 114844.0], [96.0, 115000.0], [96.1, 115026.0], [96.2, 115058.0], [96.3, 115646.0], [96.4, 115693.0], [96.5, 115918.0], [96.6, 116020.0], [96.7, 116111.0], [96.8, 116190.0], [96.9, 116362.0], [97.0, 116544.0], [97.1, 116697.0], [97.2, 116821.0], [97.3, 116828.0], [97.4, 116935.0], [97.5, 117102.0], [97.6, 117105.0], [97.7, 117270.0], [97.8, 117317.0], [97.9, 117383.0], [98.0, 117536.0], [98.1, 117537.0], [98.2, 117566.0], [98.3, 117666.0], [98.4, 117673.0], [98.5, 117822.0], [98.6, 117854.0], [98.7, 117871.0], [98.8, 117918.0], [98.9, 118066.0], [99.0, 118288.0], [99.1, 118319.0], [99.2, 118334.0], [99.3, 118615.0], [99.4, 118632.0], [99.5, 118786.0], [99.6, 118942.0], [99.7, 119002.0], [99.8, 119217.0], [99.9, 119227.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 8000.0, "maxY": 10.0, "series": [{"data": [[69100.0, 1.0], [85100.0, 1.0], [89100.0, 1.0], [91500.0, 3.0], [94700.0, 1.0], [95500.0, 1.0], [96300.0, 1.0], [98700.0, 1.0], [100300.0, 2.0], [104300.0, 1.0], [108300.0, 2.0], [109100.0, 1.0], [112300.0, 1.0], [113900.0, 1.0], [114700.0, 4.0], [116300.0, 1.0], [117100.0, 2.0], [117900.0, 1.0], [118700.0, 1.0], [34100.0, 2.0], [34500.0, 3.0], [62100.0, 1.0], [65300.0, 1.0], [69800.0, 1.0], [77000.0, 1.0], [80200.0, 1.0], [81000.0, 1.0], [81800.0, 1.0], [84200.0, 1.0], [86600.0, 1.0], [89000.0, 2.0], [89800.0, 1.0], [93000.0, 1.0], [93800.0, 1.0], [94600.0, 1.0], [97000.0, 1.0], [97800.0, 1.0], [100200.0, 1.0], [101000.0, 1.0], [101800.0, 1.0], [103400.0, 1.0], [105000.0, 1.0], [105800.0, 1.0], [106600.0, 1.0], [107400.0, 1.0], [108200.0, 2.0], [109800.0, 1.0], [111400.0, 1.0], [113000.0, 1.0], [113800.0, 2.0], [117800.0, 3.0], [118600.0, 2.0], [66500.0, 1.0], [78500.0, 1.0], [82500.0, 1.0], [83300.0, 1.0], [84100.0, 1.0], [84900.0, 1.0], [85700.0, 1.0], [87300.0, 2.0], [88100.0, 1.0], [89700.0, 1.0], [91300.0, 1.0], [92100.0, 1.0], [93700.0, 1.0], [95300.0, 1.0], [96100.0, 2.0], [97700.0, 1.0], [98500.0, 1.0], [100100.0, 2.0], [100900.0, 1.0], [102500.0, 2.0], [105700.0, 1.0], [106500.0, 1.0], [108900.0, 2.0], [110500.0, 1.0], [111300.0, 1.0], [112100.0, 2.0], [116100.0, 2.0], [116900.0, 1.0], [8000.0, 1.0], [8300.0, 1.0], [8400.0, 1.0], [8500.0, 2.0], [8600.0, 1.0], [8700.0, 1.0], [8800.0, 2.0], [8900.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [9400.0, 1.0], [9500.0, 1.0], [10000.0, 1.0], [10100.0, 1.0], [10300.0, 1.0], [10400.0, 1.0], [10500.0, 4.0], [10600.0, 2.0], [10700.0, 7.0], [10800.0, 2.0], [10900.0, 8.0], [11000.0, 8.0], [11100.0, 8.0], [11200.0, 3.0], [11300.0, 8.0], [11500.0, 9.0], [11600.0, 4.0], [11700.0, 4.0], [11800.0, 6.0], [11900.0, 10.0], [12000.0, 4.0], [12100.0, 3.0], [12200.0, 6.0], [12300.0, 6.0], [12500.0, 10.0], [12400.0, 6.0], [12600.0, 5.0], [12700.0, 6.0], [12800.0, 7.0], [13000.0, 8.0], [12900.0, 7.0], [13200.0, 6.0], [13100.0, 6.0], [13300.0, 8.0], [13400.0, 6.0], [13500.0, 8.0], [13600.0, 4.0], [13700.0, 10.0], [13800.0, 7.0], [13900.0, 6.0], [14000.0, 6.0], [14100.0, 10.0], [14200.0, 6.0], [14300.0, 6.0], [14500.0, 10.0], [14400.0, 8.0], [14600.0, 4.0], [14700.0, 6.0], [14800.0, 6.0], [14900.0, 9.0], [15000.0, 9.0], [15100.0, 6.0], [15200.0, 6.0], [15300.0, 7.0], [15400.0, 6.0], [15500.0, 9.0], [15600.0, 6.0], [15700.0, 7.0], [15800.0, 6.0], [15900.0, 9.0], [16000.0, 7.0], [16100.0, 3.0], [16200.0, 9.0], [16300.0, 5.0], [17200.0, 9.0], [16400.0, 6.0], [16600.0, 7.0], [16800.0, 8.0], [17000.0, 8.0], [17400.0, 5.0], [17600.0, 4.0], [17800.0, 9.0], [18000.0, 7.0], [18200.0, 5.0], [18400.0, 5.0], [18600.0, 9.0], [18800.0, 6.0], [19000.0, 7.0], [19200.0, 10.0], [19400.0, 7.0], [20000.0, 7.0], [20200.0, 8.0], [19600.0, 8.0], [19800.0, 6.0], [20400.0, 6.0], [20600.0, 8.0], [21400.0, 1.0], [23200.0, 1.0], [34400.0, 2.0], [55600.0, 1.0], [72000.0, 1.0], [75200.0, 1.0], [78400.0, 1.0], [80000.0, 1.0], [80800.0, 1.0], [82400.0, 1.0], [84000.0, 1.0], [85600.0, 2.0], [87200.0, 1.0], [88000.0, 2.0], [90400.0, 2.0], [92800.0, 1.0], [94400.0, 2.0], [95200.0, 1.0], [96800.0, 1.0], [98400.0, 1.0], [103200.0, 1.0], [104000.0, 1.0], [104800.0, 1.0], [106400.0, 3.0], [109600.0, 3.0], [110400.0, 1.0], [112800.0, 1.0], [113600.0, 1.0], [116000.0, 1.0], [116800.0, 2.0], [117600.0, 2.0], [119200.0, 2.0], [77500.0, 1.0], [79100.0, 1.0], [81500.0, 1.0], [83100.0, 1.0], [86300.0, 1.0], [87900.0, 1.0], [91900.0, 1.0], [94300.0, 1.0], [95900.0, 1.0], [97500.0, 1.0], [98300.0, 1.0], [99900.0, 1.0], [100700.0, 1.0], [101500.0, 1.0], [102300.0, 2.0], [103100.0, 1.0], [107100.0, 1.0], [108700.0, 1.0], [109500.0, 1.0], [111100.0, 1.0], [111900.0, 1.0], [113500.0, 1.0], [114300.0, 1.0], [115900.0, 1.0], [117500.0, 3.0], [118300.0, 2.0], [33900.0, 1.0], [34300.0, 3.0], [34700.0, 1.0], [54700.0, 1.0], [59500.0, 1.0], [77400.0, 1.0], [83000.0, 1.0], [92600.0, 1.0], [93400.0, 3.0], [98200.0, 1.0], [99000.0, 1.0], [99800.0, 1.0], [101400.0, 1.0], [103800.0, 2.0], [104600.0, 1.0], [105400.0, 1.0], [107000.0, 1.0], [107800.0, 1.0], [109400.0, 1.0], [112600.0, 1.0], [114200.0, 1.0], [115000.0, 3.0], [116600.0, 1.0], [118200.0, 1.0], [119000.0, 1.0], [68500.0, 2.0], [73300.0, 1.0], [74900.0, 1.0], [78100.0, 1.0], [80500.0, 1.0], [82900.0, 1.0], [83700.0, 1.0], [86100.0, 1.0], [86900.0, 1.0], [89300.0, 1.0], [90900.0, 1.0], [92500.0, 1.0], [94100.0, 2.0], [94900.0, 2.0], [95700.0, 2.0], [97300.0, 2.0], [98900.0, 1.0], [99700.0, 1.0], [101300.0, 1.0], [102100.0, 1.0], [102900.0, 1.0], [104500.0, 1.0], [105300.0, 1.0], [106100.0, 1.0], [106900.0, 2.0], [107700.0, 2.0], [109300.0, 1.0], [110100.0, 2.0], [111700.0, 2.0], [112500.0, 4.0], [113300.0, 3.0], [114100.0, 2.0], [116500.0, 1.0], [117300.0, 2.0], [118900.0, 1.0], [16500.0, 7.0], [16700.0, 3.0], [16900.0, 6.0], [17100.0, 5.0], [17300.0, 5.0], [17900.0, 10.0], [17500.0, 8.0], [17700.0, 8.0], [18100.0, 5.0], [18300.0, 8.0], [18500.0, 10.0], [19100.0, 6.0], [18700.0, 6.0], [18900.0, 8.0], [19300.0, 6.0], [19500.0, 6.0], [19700.0, 8.0], [19900.0, 7.0], [20100.0, 5.0], [20300.0, 8.0], [20700.0, 6.0], [20500.0, 7.0], [22900.0, 1.0], [34200.0, 2.0], [60600.0, 1.0], [72400.0, 1.0], [74000.0, 1.0], [78800.0, 1.0], [82800.0, 1.0], [83600.0, 1.0], [84400.0, 1.0], [86800.0, 1.0], [90000.0, 1.0], [91600.0, 1.0], [92400.0, 1.0], [95600.0, 1.0], [100400.0, 1.0], [101200.0, 2.0], [102000.0, 1.0], [103600.0, 3.0], [105200.0, 2.0], [106000.0, 1.0], [106800.0, 1.0], [107600.0, 1.0], [108400.0, 1.0], [109200.0, 1.0], [110000.0, 1.0], [110800.0, 3.0], [114000.0, 1.0], [114800.0, 1.0], [115600.0, 2.0], [117200.0, 1.0], [118000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 119200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 283.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 717.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 283.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 717.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 136.5, "minX": 1.62248604E12, "maxY": 950.0396039603961, "series": [{"data": [[1.62248604E12, 950.0396039603961], [1.62248616E12, 136.5], [1.6224861E12, 586.0223285486444]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248616E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8021.0, "minX": 1.0, "maxY": 119227.0, "series": [{"data": [[2.0, 119217.0], [3.0, 118942.0], [4.0, 119002.0], [5.0, 118786.0], [6.0, 118615.0], [7.0, 118632.0], [8.0, 118334.0], [9.0, 118319.0], [10.0, 118288.0], [11.0, 118066.0], [12.0, 117918.0], [13.0, 117871.0], [14.0, 117854.0], [15.0, 117822.0], [16.0, 117673.0], [17.0, 117666.0], [18.0, 117536.0], [19.0, 117566.0], [20.0, 117537.0], [21.0, 116697.0], [22.0, 117383.0], [23.0, 117317.0], [24.0, 117105.0], [25.0, 117270.0], [26.0, 117102.0], [27.0, 116935.0], [28.0, 116828.0], [29.0, 116821.0], [30.0, 116544.0], [31.0, 115918.0], [33.0, 116111.0], [32.0, 116362.0], [35.0, 115646.0], [34.0, 116190.0], [37.0, 115693.0], [36.0, 116020.0], [39.0, 114783.0], [38.0, 115026.0], [41.0, 115058.0], [40.0, 114844.0], [43.0, 114798.0], [42.0, 115000.0], [45.0, 114715.0], [44.0, 114792.0], [47.0, 113889.0], [46.0, 114152.0], [49.0, 114201.0], [48.0, 114347.0], [51.0, 114075.0], [50.0, 114118.0], [53.0, 113802.0], [52.0, 113939.0], [55.0, 113582.0], [54.0, 113648.0], [57.0, 113370.0], [56.0, 113318.0], [59.0, 113064.0], [58.0, 113313.0], [61.0, 112673.0], [60.0, 112894.0], [63.0, 112575.0], [62.0, 112583.0], [67.0, 112184.0], [66.0, 112311.0], [65.0, 112500.0], [64.0, 112529.0], [71.0, 111731.0], [70.0, 111765.0], [69.0, 111909.0], [68.0, 112114.0], [75.0, 110868.0], [74.0, 111119.0], [73.0, 111303.0], [72.0, 111462.0], [79.0, 110511.0], [78.0, 110172.0], [77.0, 110860.0], [76.0, 110893.0], [83.0, 109802.0], [82.0, 110132.0], [81.0, 110083.0], [80.0, 110457.0], [87.0, 109575.0], [86.0, 109660.0], [85.0, 109657.0], [84.0, 109687.0], [91.0, 109164.0], [90.0, 109246.0], [89.0, 109364.0], [88.0, 109433.0], [95.0, 108474.0], [94.0, 108713.0], [93.0, 108908.0], [92.0, 108902.0], [99.0, 108273.0], [98.0, 108240.0], [97.0, 108355.0], [96.0, 108386.0], [103.0, 107606.0], [102.0, 107736.0], [101.0, 107719.0], [100.0, 107850.0], [107.0, 106958.0], [106.0, 107031.0], [105.0, 107186.0], [104.0, 107414.0], [111.0, 106514.0], [110.0, 106686.0], [109.0, 106836.0], [108.0, 106901.0], [115.0, 106101.0], [114.0, 106495.0], [113.0, 106411.0], [112.0, 106445.0], [119.0, 105480.0], [118.0, 105709.0], [117.0, 105843.0], [116.0, 106034.0], [123.0, 105014.0], [122.0, 105237.0], [121.0, 105205.0], [120.0, 105316.0], [127.0, 104395.0], [126.0, 104560.0], [125.0, 104668.0], [124.0, 104885.0], [135.0, 103278.0], [134.0, 103456.0], [133.0, 103606.0], [132.0, 103639.0], [131.0, 103676.0], [130.0, 103842.0], [129.0, 103882.0], [128.0, 104073.0], [143.0, 102021.0], [142.0, 102117.0], [141.0, 102302.0], [140.0, 102394.0], [139.0, 102524.0], [138.0, 102597.0], [137.0, 102911.0], [136.0, 103102.0], [151.0, 100955.0], [150.0, 101031.0], [149.0, 101269.0], [148.0, 101257.0], [147.0, 101359.0], [146.0, 101477.0], [145.0, 101526.0], [144.0, 101879.0], [159.0, 99910.0], [158.0, 100116.0], [157.0, 100215.0], [156.0, 100182.0], [155.0, 100370.0], [154.0, 100373.0], [153.0, 100477.0], [152.0, 100726.0], [167.0, 98345.0], [166.0, 98458.0], [165.0, 98591.0], [164.0, 98798.0], [163.0, 98948.0], [162.0, 99084.0], [161.0, 99719.0], [160.0, 99823.0], [175.0, 96837.0], [174.0, 97023.0], [173.0, 97369.0], [172.0, 97391.0], [171.0, 97595.0], [170.0, 97742.0], [169.0, 97892.0], [168.0, 98285.0], [183.0, 95574.0], [182.0, 95722.0], [181.0, 95664.0], [180.0, 95794.0], [179.0, 95985.0], [178.0, 96173.0], [177.0, 96176.0], [176.0, 96374.0], [191.0, 94437.0], [190.0, 94440.0], [189.0, 94642.0], [188.0, 94734.0], [187.0, 94981.0], [186.0, 94957.0], [185.0, 95211.0], [184.0, 95311.0], [199.0, 93406.0], [198.0, 93415.0], [197.0, 93494.0], [196.0, 93721.0], [195.0, 93810.0], [194.0, 94152.0], [193.0, 94126.0], [192.0, 94364.0], [207.0, 91655.0], [206.0, 91919.0], [205.0, 92173.0], [204.0, 92432.0], [203.0, 92575.0], [202.0, 92681.0], [201.0, 92833.0], [200.0, 93011.0], [215.0, 90088.0], [214.0, 90430.0], [213.0, 90427.0], [212.0, 90932.0], [211.0, 91366.0], [210.0, 91502.0], [209.0, 91590.0], [208.0, 91597.0], [223.0, 88035.0], [222.0, 88188.0], [221.0, 89003.0], [220.0, 89070.0], [219.0, 89188.0], [218.0, 89386.0], [217.0, 89772.0], [216.0, 89888.0], [231.0, 86613.0], [230.0, 86831.0], [229.0, 86964.0], [228.0, 87214.0], [227.0, 87349.0], [226.0, 87337.0], [225.0, 87947.0], [224.0, 88021.0], [239.0, 84442.0], [238.0, 84912.0], [237.0, 85115.0], [236.0, 85617.0], [235.0, 85674.0], [234.0, 85782.0], [233.0, 86136.0], [232.0, 86363.0], [247.0, 83104.0], [246.0, 83099.0], [245.0, 83368.0], [244.0, 83653.0], [243.0, 83724.0], [242.0, 84088.0], [241.0, 84135.0], [240.0, 84280.0], [255.0, 80857.0], [254.0, 81084.0], [253.0, 81573.0], [252.0, 81870.0], [251.0, 82415.0], [250.0, 82582.0], [249.0, 82893.0], [248.0, 82995.0], [270.0, 73369.0], [271.0, 72490.0], [269.0, 74019.0], [268.0, 74948.0], [267.0, 75295.0], [266.0, 77042.0], [265.0, 77434.0], [264.0, 77567.0], [263.0, 78150.0], [257.0, 80225.0], [256.0, 80559.0], [259.0, 79128.0], [258.0, 80092.0], [262.0, 78403.0], [261.0, 78542.0], [260.0, 78888.0], [286.0, 34546.0], [287.0, 34586.0], [285.0, 34591.0], [284.0, 34752.0], [283.0, 54727.0], [282.0, 55651.0], [281.0, 59522.0], [280.0, 60633.0], [279.0, 62171.0], [273.0, 69842.0], [272.0, 72063.0], [275.0, 68554.0], [274.0, 69105.0], [278.0, 65371.0], [277.0, 66571.0], [276.0, 68518.0], [302.0, 20734.0], [303.0, 20731.0], [301.0, 20750.0], [300.0, 21466.0], [299.0, 22911.0], [298.0, 23261.0], [297.0, 33948.0], [296.0, 34151.0], [295.0, 34120.0], [289.0, 34387.0], [288.0, 34468.0], [291.0, 34403.0], [290.0, 34371.0], [294.0, 34219.0], [293.0, 34221.0], [292.0, 34326.0], [318.0, 20505.0], [319.0, 20502.0], [317.0, 20528.0], [316.0, 20535.0], [315.0, 20545.0], [314.0, 20563.0], [313.0, 20568.0], [312.0, 20611.0], [311.0, 20613.0], [305.0, 20715.0], [304.0, 20718.0], [307.0, 20681.0], [306.0, 20689.0], [310.0, 20618.0], [309.0, 20643.0], [308.0, 20667.0], [334.0, 20266.0], [335.0, 20263.0], [333.0, 20305.0], [332.0, 20315.0], [331.0, 20335.0], [330.0, 20339.0], [329.0, 20338.0], [328.0, 20369.0], [327.0, 20368.0], [321.0, 20455.0], [320.0, 20491.0], [323.0, 20420.0], [322.0, 20435.0], [326.0, 20385.0], [325.0, 20401.0], [324.0, 20427.0], [350.0, 20038.0], [351.0, 20032.0], [349.0, 20069.0], [348.0, 20077.0], [347.0, 20098.0], [346.0, 20104.0], [345.0, 20110.0], [344.0, 20156.0], [343.0, 20708.0], [337.0, 20227.0], [336.0, 20268.0], [339.0, 20225.0], [338.0, 20227.0], [342.0, 20180.0], [341.0, 20184.0], [340.0, 20206.0], [366.0, 19818.0], [367.0, 19797.0], [365.0, 19831.0], [364.0, 19836.0], [363.0, 19866.0], [362.0, 19867.0], [361.0, 19896.0], [360.0, 19905.0], [358.0, 19906.0], [353.0, 20013.0], [352.0, 20695.0], [355.0, 19956.0], [354.0, 19997.0], [357.0, 19926.0], [356.0, 19952.0], [381.0, 19618.0], [383.0, 19599.0], [380.0, 19634.0], [371.0, 19729.0], [370.0, 19770.0], [369.0, 19770.0], [368.0, 19780.0], [379.0, 19653.0], [378.0, 19660.0], [377.0, 19689.0], [376.0, 19696.0], [375.0, 19698.0], [374.0, 19711.0], [373.0, 19729.0], [372.0, 19730.0], [398.0, 19384.0], [399.0, 20031.0], [397.0, 19386.0], [396.0, 19389.0], [395.0, 19401.0], [394.0, 19425.0], [393.0, 19424.0], [392.0, 19429.0], [391.0, 19463.0], [385.0, 19548.0], [384.0, 20253.0], [387.0, 19527.0], [386.0, 19547.0], [390.0, 19467.0], [389.0, 19509.0], [388.0, 19509.0], [414.0, 19186.0], [415.0, 19154.0], [413.0, 19206.0], [412.0, 19215.0], [411.0, 19226.0], [410.0, 19227.0], [409.0, 19242.0], [408.0, 19250.0], [407.0, 19276.0], [401.0, 19344.0], [400.0, 19356.0], [403.0, 19404.0], [402.0, 19312.0], [406.0, 19272.0], [405.0, 19296.0], [404.0, 19297.0], [430.0, 18953.0], [431.0, 18933.0], [429.0, 18957.0], [428.0, 18972.0], [427.0, 18980.0], [426.0, 18981.0], [425.0, 19009.0], [424.0, 19011.0], [423.0, 19067.0], [417.0, 19121.0], [416.0, 19145.0], [419.0, 19096.0], [418.0, 19100.0], [422.0, 19078.0], [421.0, 19078.0], [420.0, 19080.0], [446.0, 18693.0], [447.0, 18687.0], [445.0, 18725.0], [444.0, 18735.0], [443.0, 18735.0], [442.0, 18761.0], [441.0, 18789.0], [440.0, 18793.0], [439.0, 18800.0], [433.0, 18900.0], [432.0, 18923.0], [435.0, 18889.0], [434.0, 18894.0], [438.0, 18834.0], [437.0, 18850.0], [436.0, 18869.0], [462.0, 18537.0], [463.0, 18550.0], [461.0, 18546.0], [460.0, 18555.0], [459.0, 18565.0], [458.0, 18574.0], [457.0, 18594.0], [456.0, 18863.5], [454.0, 18600.0], [449.0, 18657.0], [448.0, 18669.0], [451.0, 18622.0], [450.0, 18634.0], [453.0, 18623.0], [452.0, 18637.0], [478.0, 18296.0], [479.0, 18371.0], [477.0, 18301.0], [476.0, 18308.0], [475.0, 18397.0], [474.0, 18352.0], [473.0, 18371.0], [472.0, 18377.0], [471.0, 18394.0], [465.0, 18501.0], [464.0, 18506.0], [467.0, 18426.0], [466.0, 18495.0], [470.0, 18412.0], [469.0, 18412.0], [468.0, 18415.0], [494.0, 18022.0], [495.0, 18004.0], [493.0, 18022.0], [492.0, 18026.0], [491.0, 18049.0], [490.0, 18092.0], [489.0, 18073.0], [488.0, 18100.0], [487.0, 18161.0], [481.0, 18247.0], [480.0, 18265.0], [483.0, 18214.0], [482.0, 18219.0], [486.0, 18165.0], [485.0, 18164.0], [484.0, 18169.0], [510.0, 17793.0], [511.0, 17757.0], [509.0, 17807.0], [508.0, 17831.0], [507.0, 17844.0], [506.0, 17849.0], [505.0, 17861.0], [504.0, 17876.0], [503.0, 17882.0], [497.0, 17981.0], [496.0, 17984.0], [499.0, 17941.0], [498.0, 17944.0], [502.0, 17931.0], [501.0, 17931.0], [500.0, 17935.0], [540.0, 17381.0], [543.0, 17347.0], [529.0, 17510.0], [528.0, 17539.0], [531.0, 17496.0], [530.0, 17853.0], [533.0, 17955.0], [532.0, 17483.0], [542.0, 17352.0], [541.0, 17821.0], [539.0, 17389.0], [538.0, 17410.0], [537.0, 17444.0], [536.0, 17940.0], [527.0, 17545.0], [513.0, 17734.0], [512.0, 17737.0], [515.0, 17724.0], [514.0, 17730.0], [517.0, 17704.0], [516.0, 17709.0], [519.0, 17683.0], [518.0, 17687.0], [526.0, 17545.0], [525.0, 17550.0], [524.0, 17561.0], [523.0, 17552.0], [522.0, 17576.0], [521.0, 17634.0], [520.0, 17666.0], [535.0, 17965.0], [534.0, 17465.0], [572.0, 16900.0], [575.0, 16860.0], [561.0, 17057.0], [560.0, 17078.0], [563.0, 17042.0], [562.0, 17051.0], [565.0, 17028.0], [564.0, 17033.0], [574.0, 16885.0], [573.0, 16882.0], [571.0, 16908.0], [570.0, 16945.0], [569.0, 16984.0], [568.0, 16983.0], [559.0, 17085.0], [545.0, 17292.0], [544.0, 17305.0], [547.0, 17257.0], [546.0, 17263.0], [549.0, 17224.0], [548.0, 17242.0], [551.0, 17211.0], [550.0, 17228.0], [558.0, 17101.0], [557.0, 17111.0], [556.0, 17265.0], [555.0, 17176.5], [553.0, 17185.0], [552.0, 17202.0], [567.0, 16986.0], [566.0, 17013.0], [604.0, 16395.0], [607.0, 16354.0], [593.0, 16589.0], [592.0, 16597.0], [595.0, 16552.0], [594.0, 16572.0], [597.0, 16504.0], [596.0, 16545.0], [606.0, 16365.0], [605.0, 16377.0], [603.0, 16400.0], [602.0, 16423.0], [601.0, 16423.0], [600.0, 16422.0], [591.0, 16599.0], [577.0, 16848.0], [576.0, 16856.0], [579.0, 16804.0], [578.0, 16838.0], [581.0, 16769.0], [580.0, 16808.0], [583.0, 16726.0], [582.0, 16743.0], [590.0, 16602.0], [589.0, 16615.0], [588.0, 16633.0], [587.0, 16645.0], [586.0, 16657.0], [585.0, 16669.0], [584.0, 16687.0], [599.0, 16439.0], [598.0, 16484.0], [634.0, 15951.0], [638.0, 15869.0], [639.0, 15863.0], [625.0, 16040.0], [624.0, 16068.0], [627.0, 16014.0], [626.0, 16024.0], [629.0, 15987.0], [628.0, 15998.0], [637.0, 15887.0], [636.0, 15904.0], [635.0, 15928.0], [633.0, 15959.0], [615.0, 16234.0], [614.0, 16236.0], [613.0, 16243.0], [612.0, 16257.0], [611.0, 16272.0], [610.0, 16283.5], [608.0, 16316.0], [623.0, 16082.0], [622.0, 16092.0], [621.0, 16098.0], [620.0, 16121.0], [618.0, 16155.0], [617.0, 16201.0], [616.0, 16207.0], [631.0, 15961.0], [630.0, 15975.0], [668.0, 15423.0], [671.0, 15393.0], [657.0, 15582.0], [656.0, 15590.0], [659.0, 15551.0], [658.0, 15557.0], [661.0, 15543.0], [660.0, 15557.0], [670.0, 15421.0], [669.0, 15468.0], [667.0, 15439.0], [666.0, 15436.0], [665.0, 15468.0], [664.0, 15508.0], [655.0, 15605.0], [641.0, 15861.0], [640.0, 15863.0], [643.0, 15775.0], [642.0, 15821.0], [645.0, 15735.0], [644.0, 15752.0], [647.0, 15725.0], [646.0, 15731.0], [654.0, 15622.0], [653.0, 15644.0], [652.0, 15663.0], [651.0, 15684.0], [650.0, 15691.0], [649.0, 15702.0], [648.0, 15713.0], [663.0, 15520.0], [662.0, 15537.0], [700.0, 14986.0], [703.0, 14975.0], [688.0, 15132.0], [690.0, 15089.0], [689.0, 15107.0], [692.0, 15057.0], [691.0, 15090.0], [702.0, 14978.0], [701.0, 14962.0], [699.0, 14991.0], [698.0, 15043.0], [697.0, 15002.0], [696.0, 15034.0], [687.0, 15138.0], [673.0, 15353.0], [672.0, 15372.0], [675.0, 15335.0], [674.0, 15340.0], [677.0, 15306.0], [676.0, 15334.0], [679.0, 15280.0], [678.0, 15292.0], [686.0, 15157.0], [685.0, 15188.0], [684.0, 15193.0], [683.0, 15206.0], [682.0, 15215.0], [681.0, 15236.0], [680.0, 15243.0], [694.0, 15038.0], [693.0, 15047.0], [732.0, 14531.0], [735.0, 14483.0], [720.0, 14684.0], [723.0, 14638.5], [721.0, 14676.0], [725.0, 14583.0], [724.0, 14589.0], [734.0, 14485.0], [733.0, 14487.0], [731.0, 14529.0], [730.0, 14541.0], [729.0, 14547.0], [728.0, 14554.0], [719.0, 14712.0], [705.0, 14946.0], [704.0, 14945.0], [707.0, 14909.0], [706.0, 14921.0], [709.0, 14893.0], [708.0, 14894.0], [711.0, 14840.0], [710.0, 14854.0], [718.0, 14715.0], [717.0, 14818.0], [716.0, 14749.0], [715.0, 14759.0], [714.0, 14793.0], [713.0, 14796.0], [712.0, 14808.0], [727.0, 14560.0], [726.0, 14563.0], [764.0, 14081.0], [767.0, 14043.0], [753.0, 14210.0], [752.0, 14545.0], [755.0, 14193.0], [754.0, 14199.0], [757.0, 14183.0], [756.0, 14185.0], [766.0, 14045.0], [765.0, 14049.0], [763.0, 14117.0], [762.0, 14120.0], [761.0, 14160.0], [760.0, 14161.0], [751.0, 14251.0], [737.0, 14455.0], [736.0, 14473.0], [739.0, 14403.0], [738.0, 14436.0], [741.0, 14387.0], [740.0, 14412.0], [743.0, 14377.0], [742.0, 14391.0], [750.0, 14277.0], [749.0, 14278.0], [748.0, 14286.0], [747.0, 14290.0], [746.0, 14315.0], [745.0, 14337.0], [744.0, 14372.0], [759.0, 14164.0], [758.0, 14174.0], [796.0, 13611.0], [799.0, 13574.0], [785.0, 13771.0], [784.0, 13793.0], [787.0, 13761.0], [786.0, 13760.0], [789.0, 13766.0], [788.0, 13758.0], [798.0, 13578.0], [797.0, 13588.0], [795.0, 13615.0], [794.0, 13719.0], [793.0, 13661.0], [792.0, 13697.0], [783.0, 13791.0], [768.0, 14011.0], [770.0, 13998.0], [769.0, 14008.0], [773.0, 13924.0], [771.0, 13926.0], [775.0, 13904.0], [774.0, 13919.0], [782.0, 13857.0], [781.0, 13833.0], [780.0, 13836.0], [779.0, 13855.5], [777.0, 13860.0], [776.0, 13897.0], [791.0, 13709.0], [790.0, 13711.0], [828.0, 13126.0], [831.0, 13058.0], [817.0, 13306.0], [816.0, 13311.0], [819.0, 13285.0], [818.0, 13302.0], [821.0, 13222.0], [820.0, 13242.0], [830.0, 13079.0], [829.0, 13118.0], [827.0, 13126.0], [826.0, 13150.0], [825.0, 13189.0], [824.0, 13198.0], [815.0, 13321.0], [800.0, 13560.0], [803.0, 13515.0], [802.0, 13542.5], [805.0, 13480.0], [804.0, 13514.0], [807.0, 13439.0], [806.0, 13461.0], [814.0, 13335.0], [813.0, 13365.0], [812.0, 13381.0], [811.0, 13452.0], [810.0, 13397.0], [809.0, 13419.0], [808.0, 13421.0], [823.0, 13205.0], [822.0, 13211.0], [860.0, 12689.0], [863.0, 12624.0], [849.0, 12845.0], [848.0, 12846.0], [851.0, 12811.0], [850.0, 12843.0], [853.0, 12781.0], [852.0, 12804.0], [862.0, 12635.0], [861.0, 12652.0], [859.0, 12696.0], [858.0, 12702.0], [857.0, 12707.0], [856.0, 12719.0], [847.0, 12856.0], [832.0, 13213.0], [834.0, 13042.0], [833.0, 13048.0], [836.0, 13005.0], [835.0, 13015.0], [839.0, 12997.0], [838.0, 12999.0], [846.0, 13037.0], [845.0, 12885.0], [844.0, 12917.0], [843.0, 12928.0], [842.0, 12947.0], [841.0, 12963.0], [840.0, 12965.0], [855.0, 12724.0], [854.0, 12764.0], [892.0, 12174.0], [895.0, 12079.0], [881.0, 12382.0], [880.0, 12570.0], [883.0, 12350.0], [882.0, 12380.0], [885.0, 12318.0], [884.0, 12346.0], [894.0, 12083.0], [893.0, 12120.0], [891.0, 12208.0], [890.0, 12234.0], [889.0, 12232.0], [888.0, 12245.0], [879.0, 12398.0], [865.0, 12592.0], [864.0, 12598.0], [867.0, 12537.0], [866.0, 12580.0], [869.0, 12534.0], [868.0, 12537.0], [871.0, 12509.0], [870.0, 12518.0], [878.0, 12427.0], [877.0, 12425.0], [876.0, 12433.0], [875.0, 12476.0], [874.0, 12487.0], [873.0, 12493.0], [872.0, 12504.0], [887.0, 12256.0], [886.0, 12264.0], [924.0, 11543.0], [927.0, 11583.0], [913.0, 11852.0], [912.0, 11871.0], [915.0, 11768.0], [914.0, 11818.0], [917.0, 11719.0], [916.0, 11751.0], [926.0, 11568.0], [925.0, 11577.0], [923.0, 11584.0], [922.0, 11610.0], [921.0, 11647.0], [920.0, 11665.0], [911.0, 11875.0], [896.0, 12013.0], [899.0, 12037.5], [897.0, 11982.0], [901.0, 11941.0], [900.0, 11949.0], [903.0, 12057.0], [902.0, 11937.0], [910.0, 11842.0], [909.0, 11890.0], [908.0, 11956.0], [907.0, 11984.0], [906.0, 11983.0], [905.0, 11915.0], [904.0, 11999.0], [919.0, 11671.0], [918.0, 11712.0], [956.0, 11050.0], [959.0, 10982.0], [945.0, 11174.0], [944.0, 11189.0], [947.0, 11177.0], [946.0, 11179.0], [949.0, 11133.0], [948.0, 11079.0], [958.0, 10963.0], [957.0, 11051.0], [955.0, 11009.0], [954.0, 11085.0], [953.0, 11076.0], [952.0, 11096.0], [943.0, 11216.5], [928.0, 11546.0], [931.0, 11525.5], [929.0, 11571.0], [933.0, 11365.0], [932.0, 11390.0], [935.0, 11366.0], [934.0, 11372.0], [941.0, 11243.0], [940.0, 11293.0], [939.0, 11328.0], [937.0, 11327.0], [936.0, 11327.0], [951.0, 11108.0], [950.0, 11136.0], [988.0, 9355.0], [991.0, 8910.0], [977.0, 10592.0], [976.0, 10662.0], [979.0, 10601.0], [978.0, 10597.0], [981.0, 10556.0], [980.0, 10502.0], [990.0, 9028.0], [989.0, 9183.0], [987.0, 9476.0], [986.0, 9555.0], [985.0, 10071.0], [984.0, 10137.0], [975.0, 10741.0], [960.0, 11006.0], [963.0, 10954.0], [962.0, 10942.5], [965.0, 10902.0], [964.0, 10925.0], [967.0, 10857.0], [966.0, 10910.0], [974.0, 10757.0], [973.0, 10722.0], [972.0, 10789.0], [971.0, 10756.0], [970.0, 10792.0], [969.0, 10799.0], [968.0, 10801.0], [983.0, 10308.0], [982.0, 10478.0], [1000.0, 8021.0], [999.0, 8381.0], [998.0, 8470.0], [997.0, 8506.0], [996.0, 8517.0], [995.0, 8651.0], [994.0, 8748.0], [993.0, 8838.0], [992.0, 8859.0], [1.0, 119227.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.5179999999995, 39770.13300000004]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 383.8, "minX": 1.62248604E12, "maxY": 185039.01666666666, "series": [{"data": [[1.62248604E12, 29731.983333333334], [1.62248616E12, 68267.46666666666], [1.6224861E12, 185039.01666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62248604E12, 383.8], [1.62248616E12, 1033.6], [1.6224861E12, 2382.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248616E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10893.980198019803, "minX": 1.62248604E12, "maxY": 101321.49264705884, "series": [{"data": [[1.62248604E12, 10893.980198019803], [1.62248616E12, 101321.49264705884], [1.6224861E12, 17719.928229665074]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248616E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 10610.732673267323, "minX": 1.62248604E12, "maxY": 101039.46691176464, "series": [{"data": [[1.62248604E12, 10610.732673267323], [1.62248616E12, 101039.46691176464], [1.6224861E12, 17437.40191387559]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248616E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5404.602941176467, "minX": 1.62248604E12, "maxY": 12361.419457735246, "series": [{"data": [[1.62248604E12, 7413.188118811879], [1.62248616E12, 5404.602941176467], [1.6224861E12, 12361.419457735246]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248616E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 54727.0, "minX": 1.6224861E12, "maxY": 119227.0, "series": [{"data": [[1.62248616E12, 119227.0], [1.6224861E12, 69842.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62248616E12, 116825.9], [1.6224861E12, 69694.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62248616E12, 119060.05], [1.6224861E12, 69842.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62248616E12, 117859.95], [1.6224861E12, 69842.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62248616E12, 72063.0], [1.6224861E12, 54727.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62248616E12, 103006.5], [1.6224861E12, 65371.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248616E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8699.5, "minX": 1.0, "maxY": 117551.5, "series": [{"data": [[1.0, 62171.0], [2.0, 70952.5], [4.0, 87485.0], [8.0, 110484.0], [16.0, 117551.5], [9.0, 103639.0], [5.0, 93494.0], [10.0, 112552.0], [3.0, 85029.0], [6.0, 98524.5], [7.0, 103613.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 10801.0], [2.0, 23086.0], [10.0, 8699.5], [52.0, 11574.0], [13.0, 34387.0], [55.0, 12509.0], [59.0, 18026.0], [62.0, 16138.0], [1.0, 20984.5], [64.0, 13373.0], [66.0, 15731.5], [65.0, 17577.0], [71.0, 18981.0], [5.0, 9476.0], [27.0, 20568.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 71.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8419.0, "minX": 1.0, "maxY": 117267.5, "series": [{"data": [[1.0, 61892.0], [2.0, 70674.5], [4.0, 87201.0], [8.0, 110202.0], [16.0, 117267.5], [9.0, 103362.0], [5.0, 93222.0], [10.0, 112259.0], [3.0, 84750.0], [6.0, 98247.5], [7.0, 103323.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 10524.0], [2.0, 22808.5], [10.0, 8419.0], [52.0, 11293.5], [13.0, 34102.0], [55.0, 12235.0], [59.0, 17751.0], [62.0, 15857.5], [1.0, 20712.5], [64.0, 13091.0], [66.0, 15451.5], [65.0, 17295.5], [71.0, 18702.0], [5.0, 9190.0], [27.0, 20286.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 71.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62248604E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62248604E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248604E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.62248604E12, "maxY": 10.033333333333333, "series": [{"data": [[1.62248616E12, 4.533333333333333], [1.6224861E12, 0.18333333333333332]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6224861E12, 0.23333333333333334]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.62248604E12, 1.6833333333333333], [1.6224861E12, 10.033333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248616E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.62248604E12, "maxY": 10.266666666666667, "series": [{"data": [[1.62248604E12, 1.6833333333333333], [1.6224861E12, 10.266666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.62248616E12, 4.533333333333333], [1.6224861E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248616E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.62248604E12, "maxY": 10.266666666666667, "series": [{"data": [[1.62248616E12, 4.533333333333333], [1.6224861E12, 0.18333333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62248604E12, 1.6833333333333333], [1.6224861E12, 10.266666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248616E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

