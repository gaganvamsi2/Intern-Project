/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9741.0, "minX": 0.0, "maxY": 119489.0, "series": [{"data": [[0.0, 9741.0], [0.1, 9741.0], [0.2, 9773.0], [0.3, 9773.0], [0.4, 10375.0], [0.5, 10375.0], [0.6, 10375.0], [0.7, 10732.0], [0.8, 10793.0], [0.9, 10793.0], [1.0, 10801.0], [1.1, 10801.0], [1.2, 10833.0], [1.3, 10833.0], [1.4, 10848.0], [1.5, 10848.0], [1.6, 10855.0], [1.7, 10855.0], [1.8, 10860.0], [1.9, 10860.0], [2.0, 10897.0], [2.1, 10897.0], [2.2, 10921.0], [2.3, 10921.0], [2.4, 11005.0], [2.5, 11005.0], [2.6, 11040.0], [2.7, 11040.0], [2.8, 11040.0], [2.9, 11074.0], [3.0, 11074.0], [3.1, 11084.0], [3.2, 11084.0], [3.3, 11165.0], [3.4, 11165.0], [3.5, 11241.0], [3.6, 11241.0], [3.7, 11302.0], [3.8, 11302.0], [3.9, 11324.0], [4.0, 11324.0], [4.1, 11348.0], [4.2, 11348.0], [4.3, 11364.0], [4.4, 11364.0], [4.5, 11367.0], [4.6, 11367.0], [4.7, 11454.0], [4.8, 11454.0], [4.9, 11499.0], [5.0, 11499.0], [5.1, 11548.0], [5.2, 11548.0], [5.3, 11563.0], [5.4, 11563.0], [5.5, 11579.0], [5.6, 11579.0], [5.7, 11611.0], [5.8, 11611.0], [5.9, 11620.0], [6.0, 11620.0], [6.1, 11629.0], [6.2, 11629.0], [6.3, 11634.0], [6.4, 11634.0], [6.5, 11647.0], [6.6, 11647.0], [6.7, 11700.0], [6.8, 11700.0], [6.9, 11700.0], [7.0, 11700.0], [7.1, 11725.0], [7.2, 11725.0], [7.3, 11727.0], [7.4, 11727.0], [7.5, 11741.0], [7.6, 11741.0], [7.7, 11792.0], [7.8, 11792.0], [7.9, 11803.0], [8.0, 11803.0], [8.1, 11815.0], [8.2, 11815.0], [8.3, 11823.0], [8.4, 11823.0], [8.5, 11852.0], [8.6, 11852.0], [8.7, 11866.0], [8.8, 11899.0], [8.9, 11899.0], [9.0, 11909.0], [9.1, 11909.0], [9.2, 11918.0], [9.3, 11918.0], [9.4, 11951.0], [9.5, 11951.0], [9.6, 11961.0], [9.7, 11961.0], [9.8, 11981.0], [9.9, 11981.0], [10.0, 12021.0], [10.1, 12021.0], [10.2, 12031.0], [10.3, 12031.0], [10.4, 12037.0], [10.5, 12037.0], [10.6, 12053.0], [10.7, 12053.0], [10.8, 12070.0], [10.9, 12070.0], [11.0, 12112.0], [11.1, 12112.0], [11.2, 12129.0], [11.3, 12129.0], [11.4, 12133.0], [11.5, 12133.0], [11.6, 12138.0], [11.7, 12138.0], [11.8, 12147.0], [11.9, 12147.0], [12.0, 12151.0], [12.1, 12151.0], [12.2, 12202.0], [12.3, 12202.0], [12.4, 12211.0], [12.5, 12211.0], [12.6, 12218.0], [12.7, 12218.0], [12.8, 12253.0], [12.9, 12253.0], [13.0, 12291.0], [13.1, 12291.0], [13.2, 12304.0], [13.3, 12304.0], [13.4, 12323.0], [13.5, 12323.0], [13.6, 12335.0], [13.7, 12335.0], [13.8, 12336.0], [13.9, 12336.0], [14.0, 12353.0], [14.1, 12353.0], [14.2, 12375.0], [14.3, 12375.0], [14.4, 12416.0], [14.5, 12416.0], [14.6, 12422.0], [14.7, 12422.0], [14.8, 12480.0], [14.9, 12480.0], [15.0, 12485.0], [15.1, 12485.0], [15.2, 12489.0], [15.3, 12489.0], [15.4, 12503.0], [15.5, 12503.0], [15.6, 12505.0], [15.7, 12505.0], [15.8, 12531.0], [15.9, 12531.0], [16.0, 12535.0], [16.1, 12535.0], [16.2, 12560.0], [16.3, 12560.0], [16.4, 12566.0], [16.5, 12566.0], [16.6, 12582.0], [16.7, 12582.0], [16.8, 12619.0], [16.9, 12619.0], [17.0, 12630.0], [17.1, 12630.0], [17.2, 12638.0], [17.3, 12638.0], [17.4, 12646.0], [17.5, 12646.0], [17.6, 12661.0], [17.7, 12661.0], [17.8, 12671.0], [17.9, 12671.0], [18.0, 12702.0], [18.1, 12702.0], [18.2, 12704.0], [18.3, 12704.0], [18.4, 12723.0], [18.5, 12723.0], [18.6, 12746.0], [18.7, 12746.0], [18.8, 12766.0], [18.9, 12766.0], [19.0, 12788.0], [19.1, 12788.0], [19.2, 12840.0], [19.3, 12840.0], [19.4, 12843.0], [19.5, 12843.0], [19.6, 12857.0], [19.7, 12857.0], [19.8, 12862.0], [19.9, 12862.0], [20.0, 12867.0], [20.1, 12867.0], [20.2, 12874.0], [20.3, 12874.0], [20.4, 12908.0], [20.5, 12908.0], [20.6, 12912.0], [20.7, 12912.0], [20.8, 12943.0], [20.9, 12943.0], [21.0, 12945.0], [21.1, 12945.0], [21.2, 12967.0], [21.3, 12967.0], [21.4, 12984.0], [21.5, 12984.0], [21.6, 12989.0], [21.7, 12989.0], [21.8, 13018.0], [21.9, 13018.0], [22.0, 13031.0], [22.1, 13031.0], [22.2, 13036.0], [22.3, 13036.0], [22.4, 13055.0], [22.5, 13055.0], [22.6, 13064.0], [22.7, 13064.0], [22.8, 13103.0], [22.9, 13103.0], [23.0, 13110.0], [23.1, 13110.0], [23.2, 13113.0], [23.3, 13113.0], [23.4, 13178.0], [23.5, 13178.0], [23.6, 13194.0], [23.7, 13194.0], [23.8, 13201.0], [23.9, 13201.0], [24.0, 13205.0], [24.1, 13205.0], [24.2, 13212.0], [24.3, 13212.0], [24.4, 13238.0], [24.5, 13238.0], [24.6, 13264.0], [24.7, 13264.0], [24.8, 13280.0], [24.9, 13280.0], [25.0, 13293.0], [25.1, 13293.0], [25.2, 13312.0], [25.3, 13312.0], [25.4, 13341.0], [25.5, 13341.0], [25.6, 13363.0], [25.7, 13363.0], [25.8, 13387.0], [25.9, 13387.0], [26.0, 13413.0], [26.1, 13413.0], [26.2, 13428.0], [26.3, 13428.0], [26.4, 13441.0], [26.5, 13441.0], [26.6, 13450.0], [26.7, 13450.0], [26.8, 13467.0], [26.9, 13467.0], [27.0, 13497.0], [27.1, 13497.0], [27.2, 13498.0], [27.3, 13498.0], [27.4, 13508.0], [27.5, 13508.0], [27.6, 13513.0], [27.7, 13513.0], [27.8, 13529.0], [27.9, 13529.0], [28.0, 13551.0], [28.1, 13551.0], [28.2, 13586.0], [28.3, 13586.0], [28.4, 13645.0], [28.5, 13645.0], [28.6, 13655.0], [28.7, 13655.0], [28.8, 13674.0], [28.9, 13674.0], [29.0, 13697.0], [29.1, 13697.0], [29.2, 13697.0], [29.3, 13697.0], [29.4, 13698.0], [29.5, 13698.0], [29.6, 13704.0], [29.7, 13704.0], [29.8, 13734.0], [29.9, 13734.0], [30.0, 13751.0], [30.1, 13751.0], [30.2, 13756.0], [30.3, 13756.0], [30.4, 13790.0], [30.5, 13790.0], [30.6, 13814.0], [30.7, 13814.0], [30.8, 13844.0], [30.9, 13844.0], [31.0, 13854.0], [31.1, 13854.0], [31.2, 13858.0], [31.3, 13858.0], [31.4, 13876.0], [31.5, 13876.0], [31.6, 13881.0], [31.7, 13881.0], [31.8, 13886.0], [31.9, 13886.0], [32.0, 13913.0], [32.1, 13913.0], [32.2, 13929.0], [32.3, 13929.0], [32.4, 13966.0], [32.5, 13966.0], [32.6, 14000.0], [32.7, 14000.0], [32.8, 14005.0], [32.9, 14005.0], [33.0, 14020.0], [33.1, 14020.0], [33.2, 14023.0], [33.3, 14023.0], [33.4, 14048.0], [33.5, 14048.0], [33.6, 14053.0], [33.7, 14053.0], [33.8, 14061.0], [33.9, 14061.0], [34.0, 14069.0], [34.1, 14069.0], [34.2, 14071.0], [34.3, 14071.0], [34.4, 14137.0], [34.5, 14137.0], [34.6, 14142.0], [34.7, 14142.0], [34.8, 14144.0], [34.9, 14144.0], [35.0, 14146.0], [35.1, 14146.0], [35.2, 14176.0], [35.3, 14176.0], [35.4, 14195.0], [35.5, 14195.0], [35.6, 14199.0], [35.7, 14199.0], [35.8, 14207.0], [35.9, 14207.0], [36.0, 14214.0], [36.1, 14214.0], [36.2, 14223.0], [36.3, 14223.0], [36.4, 14238.0], [36.5, 14238.0], [36.6, 14275.0], [36.7, 14275.0], [36.8, 14276.0], [36.9, 14276.0], [37.0, 14283.0], [37.1, 14283.0], [37.2, 14296.0], [37.3, 14296.0], [37.4, 14326.0], [37.5, 14326.0], [37.6, 14340.0], [37.7, 14340.0], [37.8, 14344.0], [37.9, 14344.0], [38.0, 14385.0], [38.1, 14385.0], [38.2, 14404.0], [38.3, 14404.0], [38.4, 14404.0], [38.5, 14415.0], [38.6, 14415.0], [38.7, 14418.0], [38.8, 14418.0], [38.9, 14420.0], [39.0, 14420.0], [39.1, 14448.0], [39.2, 14448.0], [39.3, 14473.0], [39.4, 14473.0], [39.5, 14676.0], [39.6, 14676.0], [39.7, 15037.0], [39.8, 15037.0], [39.9, 15421.0], [40.0, 15421.0], [40.1, 15473.0], [40.2, 15473.0], [40.3, 16140.0], [40.4, 16140.0], [40.5, 16795.0], [40.6, 16795.0], [40.7, 26778.0], [40.8, 26778.0], [40.9, 26801.0], [41.0, 26801.0], [41.1, 26885.0], [41.2, 26885.0], [41.3, 26992.0], [41.4, 26992.0], [41.5, 26999.0], [41.6, 26999.0], [41.7, 27045.0], [41.8, 27045.0], [41.9, 27077.0], [42.0, 27077.0], [42.1, 27134.0], [42.2, 27134.0], [42.3, 27256.0], [42.4, 27256.0], [42.5, 27294.0], [42.6, 27294.0], [42.7, 27355.0], [42.8, 27355.0], [42.9, 27376.0], [43.0, 27376.0], [43.1, 27418.0], [43.2, 27418.0], [43.3, 27526.0], [43.4, 27526.0], [43.5, 71123.0], [43.6, 71123.0], [43.7, 72832.0], [43.8, 72832.0], [43.9, 74493.0], [44.0, 74493.0], [44.1, 74509.0], [44.2, 74509.0], [44.3, 75766.0], [44.4, 75766.0], [44.5, 76194.0], [44.6, 76194.0], [44.7, 76454.0], [44.8, 76454.0], [44.9, 77263.0], [45.0, 77263.0], [45.1, 77397.0], [45.2, 77397.0], [45.3, 78040.0], [45.4, 78040.0], [45.5, 79573.0], [45.6, 79573.0], [45.7, 79915.0], [45.8, 79915.0], [45.9, 80038.0], [46.0, 80038.0], [46.1, 80065.0], [46.2, 80065.0], [46.3, 80355.0], [46.4, 80355.0], [46.5, 80587.0], [46.6, 80587.0], [46.7, 80588.0], [46.8, 80588.0], [46.9, 80680.0], [47.0, 80680.0], [47.1, 80795.0], [47.2, 80795.0], [47.3, 80921.0], [47.4, 80921.0], [47.5, 81082.0], [47.6, 81082.0], [47.7, 81278.0], [47.8, 81278.0], [47.9, 81298.0], [48.0, 81298.0], [48.1, 81661.0], [48.2, 81661.0], [48.3, 81992.0], [48.4, 81992.0], [48.5, 81994.0], [48.6, 81994.0], [48.7, 82272.0], [48.8, 82272.0], [48.9, 82612.0], [49.0, 82612.0], [49.1, 83324.0], [49.2, 83324.0], [49.3, 83838.0], [49.4, 83838.0], [49.5, 83938.0], [49.6, 83938.0], [49.7, 84054.0], [49.8, 84054.0], [49.9, 84350.0], [50.0, 84350.0], [50.1, 84382.0], [50.2, 84382.0], [50.3, 84384.0], [50.4, 84384.0], [50.5, 84483.0], [50.6, 84483.0], [50.7, 84807.0], [50.8, 84807.0], [50.9, 84929.0], [51.0, 84929.0], [51.1, 84943.0], [51.2, 84943.0], [51.3, 85519.0], [51.4, 85519.0], [51.5, 85599.0], [51.6, 85599.0], [51.7, 85676.0], [51.8, 85676.0], [51.9, 85862.0], [52.0, 85862.0], [52.1, 85971.0], [52.2, 85971.0], [52.3, 86010.0], [52.4, 86010.0], [52.5, 86155.0], [52.6, 86155.0], [52.7, 86580.0], [52.8, 86580.0], [52.9, 86832.0], [53.0, 86832.0], [53.1, 86874.0], [53.2, 86874.0], [53.3, 87137.0], [53.4, 87137.0], [53.5, 87355.0], [53.6, 87355.0], [53.7, 87357.0], [53.8, 87357.0], [53.9, 87554.0], [54.0, 87554.0], [54.1, 87592.0], [54.2, 87592.0], [54.3, 88615.0], [54.4, 88615.0], [54.5, 88696.0], [54.6, 88696.0], [54.7, 88984.0], [54.8, 88984.0], [54.9, 89089.0], [55.0, 89089.0], [55.1, 89107.0], [55.2, 89107.0], [55.3, 89175.0], [55.4, 89175.0], [55.5, 89325.0], [55.6, 89325.0], [55.7, 89407.0], [55.8, 89407.0], [55.9, 89600.0], [56.0, 89600.0], [56.1, 89750.0], [56.2, 89750.0], [56.3, 89863.0], [56.4, 89863.0], [56.5, 89977.0], [56.6, 89977.0], [56.7, 90287.0], [56.8, 90287.0], [56.9, 90287.0], [57.0, 90287.0], [57.1, 90479.0], [57.2, 90479.0], [57.3, 90514.0], [57.4, 90514.0], [57.5, 90635.0], [57.6, 90635.0], [57.7, 91004.0], [57.8, 91004.0], [57.9, 91239.0], [58.0, 91239.0], [58.1, 91635.0], [58.2, 91635.0], [58.3, 91681.0], [58.4, 91681.0], [58.5, 91700.0], [58.6, 91700.0], [58.7, 91776.0], [58.8, 91776.0], [58.9, 91838.0], [59.0, 91838.0], [59.1, 91894.0], [59.2, 91894.0], [59.3, 92190.0], [59.4, 92190.0], [59.5, 92202.0], [59.6, 92202.0], [59.7, 92274.0], [59.8, 92274.0], [59.9, 92598.0], [60.0, 92598.0], [60.1, 92624.0], [60.2, 92624.0], [60.3, 92910.0], [60.4, 92910.0], [60.5, 93125.0], [60.6, 93125.0], [60.7, 93305.0], [60.8, 93305.0], [60.9, 93603.0], [61.0, 93603.0], [61.1, 93898.0], [61.2, 93898.0], [61.3, 94468.0], [61.4, 94468.0], [61.5, 94568.0], [61.6, 94568.0], [61.7, 94896.0], [61.8, 94896.0], [61.9, 95214.0], [62.0, 95214.0], [62.1, 95317.0], [62.2, 95317.0], [62.3, 95353.0], [62.4, 95353.0], [62.5, 95434.0], [62.6, 95434.0], [62.7, 95440.0], [62.8, 95440.0], [62.9, 95515.0], [63.0, 95515.0], [63.1, 95813.0], [63.2, 95813.0], [63.3, 95819.0], [63.4, 95819.0], [63.5, 95923.0], [63.6, 95923.0], [63.7, 95936.0], [63.8, 95936.0], [63.9, 96047.0], [64.0, 96047.0], [64.1, 96194.0], [64.2, 96194.0], [64.3, 96329.0], [64.4, 96329.0], [64.5, 96836.0], [64.6, 96836.0], [64.7, 97152.0], [64.8, 97152.0], [64.9, 97200.0], [65.0, 97200.0], [65.1, 97302.0], [65.2, 97302.0], [65.3, 97449.0], [65.4, 97449.0], [65.5, 97456.0], [65.6, 97456.0], [65.7, 97568.0], [65.8, 97568.0], [65.9, 97722.0], [66.0, 97722.0], [66.1, 97780.0], [66.2, 97780.0], [66.3, 98487.0], [66.4, 98487.0], [66.5, 98976.0], [66.6, 98976.0], [66.7, 99166.0], [66.8, 99166.0], [66.9, 99299.0], [67.0, 99299.0], [67.1, 99353.0], [67.2, 99353.0], [67.3, 99358.0], [67.4, 99358.0], [67.5, 99507.0], [67.6, 99507.0], [67.7, 99701.0], [67.8, 99701.0], [67.9, 99972.0], [68.0, 99972.0], [68.1, 100107.0], [68.2, 100107.0], [68.3, 100404.0], [68.4, 100404.0], [68.5, 100797.0], [68.6, 100797.0], [68.7, 100969.0], [68.8, 100969.0], [68.9, 101027.0], [69.0, 101027.0], [69.1, 101091.0], [69.2, 101091.0], [69.3, 101147.0], [69.4, 101147.0], [69.5, 101178.0], [69.6, 101178.0], [69.7, 101273.0], [69.8, 101273.0], [69.9, 101282.0], [70.0, 101282.0], [70.1, 101502.0], [70.2, 101502.0], [70.3, 101537.0], [70.4, 101537.0], [70.5, 101851.0], [70.6, 101851.0], [70.7, 101970.0], [70.8, 101970.0], [70.9, 102301.0], [71.0, 102301.0], [71.1, 102477.0], [71.2, 102477.0], [71.3, 102519.0], [71.4, 102519.0], [71.5, 102579.0], [71.6, 102579.0], [71.7, 102822.0], [71.8, 102822.0], [71.9, 103000.0], [72.0, 103000.0], [72.1, 103027.0], [72.2, 103027.0], [72.3, 103220.0], [72.4, 103220.0], [72.5, 103222.0], [72.6, 103222.0], [72.7, 103272.0], [72.8, 103272.0], [72.9, 103325.0], [73.0, 103325.0], [73.1, 103374.0], [73.2, 103374.0], [73.3, 103690.0], [73.4, 103690.0], [73.5, 103826.0], [73.6, 103826.0], [73.7, 103924.0], [73.8, 103924.0], [73.9, 103949.0], [74.0, 103949.0], [74.1, 104245.0], [74.2, 104245.0], [74.3, 104252.0], [74.4, 104252.0], [74.5, 104352.0], [74.6, 104352.0], [74.7, 104427.0], [74.8, 104427.0], [74.9, 104608.0], [75.0, 104608.0], [75.1, 104622.0], [75.2, 104622.0], [75.3, 104771.0], [75.4, 104771.0], [75.5, 105110.0], [75.6, 105110.0], [75.7, 105110.0], [75.8, 105110.0], [75.9, 105244.0], [76.0, 105244.0], [76.1, 105254.0], [76.2, 105254.0], [76.3, 105263.0], [76.4, 105263.0], [76.5, 105326.0], [76.6, 105326.0], [76.7, 105379.0], [76.8, 105379.0], [76.9, 105469.0], [77.0, 105469.0], [77.1, 105543.0], [77.2, 105543.0], [77.3, 105710.0], [77.4, 105710.0], [77.5, 105841.0], [77.6, 105841.0], [77.7, 106055.0], [77.8, 106055.0], [77.9, 106069.0], [78.0, 106069.0], [78.1, 106313.0], [78.2, 106313.0], [78.3, 106351.0], [78.4, 106351.0], [78.5, 106511.0], [78.6, 106511.0], [78.7, 106721.0], [78.8, 106721.0], [78.9, 106735.0], [79.0, 106735.0], [79.1, 106838.0], [79.2, 106838.0], [79.3, 106894.0], [79.4, 106894.0], [79.5, 107178.0], [79.6, 107178.0], [79.7, 107271.0], [79.8, 107271.0], [79.9, 107274.0], [80.0, 107274.0], [80.1, 107308.0], [80.2, 107308.0], [80.3, 107567.0], [80.4, 107567.0], [80.5, 107600.0], [80.6, 107600.0], [80.7, 107792.0], [80.8, 107792.0], [80.9, 107889.0], [81.0, 107889.0], [81.1, 108016.0], [81.2, 108016.0], [81.3, 108249.0], [81.4, 108249.0], [81.5, 108251.0], [81.6, 108251.0], [81.7, 108392.0], [81.8, 108392.0], [81.9, 108450.0], [82.0, 108450.0], [82.1, 108585.0], [82.2, 108585.0], [82.3, 108609.0], [82.4, 108609.0], [82.5, 108765.0], [82.6, 108765.0], [82.7, 108843.0], [82.8, 108843.0], [82.9, 108861.0], [83.0, 108861.0], [83.1, 108902.0], [83.2, 108902.0], [83.3, 109015.0], [83.4, 109015.0], [83.5, 109281.0], [83.6, 109281.0], [83.7, 109325.0], [83.8, 109325.0], [83.9, 109381.0], [84.0, 109381.0], [84.1, 109703.0], [84.2, 109703.0], [84.3, 109747.0], [84.4, 109747.0], [84.5, 109854.0], [84.6, 109854.0], [84.7, 109934.0], [84.8, 109934.0], [84.9, 110245.0], [85.0, 110245.0], [85.1, 110329.0], [85.2, 110329.0], [85.3, 110386.0], [85.4, 110386.0], [85.5, 110410.0], [85.6, 110410.0], [85.7, 110553.0], [85.8, 110553.0], [85.9, 110607.0], [86.0, 110607.0], [86.1, 110726.0], [86.2, 110726.0], [86.3, 110886.0], [86.4, 110886.0], [86.5, 110980.0], [86.6, 110980.0], [86.7, 111004.0], [86.8, 111004.0], [86.9, 111112.0], [87.0, 111112.0], [87.1, 111192.0], [87.2, 111192.0], [87.3, 111391.0], [87.4, 111391.0], [87.5, 111617.0], [87.6, 111617.0], [87.7, 111655.0], [87.8, 111655.0], [87.9, 111836.0], [88.0, 111836.0], [88.1, 112097.0], [88.2, 112097.0], [88.3, 112204.0], [88.4, 112204.0], [88.5, 112236.0], [88.6, 112236.0], [88.7, 112514.0], [88.8, 112514.0], [88.9, 112549.0], [89.0, 112549.0], [89.1, 112708.0], [89.2, 112708.0], [89.3, 112811.0], [89.4, 112811.0], [89.5, 113030.0], [89.6, 113030.0], [89.7, 113130.0], [89.8, 113130.0], [89.9, 113662.0], [90.0, 113662.0], [90.1, 113718.0], [90.2, 113718.0], [90.3, 113760.0], [90.4, 113760.0], [90.5, 114051.0], [90.6, 114051.0], [90.7, 114289.0], [90.8, 114289.0], [90.9, 114326.0], [91.0, 114326.0], [91.1, 114354.0], [91.2, 114354.0], [91.3, 114358.0], [91.4, 114358.0], [91.5, 114480.0], [91.6, 114480.0], [91.7, 114513.0], [91.8, 114513.0], [91.9, 114634.0], [92.0, 114634.0], [92.1, 114817.0], [92.2, 114817.0], [92.3, 114957.0], [92.4, 114957.0], [92.5, 115068.0], [92.6, 115068.0], [92.7, 115235.0], [92.8, 115235.0], [92.9, 115320.0], [93.0, 115320.0], [93.1, 115816.0], [93.2, 115816.0], [93.3, 116103.0], [93.4, 116103.0], [93.5, 116143.0], [93.6, 116143.0], [93.7, 116272.0], [93.8, 116272.0], [93.9, 116287.0], [94.0, 116287.0], [94.1, 116479.0], [94.2, 116479.0], [94.3, 116615.0], [94.4, 116615.0], [94.5, 116716.0], [94.6, 116716.0], [94.7, 116745.0], [94.8, 116745.0], [94.9, 116821.0], [95.0, 116821.0], [95.1, 117018.0], [95.2, 117018.0], [95.3, 117158.0], [95.4, 117158.0], [95.5, 117192.0], [95.6, 117192.0], [95.7, 117375.0], [95.8, 117375.0], [95.9, 117423.0], [96.0, 117423.0], [96.1, 117593.0], [96.2, 117593.0], [96.3, 117637.0], [96.4, 117637.0], [96.5, 117743.0], [96.6, 117743.0], [96.7, 117863.0], [96.8, 117863.0], [96.9, 118076.0], [97.0, 118076.0], [97.1, 118089.0], [97.2, 118089.0], [97.3, 118177.0], [97.4, 118177.0], [97.5, 118333.0], [97.6, 118333.0], [97.7, 118460.0], [97.8, 118460.0], [97.9, 118476.0], [98.0, 118476.0], [98.1, 118482.0], [98.2, 118482.0], [98.3, 118671.0], [98.4, 118671.0], [98.5, 118879.0], [98.6, 118879.0], [98.7, 119075.0], [98.8, 119075.0], [98.9, 119114.0], [99.0, 119114.0], [99.1, 119228.0], [99.2, 119228.0], [99.3, 119331.0], [99.4, 119331.0], [99.5, 119352.0], [99.6, 119352.0], [99.7, 119464.0], [99.8, 119464.0], [99.9, 119489.0], [100.0, 119489.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 9700.0, "maxY": 9.0, "series": [{"data": [[79500.0, 1.0], [80300.0, 1.0], [81900.0, 2.0], [84300.0, 3.0], [85900.0, 1.0], [87500.0, 2.0], [89100.0, 2.0], [89900.0, 1.0], [93100.0, 1.0], [95500.0, 1.0], [96300.0, 1.0], [97100.0, 1.0], [99500.0, 1.0], [101100.0, 2.0], [101900.0, 1.0], [104300.0, 1.0], [105100.0, 2.0], [106700.0, 2.0], [107500.0, 1.0], [108300.0, 1.0], [109900.0, 1.0], [110700.0, 1.0], [113100.0, 1.0], [117100.0, 2.0], [81000.0, 1.0], [82600.0, 1.0], [85800.0, 1.0], [89000.0, 1.0], [89800.0, 1.0], [90600.0, 1.0], [92200.0, 2.0], [93800.0, 1.0], [95400.0, 2.0], [101000.0, 2.0], [101800.0, 1.0], [104200.0, 2.0], [105800.0, 1.0], [108200.0, 2.0], [109000.0, 1.0], [109800.0, 1.0], [110600.0, 1.0], [112200.0, 2.0], [113000.0, 1.0], [114600.0, 1.0], [116200.0, 2.0], [117000.0, 1.0], [117800.0, 1.0], [118600.0, 1.0], [119400.0, 2.0], [74500.0, 1.0], [76100.0, 1.0], [80900.0, 1.0], [83300.0, 1.0], [84900.0, 2.0], [86500.0, 1.0], [87300.0, 2.0], [88900.0, 1.0], [89700.0, 1.0], [90500.0, 1.0], [92100.0, 1.0], [92900.0, 1.0], [94500.0, 1.0], [95300.0, 2.0], [96100.0, 1.0], [97700.0, 2.0], [99300.0, 2.0], [100100.0, 1.0], [100900.0, 1.0], [102500.0, 2.0], [103300.0, 2.0], [105700.0, 1.0], [106500.0, 1.0], [107300.0, 1.0], [108900.0, 1.0], [109700.0, 2.0], [110500.0, 1.0], [111300.0, 1.0], [113700.0, 2.0], [114500.0, 1.0], [115300.0, 1.0], [116100.0, 2.0], [117700.0, 1.0], [119300.0, 2.0], [9700.0, 2.0], [10300.0, 1.0], [10700.0, 2.0], [10800.0, 6.0], [10900.0, 1.0], [11000.0, 4.0], [11100.0, 1.0], [11200.0, 1.0], [11300.0, 5.0], [11400.0, 2.0], [11500.0, 3.0], [11600.0, 5.0], [11700.0, 6.0], [11800.0, 6.0], [11900.0, 5.0], [12000.0, 5.0], [12100.0, 6.0], [12200.0, 5.0], [12300.0, 6.0], [12400.0, 5.0], [12600.0, 6.0], [12500.0, 7.0], [12700.0, 6.0], [12800.0, 6.0], [12900.0, 7.0], [13000.0, 5.0], [13100.0, 5.0], [13200.0, 7.0], [13300.0, 4.0], [13400.0, 7.0], [13500.0, 5.0], [13600.0, 6.0], [13700.0, 5.0], [13800.0, 7.0], [13900.0, 3.0], [14000.0, 9.0], [14100.0, 7.0], [14200.0, 8.0], [14300.0, 4.0], [14400.0, 6.0], [14600.0, 1.0], [15000.0, 1.0], [15400.0, 2.0], [16100.0, 1.0], [26800.0, 2.0], [27000.0, 2.0], [27200.0, 2.0], [27400.0, 1.0], [72800.0, 1.0], [74400.0, 1.0], [80000.0, 2.0], [81600.0, 1.0], [85600.0, 1.0], [84000.0, 1.0], [84800.0, 1.0], [89600.0, 1.0], [90400.0, 1.0], [91200.0, 1.0], [93600.0, 1.0], [94400.0, 1.0], [95200.0, 1.0], [96000.0, 1.0], [96800.0, 1.0], [98400.0, 1.0], [99200.0, 1.0], [102400.0, 1.0], [103200.0, 3.0], [107200.0, 2.0], [108000.0, 1.0], [108800.0, 2.0], [110400.0, 1.0], [112000.0, 1.0], [112800.0, 1.0], [113600.0, 1.0], [114400.0, 1.0], [115200.0, 1.0], [116800.0, 1.0], [117600.0, 1.0], [118400.0, 3.0], [119200.0, 1.0], [71100.0, 1.0], [79900.0, 1.0], [80700.0, 1.0], [83900.0, 1.0], [85500.0, 2.0], [87100.0, 1.0], [95900.0, 2.0], [97500.0, 1.0], [99100.0, 1.0], [99900.0, 1.0], [100700.0, 1.0], [101500.0, 2.0], [102300.0, 1.0], [103900.0, 2.0], [104700.0, 1.0], [105500.0, 1.0], [106300.0, 2.0], [107100.0, 1.0], [108700.0, 1.0], [110300.0, 2.0], [111100.0, 2.0], [112700.0, 1.0], [114300.0, 3.0], [116700.0, 2.0], [117500.0, 1.0], [118300.0, 1.0], [119100.0, 1.0], [80600.0, 1.0], [82200.0, 1.0], [83800.0, 1.0], [88600.0, 2.0], [89400.0, 1.0], [90200.0, 2.0], [91000.0, 1.0], [91800.0, 2.0], [92600.0, 1.0], [95800.0, 2.0], [97400.0, 2.0], [103000.0, 2.0], [103800.0, 1.0], [104600.0, 2.0], [105400.0, 1.0], [107800.0, 1.0], [108600.0, 1.0], [110200.0, 1.0], [111000.0, 1.0], [111800.0, 1.0], [114200.0, 1.0], [115000.0, 1.0], [115800.0, 1.0], [116600.0, 1.0], [117400.0, 1.0], [119000.0, 1.0], [75700.0, 1.0], [77300.0, 1.0], [80500.0, 2.0], [86100.0, 1.0], [89300.0, 1.0], [91700.0, 2.0], [92500.0, 1.0], [93300.0, 1.0], [97300.0, 1.0], [98900.0, 1.0], [99700.0, 1.0], [105300.0, 2.0], [107700.0, 1.0], [108500.0, 1.0], [109300.0, 2.0], [110900.0, 1.0], [112500.0, 2.0], [114900.0, 1.0], [117300.0, 1.0], [118100.0, 1.0], [16700.0, 1.0], [26700.0, 1.0], [26900.0, 2.0], [27100.0, 1.0], [27300.0, 2.0], [27500.0, 1.0], [76400.0, 1.0], [77200.0, 1.0], [78000.0, 1.0], [81200.0, 2.0], [84400.0, 1.0], [86000.0, 1.0], [86800.0, 2.0], [91600.0, 2.0], [94800.0, 1.0], [97200.0, 1.0], [100400.0, 1.0], [101200.0, 2.0], [102800.0, 1.0], [103600.0, 1.0], [104400.0, 1.0], [105200.0, 3.0], [106000.0, 2.0], [106800.0, 2.0], [107600.0, 1.0], [108400.0, 1.0], [109200.0, 1.0], [110800.0, 1.0], [111600.0, 2.0], [114000.0, 1.0], [114800.0, 1.0], [116400.0, 1.0], [118000.0, 2.0], [118800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 119400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 217.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 283.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 283.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 217.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 85.00591715976343, "minX": 1.6224864E12, "maxY": 392.0230414746546, "series": [{"data": [[1.62248652E12, 85.00591715976343], [1.62248646E12, 226.52631578947378], [1.6224864E12, 392.0230414746546]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248652E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9757.0, "minX": 1.0, "maxY": 119489.0, "series": [{"data": [[2.0, 119464.0], [3.0, 119352.0], [4.0, 119331.0], [5.0, 119228.0], [6.0, 119114.0], [7.0, 119075.0], [8.0, 118879.0], [9.0, 118671.0], [10.0, 118460.0], [11.0, 118476.0], [12.0, 118482.0], [13.0, 118333.0], [14.0, 118177.0], [15.0, 118089.0], [16.0, 118076.0], [17.0, 117863.0], [18.0, 117743.0], [19.0, 117593.0], [20.0, 117637.0], [21.0, 117375.0], [22.0, 117423.0], [23.0, 117192.0], [24.0, 117158.0], [25.0, 117018.0], [26.0, 116821.0], [27.0, 116745.0], [28.0, 116716.0], [29.0, 116615.0], [30.0, 116479.0], [31.0, 116272.0], [33.0, 116103.0], [32.0, 116287.0], [35.0, 115816.0], [34.0, 116143.0], [37.0, 115235.0], [36.0, 115320.0], [39.0, 114957.0], [38.0, 115068.0], [41.0, 114634.0], [40.0, 114817.0], [43.0, 114480.0], [42.0, 114513.0], [45.0, 114354.0], [44.0, 114358.0], [47.0, 114326.0], [46.0, 114289.0], [49.0, 113718.0], [48.0, 114051.0], [51.0, 113760.0], [50.0, 113662.0], [53.0, 113030.0], [52.0, 113130.0], [55.0, 112708.0], [54.0, 112811.0], [57.0, 112514.0], [56.0, 112549.0], [59.0, 112204.0], [58.0, 112236.0], [61.0, 111836.0], [60.0, 112097.0], [63.0, 111617.0], [62.0, 111655.0], [67.0, 111112.0], [66.0, 110980.0], [65.0, 111192.0], [64.0, 111391.0], [71.0, 110607.0], [70.0, 110726.0], [69.0, 110886.0], [68.0, 111004.0], [75.0, 110410.0], [74.0, 110329.0], [73.0, 110386.0], [72.0, 110553.0], [79.0, 109747.0], [78.0, 109854.0], [77.0, 109934.0], [76.0, 110245.0], [83.0, 109325.0], [82.0, 109281.0], [81.0, 109381.0], [80.0, 109703.0], [87.0, 108843.0], [86.0, 108861.0], [85.0, 108902.0], [84.0, 109015.0], [91.0, 108450.0], [90.0, 108585.0], [89.0, 108609.0], [88.0, 108765.0], [95.0, 108016.0], [94.0, 108251.0], [93.0, 108249.0], [92.0, 108392.0], [99.0, 107600.0], [98.0, 107567.0], [97.0, 107889.0], [96.0, 107792.0], [103.0, 107178.0], [102.0, 107271.0], [101.0, 107308.0], [100.0, 107274.0], [107.0, 106735.0], [106.0, 106721.0], [105.0, 106894.0], [104.0, 106838.0], [111.0, 106069.0], [110.0, 106351.0], [109.0, 106313.0], [108.0, 106511.0], [115.0, 105543.0], [114.0, 105710.0], [113.0, 105841.0], [112.0, 106055.0], [119.0, 105326.0], [118.0, 105263.0], [117.0, 105379.0], [116.0, 105469.0], [123.0, 105110.0], [122.0, 105110.0], [121.0, 105249.0], [127.0, 104427.0], [126.0, 104622.0], [125.0, 104608.0], [124.0, 104771.0], [135.0, 103374.0], [134.0, 103690.0], [133.0, 103826.0], [132.0, 103924.0], [131.0, 103949.0], [130.0, 104245.0], [129.0, 104252.0], [128.0, 104352.0], [143.0, 102579.0], [142.0, 102822.0], [141.0, 103027.0], [140.0, 103000.0], [139.0, 103220.0], [138.0, 103272.0], [137.0, 103222.0], [136.0, 103325.0], [151.0, 101282.0], [150.0, 101537.0], [149.0, 101502.0], [148.0, 101851.0], [147.0, 101970.0], [146.0, 102301.0], [145.0, 102477.0], [144.0, 102519.0], [159.0, 100404.0], [158.0, 100797.0], [157.0, 100969.0], [156.0, 101027.0], [155.0, 101091.0], [154.0, 101178.0], [153.0, 101147.0], [152.0, 101273.0], [167.0, 99166.0], [166.0, 99353.0], [165.0, 99299.0], [164.0, 99358.0], [163.0, 99507.0], [162.0, 99701.0], [161.0, 99972.0], [160.0, 100107.0], [175.0, 97302.0], [174.0, 97449.0], [173.0, 97456.0], [172.0, 97568.0], [171.0, 97722.0], [170.0, 97780.0], [169.0, 98487.0], [168.0, 98976.0], [183.0, 95923.0], [182.0, 95936.0], [181.0, 96047.0], [180.0, 96194.0], [179.0, 96329.0], [178.0, 96836.0], [177.0, 97152.0], [176.0, 97200.0], [191.0, 95214.0], [190.0, 95353.0], [189.0, 95317.0], [188.0, 95440.0], [187.0, 95434.0], [186.0, 95515.0], [185.0, 95819.0], [184.0, 95813.0], [199.0, 92910.0], [198.0, 93125.0], [197.0, 93305.0], [196.0, 93603.0], [195.0, 93898.0], [194.0, 94468.0], [193.0, 94568.0], [192.0, 94896.0], [207.0, 91776.0], [206.0, 91838.0], [205.0, 91894.0], [204.0, 92190.0], [203.0, 92202.0], [202.0, 92274.0], [201.0, 92624.0], [200.0, 92598.0], [215.0, 90479.0], [214.0, 90514.0], [213.0, 90635.0], [212.0, 91004.0], [211.0, 91239.0], [210.0, 91635.0], [209.0, 91681.0], [208.0, 91700.0], [223.0, 89325.0], [222.0, 89407.0], [221.0, 89600.0], [220.0, 89863.0], [219.0, 89750.0], [218.0, 89977.0], [217.0, 90287.0], [216.0, 90287.0], [231.0, 87592.0], [230.0, 87554.0], [229.0, 88615.0], [228.0, 88696.0], [227.0, 88984.0], [226.0, 89107.0], [225.0, 89175.0], [224.0, 89089.0], [239.0, 86010.0], [238.0, 86155.0], [237.0, 86580.0], [236.0, 86832.0], [235.0, 86874.0], [234.0, 87137.0], [233.0, 87357.0], [232.0, 87355.0], [247.0, 84807.0], [246.0, 84929.0], [245.0, 84943.0], [244.0, 85519.0], [243.0, 85599.0], [242.0, 85676.0], [241.0, 85862.0], [240.0, 85971.0], [255.0, 83324.0], [254.0, 83838.0], [253.0, 83938.0], [252.0, 84054.0], [251.0, 84372.0], [248.0, 84483.0], [270.0, 80038.0], [271.0, 80065.0], [269.0, 80355.0], [268.0, 80587.0], [267.0, 80588.0], [266.0, 80680.0], [265.0, 80795.0], [264.0, 80921.0], [263.0, 81082.0], [257.0, 82272.0], [256.0, 82612.0], [259.0, 81992.0], [258.0, 81994.0], [262.0, 81298.0], [261.0, 81278.0], [260.0, 81661.0], [286.0, 27355.0], [287.0, 27418.0], [285.0, 27376.0], [284.0, 27526.0], [283.0, 71123.0], [282.0, 72832.0], [281.0, 74493.0], [280.0, 74509.0], [279.0, 75766.0], [273.0, 79573.0], [272.0, 79915.0], [275.0, 77397.0], [274.0, 78040.0], [278.0, 76194.0], [277.0, 76454.0], [276.0, 77263.0], [302.0, 15037.0], [303.0, 14676.0], [301.0, 15421.0], [300.0, 15473.0], [299.0, 16140.0], [298.0, 16795.0], [297.0, 26778.0], [296.0, 26801.0], [295.0, 26885.0], [289.0, 27294.0], [288.0, 27256.0], [291.0, 27045.0], [290.0, 27134.0], [294.0, 26992.0], [293.0, 26999.0], [292.0, 27077.0], [318.0, 14238.0], [319.0, 14223.0], [317.0, 14276.0], [316.0, 14275.0], [315.0, 14283.0], [314.0, 14296.0], [313.0, 14326.0], [312.0, 14340.0], [311.0, 14344.0], [305.0, 14448.0], [304.0, 14473.0], [307.0, 14418.0], [306.0, 14420.0], [310.0, 14385.0], [309.0, 14404.0], [308.0, 14415.0], [334.0, 14023.0], [335.0, 14020.0], [333.0, 14048.0], [332.0, 14053.0], [331.0, 14061.0], [330.0, 14071.0], [329.0, 14069.0], [328.0, 14137.0], [327.0, 14142.0], [321.0, 14207.0], [320.0, 14214.0], [323.0, 14195.0], [322.0, 14199.0], [326.0, 14146.0], [325.0, 14144.0], [324.0, 14176.0], [350.0, 13734.0], [351.0, 13929.0], [349.0, 13756.0], [348.0, 13751.0], [347.0, 13790.0], [346.0, 13814.0], [345.0, 13844.0], [344.0, 13854.0], [343.0, 13858.0], [337.0, 14000.0], [336.0, 14005.0], [339.0, 13913.0], [338.0, 13966.0], [342.0, 13876.0], [341.0, 13881.0], [340.0, 13886.0], [366.0, 13467.0], [367.0, 13450.0], [365.0, 13497.0], [364.0, 13498.0], [363.0, 13508.0], [362.0, 13513.0], [361.0, 13529.0], [360.0, 13551.0], [359.0, 13586.0], [353.0, 13698.0], [352.0, 13704.0], [355.0, 13697.0], [354.0, 13697.0], [358.0, 13645.0], [357.0, 13655.0], [356.0, 13674.0], [382.0, 13341.0], [383.0, 13280.0], [381.0, 13178.0], [380.0, 13194.0], [379.0, 13205.0], [378.0, 13201.0], [377.0, 13212.0], [376.0, 13238.0], [375.0, 13264.0], [369.0, 13428.0], [368.0, 13441.0], [371.0, 13387.0], [370.0, 13413.0], [374.0, 13293.0], [373.0, 13312.0], [372.0, 13363.0], [398.0, 12908.0], [399.0, 12874.0], [397.0, 12912.0], [396.0, 12943.0], [395.0, 12945.0], [394.0, 13036.0], [393.0, 12967.0], [392.0, 12984.0], [391.0, 12989.0], [385.0, 13110.0], [384.0, 13113.0], [387.0, 13064.0], [386.0, 13103.0], [390.0, 13018.0], [389.0, 13031.0], [388.0, 13055.0], [414.0, 12630.0], [415.0, 12619.0], [413.0, 12638.0], [412.0, 12646.0], [411.0, 12671.0], [410.0, 12702.0], [409.0, 12704.0], [408.0, 12723.0], [407.0, 12746.0], [401.0, 12862.0], [400.0, 12867.0], [403.0, 12843.0], [402.0, 12857.0], [406.0, 12766.0], [405.0, 12788.0], [404.0, 12840.0], [430.0, 12489.0], [431.0, 12304.0], [429.0, 12353.0], [428.0, 12375.0], [427.0, 12416.0], [426.0, 12422.0], [425.0, 12661.0], [424.0, 12480.0], [423.0, 12485.0], [417.0, 12566.0], [416.0, 12582.0], [419.0, 12535.0], [418.0, 12560.0], [422.0, 12503.0], [421.0, 12505.0], [420.0, 12531.0], [446.0, 12112.0], [447.0, 12070.0], [445.0, 12021.0], [444.0, 12133.0], [443.0, 12129.0], [442.0, 12147.0], [441.0, 12138.0], [440.0, 12202.0], [439.0, 12151.0], [433.0, 12323.0], [432.0, 12336.0], [435.0, 12335.0], [434.0, 12291.0], [438.0, 12211.0], [437.0, 12218.0], [436.0, 12253.0], [461.0, 11815.0], [462.0, 11792.0], [460.0, 11803.0], [451.0, 11981.0], [450.0, 12031.0], [449.0, 12037.0], [448.0, 12053.0], [459.0, 11823.0], [458.0, 11852.0], [457.0, 11866.0], [456.0, 11899.0], [455.0, 11918.0], [454.0, 11909.0], [453.0, 11956.0], [477.0, 11454.0], [478.0, 11364.0], [476.0, 11499.0], [467.0, 11725.0], [466.0, 11727.0], [465.0, 11700.0], [464.0, 11720.5], [475.0, 11548.0], [474.0, 11563.0], [473.0, 11579.0], [472.0, 11611.0], [471.0, 11620.0], [470.0, 11629.0], [469.0, 11647.0], [468.0, 11634.0], [494.0, 10833.0], [495.0, 10801.0], [493.0, 10848.0], [492.0, 10876.0], [490.0, 10921.0], [489.0, 10860.0], [488.0, 11005.0], [487.0, 11040.0], [481.0, 11324.0], [480.0, 11357.5], [483.0, 11241.0], [482.0, 11302.0], [486.0, 11074.0], [485.0, 11084.0], [484.0, 11165.0], [500.0, 9757.0], [498.0, 10375.0], [497.0, 10732.0], [496.0, 10793.0], [1.0, 119489.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[250.5180000000004, 62999.610000000044]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 433.2, "minX": 1.6224864E12, "maxY": 63997.75, "series": [{"data": [[1.62248652E12, 42416.183333333334], [1.62248646E12, 28612.1], [1.6224864E12, 63997.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62248652E12, 642.2], [1.62248646E12, 433.2], [1.6224864E12, 824.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248652E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 13785.829493087556, "minX": 1.6224864E12, "maxY": 109354.91715976331, "series": [{"data": [[1.62248652E12, 109354.91715976331], [1.62248646E12, 87958.76315789476], [1.6224864E12, 13785.829493087556]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248652E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13505.073732718893, "minX": 1.6224864E12, "maxY": 109073.5680473372, "series": [{"data": [[1.62248652E12, 109073.5680473372], [1.62248646E12, 87676.68421052628], [1.6224864E12, 13505.073732718893]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248652E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4841.850877192983, "minX": 1.6224864E12, "maxY": 8914.193548387091, "series": [{"data": [[1.62248652E12, 5700.207100591713], [1.62248646E12, 4841.850877192983], [1.6224864E12, 8914.193548387091]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248652E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 71123.0, "minX": 1.62248646E12, "maxY": 119489.0, "series": [{"data": [[1.62248652E12, 119489.0], [1.62248646E12, 97780.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62248652E12, 117863.0], [1.62248646E12, 96120.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62248652E12, 119471.5], [1.62248646E12, 97771.3]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62248652E12, 118775.0], [1.62248646E12, 97338.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62248652E12, 98487.0], [1.62248646E12, 71123.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62248652E12, 108902.0], [1.62248646E12, 89036.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248652E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10878.5, "minX": 1.0, "maxY": 107792.0, "series": [{"data": [[1.0, 71977.5], [2.0, 76858.5], [4.0, 87455.5], [8.0, 106276.5], [9.0, 107792.0], [5.0, 87134.0], [11.0, 103261.5], [6.0, 105147.0], [3.0, 96192.5], [7.0, 94793.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 15447.0], [16.0, 10878.5], [9.0, 26999.0], [5.0, 27376.0], [45.0, 11815.0], [51.0, 12661.0], [54.0, 13568.5], [31.0, 14275.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10596.0, "minX": 1.0, "maxY": 107513.0, "series": [{"data": [[1.0, 71697.5], [2.0, 76580.5], [4.0, 87174.0], [8.0, 105991.0], [9.0, 107513.0], [5.0, 86852.5], [11.0, 102974.5], [6.0, 104870.0], [3.0, 95908.5], [7.0, 94513.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 15168.0], [16.0, 10596.0], [9.0, 26706.0], [5.0, 27097.0], [45.0, 11534.0], [51.0, 12386.0], [54.0, 13290.5], [31.0, 13990.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.6224864E12, "maxY": 8.333333333333334, "series": [{"data": [[1.6224864E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6224864E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.6224864E12, "maxY": 3.3833333333333333, "series": [{"data": [[1.62248652E12, 2.816666666666667], [1.62248646E12, 1.9]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6224864E12, 0.23333333333333334]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6224864E12, 3.3833333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248652E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.6224864E12, "maxY": 3.6166666666666667, "series": [{"data": [[1.6224864E12, 3.6166666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.62248652E12, 2.816666666666667], [1.62248646E12, 1.9]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248652E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.6224864E12, "maxY": 3.6166666666666667, "series": [{"data": [[1.62248652E12, 2.816666666666667], [1.62248646E12, 1.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6224864E12, 3.6166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248652E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

