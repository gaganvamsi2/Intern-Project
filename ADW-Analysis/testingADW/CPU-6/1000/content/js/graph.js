/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10933.0, "minX": 0.0, "maxY": 34313.0, "series": [{"data": [[0.0, 10933.0], [0.1, 10940.0], [0.2, 10948.0], [0.3, 10948.0], [0.4, 10994.0], [0.5, 11046.0], [0.6, 11048.0], [0.7, 11078.0], [0.8, 11118.0], [0.9, 11159.0], [1.0, 11205.0], [1.1, 11242.0], [1.2, 11244.0], [1.3, 11262.0], [1.4, 11262.0], [1.5, 11302.0], [1.6, 11314.0], [1.7, 11360.0], [1.8, 11374.0], [1.9, 11375.0], [2.0, 11379.0], [2.1, 11387.0], [2.2, 11401.0], [2.3, 11412.0], [2.4, 11413.0], [2.5, 11468.0], [2.6, 11478.0], [2.7, 11503.0], [2.8, 11504.0], [2.9, 11522.0], [3.0, 11522.0], [3.1, 11537.0], [3.2, 11551.0], [3.3, 11574.0], [3.4, 11576.0], [3.5, 11600.0], [3.6, 11616.0], [3.7, 11677.0], [3.8, 11688.0], [3.9, 11714.0], [4.0, 11727.0], [4.1, 11734.0], [4.2, 11736.0], [4.3, 11744.0], [4.4, 11779.0], [4.5, 11800.0], [4.6, 11819.0], [4.7, 11822.0], [4.8, 11833.0], [4.9, 11853.0], [5.0, 11866.0], [5.1, 11870.0], [5.2, 11898.0], [5.3, 11902.0], [5.4, 11905.0], [5.5, 11912.0], [5.6, 11922.0], [5.7, 11936.0], [5.8, 11949.0], [5.9, 11985.0], [6.0, 12027.0], [6.1, 12031.0], [6.2, 12035.0], [6.3, 12067.0], [6.4, 12072.0], [6.5, 12080.0], [6.6, 12102.0], [6.7, 12104.0], [6.8, 12107.0], [6.9, 12118.0], [7.0, 12127.0], [7.1, 12128.0], [7.2, 12139.0], [7.3, 12140.0], [7.4, 12147.0], [7.5, 12153.0], [7.6, 12170.0], [7.7, 12190.0], [7.8, 12197.0], [7.9, 12208.0], [8.0, 12212.0], [8.1, 12213.0], [8.2, 12215.0], [8.3, 12256.0], [8.4, 12257.0], [8.5, 12275.0], [8.6, 12291.0], [8.7, 12298.0], [8.8, 12308.0], [8.9, 12309.0], [9.0, 12309.0], [9.1, 12326.0], [9.2, 12357.0], [9.3, 12374.0], [9.4, 12391.0], [9.5, 12409.0], [9.6, 12423.0], [9.7, 12423.0], [9.8, 12443.0], [9.9, 12453.0], [10.0, 12524.0], [10.1, 12531.0], [10.2, 12531.0], [10.3, 12546.0], [10.4, 12556.0], [10.5, 12561.0], [10.6, 12589.0], [10.7, 12605.0], [10.8, 12621.0], [10.9, 12633.0], [11.0, 12653.0], [11.1, 12665.0], [11.2, 12667.0], [11.3, 12684.0], [11.4, 12701.0], [11.5, 12730.0], [11.6, 12748.0], [11.7, 12756.0], [11.8, 12784.0], [11.9, 12785.0], [12.0, 12794.0], [12.1, 12820.0], [12.2, 12860.0], [12.3, 12875.0], [12.4, 12881.0], [12.5, 12894.0], [12.6, 12915.0], [12.7, 12916.0], [12.8, 12934.0], [12.9, 12936.0], [13.0, 12943.0], [13.1, 12952.0], [13.2, 12955.0], [13.3, 12970.0], [13.4, 12976.0], [13.5, 13025.0], [13.6, 13047.0], [13.7, 13051.0], [13.8, 13101.0], [13.9, 13106.0], [14.0, 13108.0], [14.1, 13114.0], [14.2, 13122.0], [14.3, 13139.0], [14.4, 13145.0], [14.5, 13151.0], [14.6, 13171.0], [14.7, 13186.0], [14.8, 13190.0], [14.9, 13205.0], [15.0, 13219.0], [15.1, 13244.0], [15.2, 13245.0], [15.3, 13259.0], [15.4, 13267.0], [15.5, 13268.0], [15.6, 13294.0], [15.7, 13305.0], [15.8, 13316.0], [15.9, 13319.0], [16.0, 13363.0], [16.1, 13431.0], [16.2, 13435.0], [16.3, 13443.0], [16.4, 13466.0], [16.5, 13467.0], [16.6, 13481.0], [16.7, 13490.0], [16.8, 13503.0], [16.9, 13513.0], [17.0, 13531.0], [17.1, 13539.0], [17.2, 13550.0], [17.3, 13555.0], [17.4, 13605.0], [17.5, 13617.0], [17.6, 13623.0], [17.7, 13638.0], [17.8, 13673.0], [17.9, 13673.0], [18.0, 13698.0], [18.1, 13702.0], [18.2, 13711.0], [18.3, 13714.0], [18.4, 13741.0], [18.5, 13748.0], [18.6, 13773.0], [18.7, 13790.0], [18.8, 13814.0], [18.9, 13828.0], [19.0, 13830.0], [19.1, 13850.0], [19.2, 13859.0], [19.3, 13866.0], [19.4, 13866.0], [19.5, 13940.0], [19.6, 13955.0], [19.7, 13967.0], [19.8, 13997.0], [19.9, 13998.0], [20.0, 14020.0], [20.1, 14031.0], [20.2, 14037.0], [20.3, 14040.0], [20.4, 14041.0], [20.5, 14049.0], [20.6, 14064.0], [20.7, 14069.0], [20.8, 14097.0], [20.9, 14106.0], [21.0, 14116.0], [21.1, 14141.0], [21.2, 14180.0], [21.3, 14192.0], [21.4, 14204.0], [21.5, 14215.0], [21.6, 14234.0], [21.7, 14240.0], [21.8, 14272.0], [21.9, 14277.0], [22.0, 14303.0], [22.1, 14320.0], [22.2, 14330.0], [22.3, 14337.0], [22.4, 14375.0], [22.5, 14387.0], [22.6, 14414.0], [22.7, 14431.0], [22.8, 14445.0], [22.9, 14456.0], [23.0, 14458.0], [23.1, 14470.0], [23.2, 14470.0], [23.3, 14499.0], [23.4, 14515.0], [23.5, 14533.0], [23.6, 14549.0], [23.7, 14557.0], [23.8, 14565.0], [23.9, 14583.0], [24.0, 14588.0], [24.1, 14601.0], [24.2, 14614.0], [24.3, 14618.0], [24.4, 14632.0], [24.5, 14636.0], [24.6, 14645.0], [24.7, 14664.0], [24.8, 14681.0], [24.9, 14688.0], [25.0, 14702.0], [25.1, 14708.0], [25.2, 14709.0], [25.3, 14712.0], [25.4, 14722.0], [25.5, 14734.0], [25.6, 14797.0], [25.7, 14797.0], [25.8, 14808.0], [25.9, 14820.0], [26.0, 14821.0], [26.1, 14825.0], [26.2, 14847.0], [26.3, 14858.0], [26.4, 14869.0], [26.5, 14871.0], [26.6, 14880.0], [26.7, 14881.0], [26.8, 14884.0], [26.9, 14917.0], [27.0, 14934.0], [27.1, 14945.0], [27.2, 14946.0], [27.3, 14976.0], [27.4, 14986.0], [27.5, 15015.0], [27.6, 15026.0], [27.7, 15042.0], [27.8, 15043.0], [27.9, 15050.0], [28.0, 15054.0], [28.1, 15065.0], [28.2, 15077.0], [28.3, 15111.0], [28.4, 15120.0], [28.5, 15146.0], [28.6, 15158.0], [28.7, 15166.0], [28.8, 15174.0], [28.9, 15212.0], [29.0, 15222.0], [29.1, 15269.0], [29.2, 15275.0], [29.3, 15280.0], [29.4, 15287.0], [29.5, 15288.0], [29.6, 15324.0], [29.7, 15341.0], [29.8, 15368.0], [29.9, 15385.0], [30.0, 15412.0], [30.1, 15428.0], [30.2, 15432.0], [30.3, 15439.0], [30.4, 15442.0], [30.5, 15447.0], [30.6, 15477.0], [30.7, 15481.0], [30.8, 15498.0], [30.9, 15525.0], [31.0, 15530.0], [31.1, 15530.0], [31.2, 15542.0], [31.3, 15547.0], [31.4, 15548.0], [31.5, 15586.0], [31.6, 15600.0], [31.7, 15601.0], [31.8, 15601.0], [31.9, 15604.0], [32.0, 15635.0], [32.1, 15673.0], [32.2, 15676.0], [32.3, 15678.0], [32.4, 15701.0], [32.5, 15705.0], [32.6, 15730.0], [32.7, 15738.0], [32.8, 15740.0], [32.9, 15760.0], [33.0, 15792.0], [33.1, 15793.0], [33.2, 15827.0], [33.3, 15860.0], [33.4, 15868.0], [33.5, 15887.0], [33.6, 15899.0], [33.7, 15909.0], [33.8, 15963.0], [33.9, 15983.0], [34.0, 15990.0], [34.1, 16009.0], [34.2, 16010.0], [34.3, 16012.0], [34.4, 16030.0], [34.5, 16039.0], [34.6, 16040.0], [34.7, 16044.0], [34.8, 16047.0], [34.9, 16048.0], [35.0, 16099.0], [35.1, 16100.0], [35.2, 16105.0], [35.3, 16117.0], [35.4, 16122.0], [35.5, 16146.0], [35.6, 16172.0], [35.7, 16175.0], [35.8, 16190.0], [35.9, 16222.0], [36.0, 16233.0], [36.1, 16244.0], [36.2, 16272.0], [36.3, 16294.0], [36.4, 16298.0], [36.5, 16310.0], [36.6, 16320.0], [36.7, 16354.0], [36.8, 16354.0], [36.9, 16366.0], [37.0, 16392.0], [37.1, 16394.0], [37.2, 16421.0], [37.3, 16445.0], [37.4, 16455.0], [37.5, 16457.0], [37.6, 16464.0], [37.7, 16466.0], [37.8, 16476.0], [37.9, 16508.0], [38.0, 16510.0], [38.1, 16522.0], [38.2, 16528.0], [38.3, 16534.0], [38.4, 16538.0], [38.5, 16548.0], [38.6, 16562.0], [38.7, 16579.0], [38.8, 16599.0], [38.9, 16622.0], [39.0, 16639.0], [39.1, 16641.0], [39.2, 16650.0], [39.3, 16650.0], [39.4, 16661.0], [39.5, 16689.0], [39.6, 16695.0], [39.7, 16702.0], [39.8, 16715.0], [39.9, 16742.0], [40.0, 16777.0], [40.1, 16781.0], [40.2, 16789.0], [40.3, 16795.0], [40.4, 16800.0], [40.5, 16815.0], [40.6, 16871.0], [40.7, 16873.0], [40.8, 16893.0], [40.9, 16903.0], [41.0, 16920.0], [41.1, 16923.0], [41.2, 16981.0], [41.3, 16985.0], [41.4, 17010.0], [41.5, 17012.0], [41.6, 17017.0], [41.7, 17022.0], [41.8, 17024.0], [41.9, 17068.0], [42.0, 17075.0], [42.1, 17115.0], [42.2, 17126.0], [42.3, 17141.0], [42.4, 17154.0], [42.5, 17155.0], [42.6, 17161.0], [42.7, 17181.0], [42.8, 17187.0], [42.9, 17204.0], [43.0, 17221.0], [43.1, 17233.0], [43.2, 17250.0], [43.3, 17267.0], [43.4, 17279.0], [43.5, 17318.0], [43.6, 17337.0], [43.7, 17351.0], [43.8, 17357.0], [43.9, 17374.0], [44.0, 17376.0], [44.1, 17401.0], [44.2, 17458.0], [44.3, 17459.0], [44.4, 17459.0], [44.5, 17465.0], [44.6, 17475.0], [44.7, 17507.0], [44.8, 17517.0], [44.9, 17518.0], [45.0, 17564.0], [45.1, 17566.0], [45.2, 17578.0], [45.3, 17579.0], [45.4, 17583.0], [45.5, 17585.0], [45.6, 17616.0], [45.7, 17621.0], [45.8, 17645.0], [45.9, 17657.0], [46.0, 17658.0], [46.1, 17692.0], [46.2, 17704.0], [46.3, 17740.0], [46.4, 17743.0], [46.5, 17752.0], [46.6, 17769.0], [46.7, 17772.0], [46.8, 17783.0], [46.9, 17796.0], [47.0, 17809.0], [47.1, 17863.0], [47.2, 17865.0], [47.3, 17899.0], [47.4, 17905.0], [47.5, 17935.0], [47.6, 17967.0], [47.7, 17977.0], [47.8, 18113.0], [47.9, 18137.0], [48.0, 18236.0], [48.1, 18319.0], [48.2, 18320.0], [48.3, 18322.0], [48.4, 18333.0], [48.5, 18361.0], [48.6, 18377.0], [48.7, 18399.0], [48.8, 18403.0], [48.9, 18415.0], [49.0, 18483.0], [49.1, 18488.0], [49.2, 18515.0], [49.3, 18590.0], [49.4, 18626.0], [49.5, 18635.0], [49.6, 18642.0], [49.7, 18664.0], [49.8, 18695.0], [49.9, 18708.0], [50.0, 18711.0], [50.1, 18717.0], [50.2, 18773.0], [50.3, 18809.0], [50.4, 18845.0], [50.5, 18864.0], [50.6, 18872.0], [50.7, 18883.0], [50.8, 18893.0], [50.9, 18919.0], [51.0, 18919.0], [51.1, 18934.0], [51.2, 18935.0], [51.3, 18983.0], [51.4, 18986.0], [51.5, 18993.0], [51.6, 18996.0], [51.7, 19037.0], [51.8, 19066.0], [51.9, 19100.0], [52.0, 19110.0], [52.1, 19122.0], [52.2, 19123.0], [52.3, 19124.0], [52.4, 19144.0], [52.5, 19147.0], [52.6, 19148.0], [52.7, 19149.0], [52.8, 19212.0], [52.9, 19212.0], [53.0, 19213.0], [53.1, 19220.0], [53.2, 19258.0], [53.3, 19262.0], [53.4, 19265.0], [53.5, 19273.0], [53.6, 19275.0], [53.7, 19278.0], [53.8, 19315.0], [53.9, 19332.0], [54.0, 19359.0], [54.1, 19365.0], [54.2, 19368.0], [54.3, 19401.0], [54.4, 19413.0], [54.5, 19429.0], [54.6, 19443.0], [54.7, 19452.0], [54.8, 19468.0], [54.9, 19489.0], [55.0, 19495.0], [55.1, 19513.0], [55.2, 19543.0], [55.3, 19548.0], [55.4, 19579.0], [55.5, 19610.0], [55.6, 19619.0], [55.7, 19632.0], [55.8, 19633.0], [55.9, 19635.0], [56.0, 19647.0], [56.1, 19651.0], [56.2, 19661.0], [56.3, 19688.0], [56.4, 19689.0], [56.5, 19733.0], [56.6, 19733.0], [56.7, 19772.0], [56.8, 19779.0], [56.9, 19789.0], [57.0, 19809.0], [57.1, 19815.0], [57.2, 19821.0], [57.3, 19888.0], [57.4, 19914.0], [57.5, 19926.0], [57.6, 19927.0], [57.7, 19929.0], [57.8, 19982.0], [57.9, 20002.0], [58.0, 20005.0], [58.1, 20019.0], [58.2, 20031.0], [58.3, 20046.0], [58.4, 20083.0], [58.5, 20088.0], [58.6, 20090.0], [58.7, 20092.0], [58.8, 20129.0], [58.9, 20132.0], [59.0, 20154.0], [59.1, 20160.0], [59.2, 20161.0], [59.3, 20170.0], [59.4, 20172.0], [59.5, 20197.0], [59.6, 20221.0], [59.7, 20226.0], [59.8, 20317.0], [59.9, 20331.0], [60.0, 20337.0], [60.1, 20345.0], [60.2, 20349.0], [60.3, 20387.0], [60.4, 20423.0], [60.5, 20441.0], [60.6, 20452.0], [60.7, 20470.0], [60.8, 20477.0], [60.9, 20479.0], [61.0, 20480.0], [61.1, 20483.0], [61.2, 20488.0], [61.3, 20503.0], [61.4, 20521.0], [61.5, 20540.0], [61.6, 20575.0], [61.7, 20584.0], [61.8, 20622.0], [61.9, 20623.0], [62.0, 20623.0], [62.1, 20629.0], [62.2, 20655.0], [62.3, 20670.0], [62.4, 20681.0], [62.5, 20741.0], [62.6, 20748.0], [62.7, 20776.0], [62.8, 20800.0], [62.9, 20804.0], [63.0, 20842.0], [63.1, 20851.0], [63.2, 20857.0], [63.3, 20860.0], [63.4, 20874.0], [63.5, 20904.0], [63.6, 20910.0], [63.7, 20941.0], [63.8, 20943.0], [63.9, 20958.0], [64.0, 20975.0], [64.1, 20978.0], [64.2, 20993.0], [64.3, 21000.0], [64.4, 21019.0], [64.5, 21028.0], [64.6, 21038.0], [64.7, 21047.0], [64.8, 21122.0], [64.9, 21124.0], [65.0, 21127.0], [65.1, 21144.0], [65.2, 21205.0], [65.3, 21207.0], [65.4, 21216.0], [65.5, 21223.0], [65.6, 21234.0], [65.7, 21273.0], [65.8, 21294.0], [65.9, 21335.0], [66.0, 21348.0], [66.1, 21349.0], [66.2, 21361.0], [66.3, 21369.0], [66.4, 21395.0], [66.5, 21396.0], [66.6, 21411.0], [66.7, 21422.0], [66.8, 21439.0], [66.9, 21441.0], [67.0, 21467.0], [67.1, 21468.0], [67.2, 21469.0], [67.3, 21480.0], [67.4, 21500.0], [67.5, 21502.0], [67.6, 21534.0], [67.7, 21583.0], [67.8, 21584.0], [67.9, 21610.0], [68.0, 21633.0], [68.1, 21691.0], [68.2, 21723.0], [68.3, 21740.0], [68.4, 21778.0], [68.5, 21800.0], [68.6, 21818.0], [68.7, 22018.0], [68.8, 22019.0], [68.9, 22029.0], [69.0, 22038.0], [69.1, 22099.0], [69.2, 22203.0], [69.3, 22226.0], [69.4, 22248.0], [69.5, 22330.0], [69.6, 22342.0], [69.7, 22359.0], [69.8, 22409.0], [69.9, 22413.0], [70.0, 22511.0], [70.1, 22520.0], [70.2, 22529.0], [70.3, 22546.0], [70.4, 22548.0], [70.5, 22603.0], [70.6, 22644.0], [70.7, 22644.0], [70.8, 22666.0], [70.9, 22758.0], [71.0, 22844.0], [71.1, 22913.0], [71.2, 22929.0], [71.3, 23027.0], [71.4, 23147.0], [71.5, 23164.0], [71.6, 23169.0], [71.7, 23233.0], [71.8, 23277.0], [71.9, 23298.0], [72.0, 23350.0], [72.1, 23366.0], [72.2, 23377.0], [72.3, 23449.0], [72.4, 23487.0], [72.5, 23537.0], [72.6, 23573.0], [72.7, 23585.0], [72.8, 23672.0], [72.9, 23677.0], [73.0, 23705.0], [73.1, 23707.0], [73.2, 23793.0], [73.3, 23833.0], [73.4, 23872.0], [73.5, 23885.0], [73.6, 23987.0], [73.7, 24161.0], [73.8, 24266.0], [73.9, 24278.0], [74.0, 24302.0], [74.1, 24379.0], [74.2, 24383.0], [74.3, 24391.0], [74.4, 24487.0], [74.5, 24570.0], [74.6, 24586.0], [74.7, 24640.0], [74.8, 24675.0], [74.9, 24712.0], [75.0, 24714.0], [75.1, 24980.0], [75.2, 25039.0], [75.3, 25194.0], [75.4, 25286.0], [75.5, 25335.0], [75.6, 25378.0], [75.7, 25433.0], [75.8, 25435.0], [75.9, 25452.0], [76.0, 25453.0], [76.1, 25454.0], [76.2, 25536.0], [76.3, 25568.0], [76.4, 25646.0], [76.5, 25648.0], [76.6, 25656.0], [76.7, 25761.0], [76.8, 25762.0], [76.9, 25906.0], [77.0, 25936.0], [77.1, 25974.0], [77.2, 26103.0], [77.3, 26124.0], [77.4, 26125.0], [77.5, 26135.0], [77.6, 26201.0], [77.7, 26208.0], [77.8, 26306.0], [77.9, 26308.0], [78.0, 26423.0], [78.1, 26442.0], [78.2, 26447.0], [78.3, 26448.0], [78.4, 26559.0], [78.5, 26615.0], [78.6, 26629.0], [78.7, 26651.0], [78.8, 26705.0], [78.9, 26720.0], [79.0, 26756.0], [79.1, 26787.0], [79.2, 26930.0], [79.3, 26931.0], [79.4, 27013.0], [79.5, 27021.0], [79.6, 27030.0], [79.7, 27109.0], [79.8, 27153.0], [79.9, 27214.0], [80.0, 27224.0], [80.1, 27235.0], [80.2, 27348.0], [80.3, 27428.0], [80.4, 27448.0], [80.5, 27510.0], [80.6, 27514.0], [80.7, 27516.0], [80.8, 27661.0], [80.9, 27760.0], [81.0, 27841.0], [81.1, 27841.0], [81.2, 27863.0], [81.3, 27942.0], [81.4, 27950.0], [81.5, 28028.0], [81.6, 28145.0], [81.7, 28267.0], [81.8, 28277.0], [81.9, 28279.0], [82.0, 28284.0], [82.1, 28354.0], [82.2, 28657.0], [82.3, 28666.0], [82.4, 28703.0], [82.5, 28782.0], [82.6, 28792.0], [82.7, 28802.0], [82.8, 28889.0], [82.9, 28966.0], [83.0, 28970.0], [83.1, 28990.0], [83.2, 29016.0], [83.3, 29064.0], [83.4, 29085.0], [83.5, 29176.0], [83.6, 29179.0], [83.7, 29376.0], [83.8, 29396.0], [83.9, 29478.0], [84.0, 29527.0], [84.1, 29574.0], [84.2, 29582.0], [84.3, 29604.0], [84.4, 29682.0], [84.5, 29687.0], [84.6, 29804.0], [84.7, 29812.0], [84.8, 29951.0], [84.9, 30020.0], [85.0, 30028.0], [85.1, 30065.0], [85.2, 30124.0], [85.3, 30233.0], [85.4, 30253.0], [85.5, 30270.0], [85.6, 30284.0], [85.7, 30537.0], [85.8, 30540.0], [85.9, 30637.0], [86.0, 30645.0], [86.1, 30649.0], [86.2, 30656.0], [86.3, 30667.0], [86.4, 30730.0], [86.5, 30734.0], [86.6, 30735.0], [86.7, 30874.0], [86.8, 30877.0], [86.9, 30877.0], [87.0, 30967.0], [87.1, 31062.0], [87.2, 31063.0], [87.3, 31106.0], [87.4, 31167.0], [87.5, 31264.0], [87.6, 31269.0], [87.7, 31297.0], [87.8, 31342.0], [87.9, 31354.0], [88.0, 31369.0], [88.1, 31374.0], [88.2, 31481.0], [88.3, 31481.0], [88.4, 31655.0], [88.5, 31677.0], [88.6, 31710.0], [88.7, 31772.0], [88.8, 31778.0], [88.9, 31790.0], [89.0, 31877.0], [89.1, 31904.0], [89.2, 31906.0], [89.3, 31908.0], [89.4, 31917.0], [89.5, 31918.0], [89.6, 31930.0], [89.7, 31977.0], [89.8, 31986.0], [89.9, 31995.0], [90.0, 32001.0], [90.1, 32003.0], [90.2, 32011.0], [90.3, 32023.0], [90.4, 32081.0], [90.5, 32094.0], [90.6, 32096.0], [90.7, 32100.0], [90.8, 32130.0], [90.9, 32173.0], [91.0, 32174.0], [91.1, 32186.0], [91.2, 32196.0], [91.3, 32204.0], [91.4, 32211.0], [91.5, 32226.0], [91.6, 32234.0], [91.7, 32295.0], [91.8, 32311.0], [91.9, 32322.0], [92.0, 32366.0], [92.1, 32385.0], [92.2, 32405.0], [92.3, 32413.0], [92.4, 32424.0], [92.5, 32431.0], [92.6, 32441.0], [92.7, 32449.0], [92.8, 32451.0], [92.9, 32487.0], [93.0, 32499.0], [93.1, 32509.0], [93.2, 32521.0], [93.3, 32605.0], [93.4, 32750.0], [93.5, 32761.0], [93.6, 32948.0], [93.7, 33009.0], [93.8, 33031.0], [93.9, 33049.0], [94.0, 33069.0], [94.1, 33078.0], [94.2, 33079.0], [94.3, 33083.0], [94.4, 33091.0], [94.5, 33099.0], [94.6, 33103.0], [94.7, 33106.0], [94.8, 33134.0], [94.9, 33175.0], [95.0, 33306.0], [95.1, 33324.0], [95.2, 33393.0], [95.3, 33393.0], [95.4, 33506.0], [95.5, 33507.0], [95.6, 33572.0], [95.7, 33583.0], [95.8, 33590.0], [95.9, 33673.0], [96.0, 33681.0], [96.1, 33681.0], [96.2, 33682.0], [96.3, 33683.0], [96.4, 33685.0], [96.5, 33690.0], [96.6, 33701.0], [96.7, 33747.0], [96.8, 33762.0], [96.9, 33869.0], [97.0, 33904.0], [97.1, 33947.0], [97.2, 33957.0], [97.3, 33958.0], [97.4, 34049.0], [97.5, 34068.0], [97.6, 34073.0], [97.7, 34090.0], [97.8, 34098.0], [97.9, 34158.0], [98.0, 34174.0], [98.1, 34177.0], [98.2, 34179.0], [98.3, 34188.0], [98.4, 34189.0], [98.5, 34189.0], [98.6, 34190.0], [98.7, 34192.0], [98.8, 34202.0], [98.9, 34212.0], [99.0, 34214.0], [99.1, 34214.0], [99.2, 34222.0], [99.3, 34248.0], [99.4, 34265.0], [99.5, 34267.0], [99.6, 34268.0], [99.7, 34271.0], [99.8, 34287.0], [99.9, 34313.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 10900.0, "maxY": 13.0, "series": [{"data": [[32900.0, 1.0], [33300.0, 4.0], [33700.0, 3.0], [34100.0, 9.0], [10900.0, 5.0], [11100.0, 2.0], [11000.0, 3.0], [11200.0, 4.0], [11300.0, 7.0], [11400.0, 5.0], [11500.0, 8.0], [11600.0, 4.0], [11700.0, 7.0], [11800.0, 8.0], [11900.0, 7.0], [12000.0, 6.0], [12100.0, 13.0], [12200.0, 9.0], [12300.0, 7.0], [12400.0, 5.0], [12500.0, 7.0], [12600.0, 7.0], [12700.0, 7.0], [12800.0, 5.0], [12900.0, 9.0], [13000.0, 3.0], [13100.0, 11.0], [13200.0, 8.0], [13300.0, 4.0], [13400.0, 7.0], [13500.0, 6.0], [13600.0, 7.0], [13700.0, 7.0], [13800.0, 6.0], [13900.0, 5.0], [14000.0, 9.0], [14100.0, 5.0], [14200.0, 6.0], [14300.0, 6.0], [14600.0, 9.0], [14500.0, 7.0], [14400.0, 8.0], [14700.0, 8.0], [14800.0, 11.0], [14900.0, 6.0], [15000.0, 8.0], [15100.0, 6.0], [15200.0, 7.0], [15300.0, 4.0], [15500.0, 7.0], [15600.0, 8.0], [15400.0, 9.0], [15700.0, 8.0], [15800.0, 5.0], [16200.0, 6.0], [15900.0, 4.0], [16000.0, 10.0], [16100.0, 8.0], [16300.0, 7.0], [17200.0, 6.0], [16600.0, 8.0], [16400.0, 7.0], [16800.0, 5.0], [17000.0, 7.0], [17400.0, 6.0], [17800.0, 4.0], [17600.0, 6.0], [18200.0, 1.0], [18400.0, 4.0], [19200.0, 10.0], [18600.0, 5.0], [18800.0, 6.0], [19000.0, 2.0], [19400.0, 8.0], [20000.0, 9.0], [19600.0, 10.0], [20200.0, 2.0], [19800.0, 4.0], [20400.0, 9.0], [20600.0, 7.0], [20800.0, 7.0], [21000.0, 5.0], [21200.0, 7.0], [21400.0, 8.0], [21600.0, 3.0], [21800.0, 2.0], [22000.0, 5.0], [22200.0, 3.0], [22400.0, 2.0], [22600.0, 4.0], [22800.0, 1.0], [23000.0, 1.0], [23200.0, 3.0], [23400.0, 2.0], [23600.0, 2.0], [23800.0, 3.0], [24200.0, 2.0], [24400.0, 1.0], [24600.0, 3.0], [25000.0, 1.0], [25200.0, 1.0], [25400.0, 5.0], [26400.0, 4.0], [25600.0, 3.0], [26200.0, 2.0], [26600.0, 3.0], [27000.0, 3.0], [27200.0, 3.0], [27400.0, 2.0], [27600.0, 1.0], [27800.0, 3.0], [28000.0, 1.0], [28200.0, 4.0], [28600.0, 2.0], [28800.0, 2.0], [29000.0, 3.0], [29400.0, 1.0], [29600.0, 3.0], [29800.0, 2.0], [30000.0, 3.0], [30200.0, 4.0], [30600.0, 5.0], [30800.0, 3.0], [31000.0, 2.0], [31200.0, 3.0], [31400.0, 2.0], [31600.0, 2.0], [32000.0, 7.0], [31800.0, 1.0], [32200.0, 5.0], [32400.0, 9.0], [32600.0, 1.0], [33600.0, 7.0], [34000.0, 5.0], [33100.0, 4.0], [33500.0, 5.0], [33900.0, 4.0], [34300.0, 1.0], [16500.0, 10.0], [17100.0, 8.0], [16700.0, 7.0], [16900.0, 5.0], [17300.0, 6.0], [17500.0, 9.0], [18100.0, 2.0], [17700.0, 8.0], [18300.0, 7.0], [17900.0, 4.0], [19100.0, 9.0], [18500.0, 2.0], [18700.0, 4.0], [18900.0, 8.0], [19300.0, 5.0], [20100.0, 8.0], [19500.0, 4.0], [20300.0, 6.0], [19700.0, 5.0], [19900.0, 5.0], [20500.0, 5.0], [20900.0, 8.0], [21100.0, 4.0], [21500.0, 5.0], [21300.0, 7.0], [20700.0, 3.0], [21700.0, 3.0], [22300.0, 3.0], [22500.0, 5.0], [23300.0, 3.0], [22700.0, 1.0], [22900.0, 2.0], [23100.0, 3.0], [23500.0, 3.0], [23700.0, 3.0], [23900.0, 1.0], [24100.0, 1.0], [24300.0, 4.0], [24500.0, 2.0], [24700.0, 2.0], [24900.0, 1.0], [25100.0, 1.0], [25300.0, 2.0], [25500.0, 2.0], [25700.0, 2.0], [25900.0, 3.0], [26100.0, 4.0], [26300.0, 2.0], [26500.0, 1.0], [26700.0, 4.0], [26900.0, 2.0], [27100.0, 2.0], [27300.0, 1.0], [27500.0, 3.0], [27700.0, 1.0], [27900.0, 2.0], [28100.0, 1.0], [28300.0, 1.0], [28700.0, 3.0], [28900.0, 3.0], [29100.0, 2.0], [29300.0, 2.0], [29500.0, 3.0], [29900.0, 1.0], [30100.0, 1.0], [30500.0, 2.0], [30700.0, 3.0], [31100.0, 2.0], [30900.0, 1.0], [31300.0, 4.0], [31700.0, 4.0], [31900.0, 9.0], [32100.0, 6.0], [32300.0, 4.0], [32500.0, 2.0], [32700.0, 2.0], [33000.0, 9.0], [33800.0, 1.0], [34200.0, 11.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 364.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 636.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 364.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 636.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.5519999999988, "minX": 1.62257052E12, "maxY": 500.5519999999988, "series": [{"data": [[1.62257052E12, 500.5519999999988]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257052E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10933.0, "minX": 1.0, "maxY": 34313.0, "series": [{"data": [[2.0, 34271.0], [3.0, 34267.0], [4.0, 34265.0], [5.0, 34268.0], [6.0, 34248.0], [7.0, 34214.0], [8.0, 34202.0], [9.0, 34188.0], [10.0, 34212.0], [12.0, 34205.5], [13.0, 34192.0], [14.0, 34313.0], [15.0, 34174.0], [16.0, 34214.0], [17.0, 34189.0], [18.0, 34190.0], [20.0, 34178.0], [21.0, 34098.0], [22.0, 34090.0], [23.0, 34073.0], [24.0, 34049.0], [25.0, 34158.0], [26.0, 34068.0], [27.0, 33957.0], [28.0, 33958.0], [29.0, 33904.0], [30.0, 33947.0], [31.0, 33869.0], [33.0, 33682.0], [32.0, 33701.0], [35.0, 33683.0], [34.0, 33762.0], [37.0, 33673.0], [36.0, 33681.0], [39.0, 33747.0], [38.0, 33681.0], [41.0, 33690.0], [40.0, 33685.0], [43.0, 33590.0], [42.0, 33572.0], [45.0, 33506.0], [44.0, 33583.0], [47.0, 33393.0], [46.0, 33507.0], [49.0, 33324.0], [48.0, 33393.0], [51.0, 33103.0], [50.0, 33306.0], [53.0, 33049.0], [52.0, 33134.0], [55.0, 33079.0], [54.0, 33175.0], [57.0, 33099.0], [56.0, 33078.0], [59.0, 33031.0], [58.0, 33106.0], [60.0, 33083.0], [63.0, 33009.0], [62.0, 33019.5], [67.0, 32487.0], [66.0, 32761.0], [65.0, 32750.0], [64.0, 33069.0], [71.0, 32509.0], [70.0, 32385.0], [69.0, 32451.0], [68.0, 32605.0], [75.0, 32431.0], [74.0, 32432.5], [72.0, 32521.0], [79.0, 32449.0], [78.0, 32424.0], [77.0, 32441.0], [76.0, 32295.0], [83.0, 32311.0], [82.0, 32186.0], [81.0, 32413.0], [80.0, 32405.0], [87.0, 32130.0], [86.0, 32174.0], [85.0, 32173.0], [84.0, 32322.0], [91.0, 32204.0], [90.0, 32226.0], [89.0, 32234.0], [88.0, 32096.0], [95.0, 31986.0], [94.0, 32196.0], [93.0, 32211.0], [92.0, 32081.0], [99.0, 32023.0], [98.0, 32100.0], [97.0, 32094.0], [96.0, 31977.0], [103.0, 31906.0], [102.0, 32011.0], [101.0, 31995.0], [100.0, 31877.0], [107.0, 31923.5], [105.0, 32001.0], [104.0, 32003.0], [111.0, 31904.0], [110.0, 31778.0], [109.0, 31908.0], [108.0, 31918.0], [115.0, 31710.0], [114.0, 31677.0], [113.0, 31772.0], [112.0, 31790.0], [119.0, 31374.0], [118.0, 31481.0], [117.0, 31481.0], [116.0, 31655.0], [123.0, 31297.0], [122.0, 31342.0], [121.0, 31369.0], [120.0, 31354.0], [127.0, 30967.0], [126.0, 31167.0], [125.0, 31264.0], [124.0, 31269.0], [135.0, 30730.0], [134.0, 30735.0], [133.0, 30874.0], [132.0, 30877.0], [130.0, 31062.0], [129.0, 31063.0], [128.0, 31106.0], [143.0, 30540.0], [142.0, 30537.0], [141.0, 30645.0], [140.0, 30649.0], [139.0, 30637.0], [138.0, 30656.0], [137.0, 30667.0], [136.0, 30734.0], [151.0, 30065.0], [150.0, 30020.0], [149.0, 30028.0], [148.0, 30124.0], [147.0, 30233.0], [146.0, 30270.0], [145.0, 30284.0], [144.0, 30253.0], [159.0, 29586.666666666668], [156.0, 29682.0], [155.0, 29687.0], [154.0, 29804.0], [153.0, 29812.0], [152.0, 29951.0], [167.0, 29085.0], [166.0, 29016.0], [165.0, 29176.0], [164.0, 29179.0], [163.0, 29376.0], [162.0, 29396.0], [161.0, 29527.0], [160.0, 29478.0], [175.0, 28792.0], [174.0, 28802.0], [173.0, 28782.0], [172.0, 28889.0], [171.0, 28966.0], [170.0, 28970.0], [169.0, 29064.0], [168.0, 28990.0], [183.0, 28267.0], [182.0, 28315.5], [180.0, 28279.0], [179.0, 28284.0], [178.0, 28657.0], [177.0, 28666.0], [176.0, 28703.0], [191.0, 27760.0], [190.0, 27841.0], [188.0, 27902.5], [186.0, 28028.0], [185.0, 27950.0], [184.0, 28145.0], [199.0, 27235.0], [198.0, 27348.0], [197.0, 27428.0], [196.0, 27510.0], [195.0, 27514.0], [194.0, 27516.0], [193.0, 27448.0], [192.0, 27661.0], [207.0, 26930.0], [206.0, 27013.0], [205.0, 27021.0], [204.0, 27030.0], [203.0, 27109.0], [202.0, 27214.0], [201.0, 27153.0], [200.0, 27224.0], [215.0, 26651.0], [214.0, 26615.0], [213.0, 26756.0], [212.0, 26629.0], [211.0, 26705.0], [210.0, 26720.0], [209.0, 26787.0], [208.0, 26931.0], [223.0, 26208.0], [222.0, 26306.0], [221.0, 26308.0], [220.0, 26447.0], [219.0, 26448.0], [218.0, 26423.0], [217.0, 26559.0], [216.0, 26442.0], [231.0, 25936.0], [230.0, 25906.0], [229.0, 25974.0], [228.0, 26103.0], [227.0, 26124.0], [226.0, 26135.0], [225.0, 26125.0], [224.0, 26201.0], [239.0, 25454.0], [238.0, 25552.0], [236.0, 25646.0], [235.0, 25656.0], [234.0, 25648.0], [233.0, 25761.0], [232.0, 25762.0], [247.0, 25194.0], [246.0, 25286.0], [245.0, 25335.0], [244.0, 25378.0], [243.0, 25442.5], [241.0, 25453.0], [240.0, 25435.0], [255.0, 24586.0], [254.0, 24714.0], [253.0, 24640.0], [252.0, 24675.0], [251.0, 24699.0], [250.0, 24712.0], [249.0, 24980.0], [248.0, 25039.0], [270.0, 23707.0], [271.0, 23672.0], [269.0, 23793.0], [268.0, 23833.0], [267.0, 23885.0], [266.0, 23872.0], [265.0, 23987.0], [264.0, 24161.0], [263.0, 24266.0], [257.0, 24487.0], [256.0, 24570.0], [259.0, 24379.0], [258.0, 24391.0], [262.0, 24302.0], [261.0, 24278.0], [260.0, 24383.0], [285.0, 23147.0], [287.0, 23166.5], [284.0, 23233.0], [275.0, 23573.0], [274.0, 23585.0], [273.0, 23677.0], [272.0, 23705.0], [283.0, 23350.0], [282.0, 23298.0], [281.0, 23277.0], [280.0, 23377.0], [279.0, 23366.0], [278.0, 23449.0], [277.0, 23487.0], [276.0, 23537.0], [302.0, 21691.0], [303.0, 21633.0], [301.0, 22548.0], [300.0, 22529.0], [299.0, 22546.0], [298.0, 21740.0], [297.0, 22520.0], [296.0, 22644.0], [295.0, 22603.0], [289.0, 23027.0], [288.0, 22913.0], [291.0, 22844.0], [290.0, 22929.0], [294.0, 22666.0], [293.0, 22758.0], [292.0, 22644.0], [318.0, 22248.0], [319.0, 22203.0], [317.0, 21441.0], [316.0, 21439.0], [315.0, 22226.0], [314.0, 21480.0], [313.0, 21500.0], [312.0, 21534.0], [311.0, 22359.0], [305.0, 22413.0], [304.0, 22409.0], [307.0, 21583.0], [306.0, 22511.0], [310.0, 22342.0], [309.0, 22330.0], [308.0, 21584.0], [334.0, 21216.0], [335.0, 21207.0], [333.0, 21223.0], [332.0, 22038.0], [331.0, 21631.5], [329.0, 21273.0], [328.0, 21717.0], [326.0, 21348.0], [321.0, 21411.0], [320.0, 21422.0], [323.0, 21369.0], [322.0, 21396.0], [325.0, 21349.0], [324.0, 21361.0], [350.0, 20975.0], [351.0, 20958.0], [349.0, 20978.0], [348.0, 21000.0], [347.0, 21019.0], [346.0, 21778.0], [345.0, 21800.0], [344.0, 21038.0], [343.0, 21047.0], [337.0, 22018.5], [339.0, 21127.0], [338.0, 21144.0], [342.0, 21818.0], [341.0, 21124.0], [340.0, 21122.0], [365.0, 21468.0], [367.0, 21121.5], [364.0, 21469.0], [355.0, 20904.0], [354.0, 20910.0], [353.0, 20943.0], [352.0, 21723.0], [363.0, 20748.0], [362.0, 21610.0], [361.0, 20776.0], [360.0, 20800.0], [359.0, 20855.5], [358.0, 20857.0], [356.0, 20874.0], [382.0, 20488.0], [383.0, 20479.0], [381.0, 20503.0], [380.0, 20521.0], [379.0, 20540.0], [378.0, 21294.0], [377.0, 20584.0], [376.0, 20623.0], [375.0, 20622.0], [369.0, 21395.0], [368.0, 20681.0], [371.0, 20655.0], [370.0, 20670.0], [374.0, 21467.0], [373.0, 20623.0], [372.0, 20629.0], [397.0, 20941.0], [398.0, 20226.0], [396.0, 20993.0], [387.0, 21205.0], [386.0, 20470.0], [385.0, 20480.0], [384.0, 20477.0], [395.0, 20331.0], [394.0, 21028.0], [393.0, 20337.0], [392.0, 20317.0], [391.0, 20345.0], [390.0, 20349.0], [389.0, 20423.0], [388.0, 20452.0], [414.0, 20019.0], [415.0, 20005.0], [413.0, 20031.0], [412.0, 20083.0], [411.0, 20088.0], [410.0, 20090.0], [409.0, 20092.0], [408.0, 20804.0], [407.0, 20129.0], [401.0, 20197.0], [400.0, 20531.5], [403.0, 20170.0], [402.0, 20172.0], [406.0, 20132.0], [405.0, 20161.0], [404.0, 20160.0], [428.0, 19809.0], [430.0, 19779.0], [431.0, 19772.0], [429.0, 19789.0], [427.0, 20128.0], [425.0, 20152.0], [423.0, 19888.0], [417.0, 19982.0], [416.0, 20002.0], [419.0, 19929.0], [418.0, 20575.0], [422.0, 19914.0], [421.0, 19926.0], [420.0, 19927.0], [446.0, 19513.0], [447.0, 20154.0], [445.0, 19543.0], [444.0, 19548.0], [443.0, 19579.0], [442.0, 19610.0], [441.0, 19619.0], [440.0, 19632.0], [439.0, 19647.0], [433.0, 19733.0], [432.0, 19733.0], [435.0, 19689.0], [434.0, 20387.0], [438.0, 19651.0], [437.0, 19661.0], [436.0, 19688.0], [462.0, 19278.0], [463.0, 19275.0], [461.0, 19315.0], [460.0, 19332.0], [459.0, 19359.0], [458.0, 19365.0], [457.0, 19368.0], [456.0, 19401.0], [455.0, 20046.0], [449.0, 19489.0], [448.0, 19495.0], [451.0, 19452.0], [450.0, 19468.0], [454.0, 19413.0], [453.0, 19429.0], [452.0, 19443.0], [478.0, 19633.0], [479.0, 18996.0], [477.0, 19037.0], [476.0, 19066.0], [475.0, 19110.0], [474.0, 19123.0], [473.0, 19124.0], [472.0, 19122.0], [471.0, 19148.0], [465.0, 19265.0], [464.0, 19273.0], [467.0, 19220.0], [466.0, 19258.0], [470.0, 19149.0], [469.0, 19212.5], [494.0, 18773.0], [495.0, 18717.0], [493.0, 18809.0], [492.0, 18845.0], [491.0, 18864.0], [490.0, 18872.0], [489.0, 18883.0], [488.0, 18893.0], [487.0, 19635.0], [481.0, 18986.0], [480.0, 18993.0], [483.0, 18935.0], [482.0, 18983.0], [486.0, 18919.0], [485.0, 18919.0], [484.0, 18934.0], [510.0, 18415.0], [511.0, 18403.0], [509.0, 18483.0], [508.0, 18488.0], [507.0, 19212.0], [506.0, 19144.0], [505.0, 18515.0], [504.0, 19100.0], [503.0, 19147.0], [497.0, 18708.0], [496.0, 18711.0], [499.0, 18635.0], [498.0, 18664.0], [502.0, 18590.0], [501.0, 19262.0], [500.0, 18626.0], [540.0, 17657.0], [543.0, 17616.0], [529.0, 18377.0], [528.0, 17809.0], [531.0, 17783.0], [530.0, 17796.0], [533.0, 17769.0], [532.0, 17772.0], [542.0, 17621.0], [541.0, 17645.0], [539.0, 17658.0], [538.0, 17692.0], [537.0, 17704.0], [536.0, 17740.0], [527.0, 17863.0], [512.0, 18399.0], [514.0, 18333.0], [513.0, 18361.0], [517.0, 18319.5], [515.0, 18322.0], [519.0, 18137.0], [518.0, 18236.0], [526.0, 17899.0], [525.0, 17905.0], [524.0, 17935.0], [523.0, 17967.0], [522.0, 17977.0], [521.0, 18695.0], [520.0, 18642.0], [535.0, 17743.0], [534.0, 17752.0], [572.0, 17161.0], [575.0, 17126.0], [561.0, 17351.0], [560.0, 17357.0], [563.0, 17318.0], [562.0, 17337.0], [565.0, 17279.0], [564.0, 17865.0], [574.0, 17141.0], [573.0, 17155.0], [571.0, 17181.0], [570.0, 17204.0], [569.0, 17221.0], [568.0, 17233.0], [559.0, 17376.0], [545.0, 17579.0], [544.0, 17583.0], [547.0, 17564.0], [546.0, 17578.0], [549.0, 17517.0], [548.0, 17518.0], [551.0, 18113.0], [550.0, 17507.0], [558.0, 17374.0], [557.0, 17401.0], [556.0, 17458.5], [554.0, 17459.0], [553.0, 17465.0], [552.0, 17475.0], [567.0, 17250.0], [566.0, 17267.0], [604.0, 16689.0], [607.0, 16641.0], [593.0, 16871.0], [592.0, 16873.0], [595.0, 16800.0], [594.0, 16815.0], [597.0, 16789.0], [596.0, 16795.0], [606.0, 16650.0], [605.0, 16661.0], [603.0, 16695.0], [602.0, 16702.0], [601.0, 16715.0], [600.0, 16742.0], [591.0, 16893.0], [576.0, 17115.0], [578.0, 17068.0], [577.0, 17075.0], [581.0, 17017.0], [580.0, 17023.0], [583.0, 17585.0], [582.0, 17012.0], [590.0, 16903.0], [589.0, 16920.0], [588.0, 16923.0], [587.0, 16981.0], [586.0, 16985.0], [585.0, 17566.0], [584.0, 17010.0], [599.0, 16777.0], [598.0, 16781.0], [633.0, 16310.0], [637.0, 16244.0], [638.0, 16190.0], [624.0, 16457.0], [626.0, 16421.0], [625.0, 16445.0], [628.0, 16392.0], [627.0, 16394.0], [636.0, 16272.0], [635.0, 16294.0], [634.0, 16298.0], [632.0, 16320.0], [615.0, 16522.0], [614.0, 16548.0], [613.0, 16579.0], [612.0, 17187.0], [611.0, 16599.0], [610.0, 16650.0], [609.0, 17154.0], [608.0, 16622.0], [623.0, 16455.0], [622.0, 16465.0], [620.0, 16476.0], [619.0, 16510.0], [618.0, 16528.0], [617.0, 16534.0], [616.0, 16508.0], [631.0, 16354.0], [629.0, 16366.0], [668.0, 16222.0], [671.0, 16233.0], [657.0, 16538.0], [656.0, 16030.0], [659.0, 15990.0], [658.0, 16009.0], [661.0, 15963.0], [660.0, 15983.0], [670.0, 15792.0], [669.0, 15793.0], [667.0, 15827.0], [666.0, 15860.0], [665.0, 15868.0], [664.0, 15887.0], [655.0, 16039.0], [641.0, 16639.0], [640.0, 16173.5], [643.0, 16122.0], [642.0, 16146.0], [646.0, 16099.5], [644.0, 16117.0], [654.0, 16044.0], [653.0, 16040.0], [652.0, 16010.0], [651.0, 16012.0], [650.0, 16105.0], [649.0, 16562.0], [648.0, 16047.5], [663.0, 15899.0], [662.0, 15909.0], [700.0, 15385.0], [703.0, 15324.0], [689.0, 15530.0], [688.0, 15542.0], [691.0, 15498.0], [690.0, 15530.0], [693.0, 15477.0], [692.0, 15481.0], [702.0, 15341.0], [701.0, 15368.0], [699.0, 15412.0], [698.0, 15428.0], [697.0, 15432.0], [696.0, 15439.0], [687.0, 15547.0], [672.0, 15760.0], [675.0, 15730.0], [674.0, 15739.0], [677.0, 15701.0], [676.0, 15705.0], [679.0, 15676.0], [678.0, 15678.0], [686.0, 15548.0], [685.0, 15586.0], [684.0, 15600.0], [683.0, 15601.0], [682.0, 15604.0], [681.0, 15635.0], [680.0, 15673.0], [695.0, 15442.0], [694.0, 15447.0], [732.0, 14884.0], [735.0, 14858.0], [721.0, 15050.0], [720.0, 15065.0], [723.0, 15042.0], [722.0, 15054.0], [725.0, 15026.0], [724.0, 15043.0], [734.0, 14871.0], [733.0, 14869.0], [731.0, 14917.0], [730.0, 14934.0], [729.0, 14946.0], [728.0, 14945.0], [719.0, 15077.0], [705.0, 15287.0], [704.0, 15288.0], [707.0, 15275.0], [706.0, 15280.0], [709.0, 15601.0], [708.0, 15269.0], [711.0, 15212.0], [710.0, 15222.0], [718.0, 15111.0], [717.0, 15120.0], [716.0, 15525.0], [715.0, 15146.0], [714.0, 15158.0], [713.0, 15166.0], [712.0, 15174.0], [727.0, 14976.0], [726.0, 15015.0], [761.0, 14557.0], [765.0, 14499.0], [766.0, 14470.0], [753.0, 14833.5], [755.0, 14636.0], [754.0, 14645.0], [757.0, 14614.0], [756.0, 14632.0], [764.0, 14515.0], [763.0, 14533.0], [762.0, 14549.0], [760.0, 14565.0], [742.0, 14820.0], [741.0, 14808.0], [740.0, 14821.0], [739.0, 14825.0], [738.0, 14847.0], [737.0, 14880.0], [736.0, 14881.0], [751.0, 14702.0], [750.0, 14708.0], [749.0, 14709.0], [748.0, 14688.0], [747.0, 14712.0], [746.0, 14722.0], [745.0, 14734.0], [744.0, 14797.0], [759.0, 14583.0], [758.0, 14618.0], [793.0, 14097.0], [797.0, 14041.0], [798.0, 14040.0], [785.0, 14234.0], [784.0, 14240.0], [787.0, 14204.0], [786.0, 14215.0], [789.0, 14180.0], [788.0, 14192.0], [796.0, 14049.0], [795.0, 14064.0], [794.0, 14069.0], [792.0, 14106.0], [775.0, 14601.0], [774.0, 14375.0], [773.0, 14387.0], [772.0, 14414.0], [771.0, 14431.0], [770.0, 14445.0], [769.0, 14456.0], [768.0, 14464.0], [783.0, 14277.0], [782.0, 14272.0], [781.0, 14303.0], [780.0, 14320.0], [779.0, 14664.0], [778.0, 14330.0], [777.0, 14462.5], [791.0, 14116.0], [790.0, 14141.0], [828.0, 13550.0], [831.0, 13513.0], [816.0, 13741.0], [818.0, 13711.0], [817.0, 13714.0], [820.0, 13698.0], [819.0, 13702.0], [830.0, 13531.0], [829.0, 13539.0], [827.0, 13555.0], [826.0, 13605.0], [825.0, 13617.0], [824.0, 13623.0], [815.0, 13748.0], [800.0, 14034.0], [803.0, 13997.5], [801.0, 14020.0], [805.0, 13955.0], [804.0, 13967.0], [807.0, 13866.0], [806.0, 13940.0], [814.0, 13773.0], [813.0, 13790.0], [812.0, 13814.0], [811.0, 13828.0], [810.0, 13830.0], [809.0, 13850.0], [808.0, 13859.0], [823.0, 13638.0], [822.0, 13673.0], [860.0, 13106.0], [863.0, 13051.0], [848.0, 13245.0], [850.0, 13219.0], [849.0, 13244.0], [853.0, 13188.0], [851.0, 13205.0], [862.0, 13101.0], [861.0, 13108.0], [859.0, 13114.0], [858.0, 13122.0], [857.0, 13139.0], [856.0, 13145.0], [847.0, 13259.0], [833.0, 13490.0], [832.0, 13503.0], [835.0, 13467.0], [834.0, 13481.0], [837.0, 13443.0], [836.0, 13466.0], [839.0, 13431.0], [838.0, 13435.0], [846.0, 13267.0], [845.0, 13268.0], [844.0, 13294.0], [843.0, 13305.0], [842.0, 13316.0], [841.0, 13319.0], [840.0, 13363.0], [855.0, 13151.0], [854.0, 13171.0], [892.0, 12621.0], [895.0, 12556.0], [881.0, 12784.0], [880.0, 12785.0], [883.0, 12756.0], [882.0, 12794.0], [885.0, 12730.0], [884.0, 12748.0], [894.0, 12589.0], [893.0, 12605.0], [891.0, 12633.0], [890.0, 12653.0], [889.0, 12667.0], [888.0, 12665.0], [879.0, 12820.0], [864.0, 13047.0], [866.0, 12976.0], [865.0, 13025.0], [868.0, 12955.0], [867.0, 12970.0], [870.0, 12943.0], [869.0, 12952.0], [878.0, 12875.0], [877.0, 12881.0], [876.0, 12860.0], [875.0, 12894.0], [874.0, 12916.0], [873.0, 12915.0], [872.0, 12935.0], [887.0, 12684.0], [886.0, 12701.0], [920.0, 12197.0], [925.0, 12080.0], [927.0, 12164.0], [912.0, 12308.0], [914.0, 12291.0], [913.0, 12298.0], [924.0, 12102.0], [923.0, 12139.5], [921.0, 12170.0], [911.0, 12309.0], [897.0, 12546.0], [896.0, 12561.0], [899.0, 12531.0], [898.0, 12531.0], [901.0, 12453.0], [900.0, 12524.0], [903.0, 12423.0], [902.0, 12443.0], [909.0, 12326.0], [908.0, 12357.0], [907.0, 12374.0], [906.0, 12391.0], [905.0, 12409.0], [904.0, 12423.0], [919.0, 12212.0], [918.0, 12214.0], [916.0, 12257.0], [915.0, 12275.0], [956.0, 11779.0], [959.0, 11734.0], [944.0, 11949.0], [946.0, 11922.0], [945.0, 11936.0], [949.0, 11903.5], [947.0, 11912.0], [958.0, 11744.0], [957.0, 11746.0], [955.0, 11800.0], [954.0, 11819.0], [953.0, 11822.0], [952.0, 11833.0], [943.0, 11985.0], [928.0, 12035.0], [930.0, 12208.0], [929.0, 12031.0], [932.0, 12153.0], [931.0, 12190.0], [935.0, 12127.5], [933.0, 12147.0], [942.0, 12027.0], [941.0, 11853.0], [940.0, 11866.0], [939.0, 12067.0], [938.0, 12107.0], [937.0, 12104.0], [936.0, 12118.0], [951.0, 11870.0], [950.0, 11898.0], [984.0, 11360.0], [988.0, 11262.0], [991.0, 11078.0], [977.0, 11413.0], [976.0, 11468.0], [979.0, 11379.0], [978.0, 11387.0], [990.0, 11244.0], [989.0, 11242.0], [987.0, 11118.0], [986.0, 11302.0], [985.0, 11314.0], [975.0, 11478.0], [961.0, 11714.0], [960.0, 11736.0], [963.0, 11688.0], [962.0, 11727.0], [965.0, 11616.0], [964.0, 11677.0], [967.0, 11576.0], [966.0, 11600.0], [974.0, 11503.0], [973.0, 11537.0], [972.0, 11504.0], [971.0, 11522.0], [970.0, 11522.0], [969.0, 11551.0], [968.0, 11574.0], [983.0, 11401.0], [982.0, 11387.0], [1000.0, 10933.0], [999.0, 10991.0], [998.0, 10994.0], [997.0, 10940.0], [996.0, 10948.0], [995.0, 11159.0], [994.0, 11046.0], [993.0, 11048.0], [992.0, 11205.0], [1.0, 34287.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.5519999999988, 20213.538999999968]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3800.0, "minX": 1.62257052E12, "maxY": 279857.06666666665, "series": [{"data": [[1.62257052E12, 279857.06666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62257052E12, 3800.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257052E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20213.538999999968, "minX": 1.62257052E12, "maxY": 20213.538999999968, "series": [{"data": [[1.62257052E12, 20213.538999999968]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257052E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19928.94500000003, "minX": 1.62257052E12, "maxY": 19928.94500000003, "series": [{"data": [[1.62257052E12, 19928.94500000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257052E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10444.345999999992, "minX": 1.62257052E12, "maxY": 10444.345999999992, "series": [{"data": [[1.62257052E12, 10444.345999999992]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257052E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14588.0, "minX": 1.62257052E12, "maxY": 34313.0, "series": [{"data": [[1.62257052E12, 34313.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62257052E12, 33684.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62257052E12, 34269.05]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62257052E12, 34178.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62257052E12, 14588.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62257052E12, 28272.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257052E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11513.0, "minX": 14.0, "maxY": 33687.5, "series": [{"data": [[41.0, 32226.0], [46.0, 18509.5], [51.0, 19212.0], [52.0, 22413.0], [14.0, 33081.0], [59.0, 21467.5], [63.0, 16538.0], [64.0, 14601.0], [66.0, 17865.0], [17.0, 28284.0], [18.0, 24847.0], [20.0, 29437.0], [21.0, 30637.0], [22.0, 23413.0], [23.0, 26423.0], [25.0, 31481.0], [30.0, 33687.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 14106.0], [66.0, 16777.0], [46.0, 17633.0], [51.0, 18868.0], [52.0, 21369.0], [56.0, 11513.0], [59.0, 12597.0], [63.0, 13617.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 66.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11223.5, "minX": 14.0, "maxY": 33409.5, "series": [{"data": [[41.0, 31944.0], [46.0, 18222.0], [51.0, 18932.0], [52.0, 22132.0], [14.0, 32799.5], [59.0, 21189.0], [63.0, 16254.0], [64.0, 14307.0], [66.0, 17588.0], [17.0, 28003.0], [18.0, 24565.5], [20.0, 29152.0], [21.0, 30353.0], [22.0, 23123.0], [23.0, 26141.0], [25.0, 31194.0], [30.0, 33409.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 13831.0], [66.0, 16494.0], [46.0, 17351.5], [51.0, 18586.5], [52.0, 21083.0], [56.0, 11223.5], [59.0, 12313.0], [63.0, 13336.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 66.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62257052E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62257052E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257052E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.066666666666666, "minX": 1.62257052E12, "maxY": 10.6, "series": [{"data": [[1.62257052E12, 6.066666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62257052E12, 10.6]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62257052E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.066666666666666, "minX": 1.62257052E12, "maxY": 10.6, "series": [{"data": [[1.62257052E12, 10.6]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.62257052E12, 6.066666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257052E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.066666666666666, "minX": 1.62257052E12, "maxY": 10.6, "series": [{"data": [[1.62257052E12, 6.066666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62257052E12, 10.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62257052E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

