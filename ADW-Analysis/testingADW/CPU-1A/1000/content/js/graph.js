/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9659.0, "minX": 0.0, "maxY": 44183.0, "series": [{"data": [[0.0, 9659.0], [0.1, 10343.0], [0.2, 10429.0], [0.3, 10429.0], [0.4, 10457.0], [0.5, 10594.0], [0.6, 10595.0], [0.7, 10635.0], [0.8, 10663.0], [0.9, 10675.0], [1.0, 10684.0], [1.1, 10696.0], [1.2, 10734.0], [1.3, 10735.0], [1.4, 10735.0], [1.5, 10819.0], [1.6, 10865.0], [1.7, 10925.0], [1.8, 10936.0], [1.9, 10941.0], [2.0, 10951.0], [2.1, 10977.0], [2.2, 10982.0], [2.3, 11002.0], [2.4, 11034.0], [2.5, 11061.0], [2.6, 11104.0], [2.7, 11108.0], [2.8, 11113.0], [2.9, 11155.0], [3.0, 11171.0], [3.1, 11197.0], [3.2, 11211.0], [3.3, 11274.0], [3.4, 11278.0], [3.5, 11293.0], [3.6, 11309.0], [3.7, 11317.0], [3.8, 11334.0], [3.9, 11353.0], [4.0, 11359.0], [4.1, 11367.0], [4.2, 11411.0], [4.3, 11435.0], [4.4, 11447.0], [4.5, 11453.0], [4.6, 11503.0], [4.7, 11507.0], [4.8, 11508.0], [4.9, 11516.0], [5.0, 11518.0], [5.1, 11522.0], [5.2, 11539.0], [5.3, 11542.0], [5.4, 11544.0], [5.5, 11547.0], [5.6, 11547.0], [5.7, 11549.0], [5.8, 11552.0], [5.9, 11568.0], [6.0, 11572.0], [6.1, 11572.0], [6.2, 11588.0], [6.3, 11589.0], [6.4, 11591.0], [6.5, 11592.0], [6.6, 11596.0], [6.7, 11596.0], [6.8, 11599.0], [6.9, 11604.0], [7.0, 11608.0], [7.1, 11619.0], [7.2, 11620.0], [7.3, 11625.0], [7.4, 11655.0], [7.5, 11661.0], [7.6, 11664.0], [7.7, 11664.0], [7.8, 11680.0], [7.9, 11684.0], [8.0, 11684.0], [8.1, 11702.0], [8.2, 11705.0], [8.3, 11708.0], [8.4, 11718.0], [8.5, 11727.0], [8.6, 11742.0], [8.7, 11752.0], [8.8, 11800.0], [8.9, 11806.0], [9.0, 11837.0], [9.1, 11860.0], [9.2, 11877.0], [9.3, 11885.0], [9.4, 11889.0], [9.5, 11893.0], [9.6, 11894.0], [9.7, 11934.0], [9.8, 11939.0], [9.9, 11939.0], [10.0, 11942.0], [10.1, 11964.0], [10.2, 12021.0], [10.3, 12023.0], [10.4, 12032.0], [10.5, 12062.0], [10.6, 12079.0], [10.7, 12080.0], [10.8, 12080.0], [10.9, 12114.0], [11.0, 12131.0], [11.1, 12144.0], [11.2, 12149.0], [11.3, 12150.0], [11.4, 12167.0], [11.5, 12184.0], [11.6, 12225.0], [11.7, 12240.0], [11.8, 12262.0], [11.9, 12271.0], [12.0, 12279.0], [12.1, 12298.0], [12.2, 12342.0], [12.3, 12360.0], [12.4, 12376.0], [12.5, 12389.0], [12.6, 12406.0], [12.7, 12421.0], [12.8, 12421.0], [12.9, 12437.0], [13.0, 12456.0], [13.1, 12460.0], [13.2, 12473.0], [13.3, 12513.0], [13.4, 12516.0], [13.5, 12571.0], [13.6, 12574.0], [13.7, 12577.0], [13.8, 12581.0], [13.9, 12598.0], [14.0, 12609.0], [14.1, 12630.0], [14.2, 12634.0], [14.3, 12645.0], [14.4, 12657.0], [14.5, 12662.0], [14.6, 12690.0], [14.7, 12706.0], [14.8, 12732.0], [14.9, 12759.0], [15.0, 12761.0], [15.1, 12783.0], [15.2, 12787.0], [15.3, 12788.0], [15.4, 12790.0], [15.5, 12825.0], [15.6, 12844.0], [15.7, 12860.0], [15.8, 12877.0], [15.9, 12913.0], [16.0, 12926.0], [16.1, 12937.0], [16.2, 12940.0], [16.3, 12941.0], [16.4, 12945.0], [16.5, 12971.0], [16.6, 12979.0], [16.7, 13008.0], [16.8, 13010.0], [16.9, 13011.0], [17.0, 13035.0], [17.1, 13036.0], [17.2, 13038.0], [17.3, 13046.0], [17.4, 13068.0], [17.5, 13094.0], [17.6, 13111.0], [17.7, 13111.0], [17.8, 13129.0], [17.9, 13149.0], [18.0, 13159.0], [18.1, 13163.0], [18.2, 13195.0], [18.3, 13205.0], [18.4, 13222.0], [18.5, 13240.0], [18.6, 13267.0], [18.7, 13289.0], [18.8, 13300.0], [18.9, 13313.0], [19.0, 13345.0], [19.1, 13350.0], [19.2, 13350.0], [19.3, 13353.0], [19.4, 13359.0], [19.5, 13362.0], [19.6, 13397.0], [19.7, 13407.0], [19.8, 13413.0], [19.9, 13472.0], [20.0, 13477.0], [20.1, 13489.0], [20.2, 13504.0], [20.3, 13519.0], [20.4, 13528.0], [20.5, 13532.0], [20.6, 13567.0], [20.7, 13597.0], [20.8, 13606.0], [20.9, 13606.0], [21.0, 13614.0], [21.1, 13615.0], [21.2, 13657.0], [21.3, 13665.0], [21.4, 13668.0], [21.5, 13668.0], [21.6, 13695.0], [21.7, 13695.0], [21.8, 13716.0], [21.9, 13719.0], [22.0, 13764.0], [22.1, 13769.0], [22.2, 13826.0], [22.3, 13826.0], [22.4, 13832.0], [22.5, 13844.0], [22.6, 13851.0], [22.7, 13861.0], [22.8, 13899.0], [22.9, 13899.0], [23.0, 13913.0], [23.1, 13930.0], [23.2, 13937.0], [23.3, 13942.0], [23.4, 13974.0], [23.5, 13976.0], [23.6, 13976.0], [23.7, 13992.0], [23.8, 14011.0], [23.9, 14040.0], [24.0, 14051.0], [24.1, 14057.0], [24.2, 14060.0], [24.3, 14070.0], [24.4, 14100.0], [24.5, 14112.0], [24.6, 14120.0], [24.7, 14124.0], [24.8, 14124.0], [24.9, 14136.0], [25.0, 14146.0], [25.1, 14173.0], [25.2, 14203.0], [25.3, 14220.0], [25.4, 14240.0], [25.5, 14246.0], [25.6, 14303.0], [25.7, 14308.0], [25.8, 14322.0], [25.9, 14333.0], [26.0, 14371.0], [26.1, 14373.0], [26.2, 14380.0], [26.3, 14402.0], [26.4, 14407.0], [26.5, 14408.0], [26.6, 14412.0], [26.7, 14432.0], [26.8, 14435.0], [26.9, 14459.0], [27.0, 14500.0], [27.1, 14517.0], [27.2, 14519.0], [27.3, 14531.0], [27.4, 14532.0], [27.5, 14553.0], [27.6, 14581.0], [27.7, 14604.0], [27.8, 14606.0], [27.9, 14620.0], [28.0, 14627.0], [28.1, 14630.0], [28.2, 14667.0], [28.3, 14671.0], [28.4, 14723.0], [28.5, 14728.0], [28.6, 14736.0], [28.7, 14738.0], [28.8, 14742.0], [28.9, 14769.0], [29.0, 14778.0], [29.1, 14788.0], [29.2, 14796.0], [29.3, 14803.0], [29.4, 14822.0], [29.5, 14846.0], [29.6, 14866.0], [29.7, 14904.0], [29.8, 14910.0], [29.9, 14912.0], [30.0, 14917.0], [30.1, 14929.0], [30.2, 14935.0], [30.3, 14965.0], [30.4, 14976.0], [30.5, 14980.0], [30.6, 14990.0], [30.7, 14998.0], [30.8, 15004.0], [30.9, 15029.0], [31.0, 15054.0], [31.1, 15088.0], [31.2, 15090.0], [31.3, 15125.0], [31.4, 15144.0], [31.5, 15150.0], [31.6, 15160.0], [31.7, 15164.0], [31.8, 15177.0], [31.9, 15204.0], [32.0, 15211.0], [32.1, 15214.0], [32.2, 15218.0], [32.3, 15229.0], [32.4, 15245.0], [32.5, 15266.0], [32.6, 15272.0], [32.7, 15274.0], [32.8, 15275.0], [32.9, 15318.0], [33.0, 15331.0], [33.1, 15331.0], [33.2, 15336.0], [33.3, 15349.0], [33.4, 15360.0], [33.5, 15399.0], [33.6, 15433.0], [33.7, 15434.0], [33.8, 15443.0], [33.9, 15448.0], [34.0, 15461.0], [34.1, 15475.0], [34.2, 15476.0], [34.3, 15498.0], [34.4, 15502.0], [34.5, 15540.0], [34.6, 15553.0], [34.7, 15570.0], [34.8, 15575.0], [34.9, 15597.0], [35.0, 15600.0], [35.1, 15601.0], [35.2, 15615.0], [35.3, 15626.0], [35.4, 15680.0], [35.5, 15684.0], [35.6, 15689.0], [35.7, 15697.0], [35.8, 15731.0], [35.9, 15736.0], [36.0, 15742.0], [36.1, 15759.0], [36.2, 15766.0], [36.3, 15774.0], [36.4, 15779.0], [36.5, 15783.0], [36.6, 15794.0], [36.7, 15822.0], [36.8, 15828.0], [36.9, 15845.0], [37.0, 15857.0], [37.1, 15865.0], [37.2, 15871.0], [37.3, 15873.0], [37.4, 15875.0], [37.5, 15876.0], [37.6, 15929.0], [37.7, 15932.0], [37.8, 15937.0], [37.9, 15963.0], [38.0, 15972.0], [38.1, 16000.0], [38.2, 16002.0], [38.3, 16006.0], [38.4, 16035.0], [38.5, 16061.0], [38.6, 16087.0], [38.7, 16098.0], [38.8, 16102.0], [38.9, 16134.0], [39.0, 16139.0], [39.1, 16156.0], [39.2, 16164.0], [39.3, 16166.0], [39.4, 16187.0], [39.5, 16244.0], [39.6, 16260.0], [39.7, 16262.0], [39.8, 16280.0], [39.9, 16290.0], [40.0, 16295.0], [40.1, 16297.0], [40.2, 16302.0], [40.3, 16304.0], [40.4, 16310.0], [40.5, 16362.0], [40.6, 16381.0], [40.7, 16382.0], [40.8, 16385.0], [40.9, 16396.0], [41.0, 16438.0], [41.1, 16443.0], [41.2, 16455.0], [41.3, 16476.0], [41.4, 16484.0], [41.5, 16510.0], [41.6, 16529.0], [41.7, 16532.0], [41.8, 16544.0], [41.9, 16569.0], [42.0, 16607.0], [42.1, 16609.0], [42.2, 16646.0], [42.3, 16653.0], [42.4, 16662.0], [42.5, 16673.0], [42.6, 16684.0], [42.7, 16711.0], [42.8, 16734.0], [42.9, 16738.0], [43.0, 16743.0], [43.1, 16764.0], [43.2, 16788.0], [43.3, 16800.0], [43.4, 16807.0], [43.5, 16810.0], [43.6, 16822.0], [43.7, 16848.0], [43.8, 16852.0], [43.9, 16889.0], [44.0, 16908.0], [44.1, 16921.0], [44.2, 16927.0], [44.3, 16943.0], [44.4, 16943.0], [44.5, 17001.0], [44.6, 17003.0], [44.7, 17006.0], [44.8, 17023.0], [44.9, 17026.0], [45.0, 17069.0], [45.1, 17075.0], [45.2, 17104.0], [45.3, 17108.0], [45.4, 17118.0], [45.5, 17168.0], [45.6, 17201.0], [45.7, 17221.0], [45.8, 17224.0], [45.9, 17232.0], [46.0, 17248.0], [46.1, 17259.0], [46.2, 17268.0], [46.3, 17272.0], [46.4, 17296.0], [46.5, 17311.0], [46.6, 17316.0], [46.7, 17318.0], [46.8, 17327.0], [46.9, 17361.0], [47.0, 17364.0], [47.1, 17371.0], [47.2, 17396.0], [47.3, 17418.0], [47.4, 17419.0], [47.5, 17424.0], [47.6, 17439.0], [47.7, 17466.0], [47.8, 17469.0], [47.9, 17469.0], [48.0, 17485.0], [48.1, 17489.0], [48.2, 17492.0], [48.3, 17498.0], [48.4, 17524.0], [48.5, 17563.0], [48.6, 17603.0], [48.7, 17609.0], [48.8, 17647.0], [48.9, 17675.0], [49.0, 17678.0], [49.1, 17680.0], [49.2, 17703.0], [49.3, 17719.0], [49.4, 17728.0], [49.5, 17734.0], [49.6, 17750.0], [49.7, 17777.0], [49.8, 17778.0], [49.9, 17782.0], [50.0, 17798.0], [50.1, 17830.0], [50.2, 17834.0], [50.3, 17873.0], [50.4, 17879.0], [50.5, 17879.0], [50.6, 17882.0], [50.7, 17884.0], [50.8, 17895.0], [50.9, 17900.0], [51.0, 17902.0], [51.1, 17960.0], [51.2, 17964.0], [51.3, 17977.0], [51.4, 17988.0], [51.5, 18003.0], [51.6, 18026.0], [51.7, 18028.0], [51.8, 18050.0], [51.9, 18056.0], [52.0, 18094.0], [52.1, 18095.0], [52.2, 18117.0], [52.3, 18118.0], [52.4, 18119.0], [52.5, 18119.0], [52.6, 18157.0], [52.7, 18217.0], [52.8, 18230.0], [52.9, 18252.0], [53.0, 18269.0], [53.1, 18274.0], [53.2, 18294.0], [53.3, 18303.0], [53.4, 18304.0], [53.5, 18318.0], [53.6, 18324.0], [53.7, 18324.0], [53.8, 18348.0], [53.9, 18367.0], [54.0, 18429.0], [54.1, 18456.0], [54.2, 18459.0], [54.3, 18469.0], [54.4, 18476.0], [54.5, 18480.0], [54.6, 18484.0], [54.7, 18502.0], [54.8, 18520.0], [54.9, 18556.0], [55.0, 18583.0], [55.1, 18587.0], [55.2, 18600.0], [55.3, 18613.0], [55.4, 18622.0], [55.5, 18627.0], [55.6, 18675.0], [55.7, 18711.0], [55.8, 18728.0], [55.9, 18728.0], [56.0, 18735.0], [56.1, 18747.0], [56.2, 18780.0], [56.3, 18781.0], [56.4, 18796.0], [56.5, 18841.0], [56.6, 18871.0], [56.7, 18882.0], [56.8, 18890.0], [56.9, 18890.0], [57.0, 18894.0], [57.1, 18896.0], [57.2, 18901.0], [57.3, 18916.0], [57.4, 18923.0], [57.5, 18935.0], [57.6, 18942.0], [57.7, 18947.0], [57.8, 18968.0], [57.9, 18970.0], [58.0, 19001.0], [58.1, 19016.0], [58.2, 19022.0], [58.3, 19023.0], [58.4, 19034.0], [58.5, 19082.0], [58.6, 19089.0], [58.7, 19097.0], [58.8, 19109.0], [58.9, 19125.0], [59.0, 19137.0], [59.1, 19147.0], [59.2, 19156.0], [59.3, 19168.0], [59.4, 19170.0], [59.5, 19181.0], [59.6, 19208.0], [59.7, 19253.0], [59.8, 19260.0], [59.9, 19319.0], [60.0, 19341.0], [60.1, 19349.0], [60.2, 19358.0], [60.3, 19363.0], [60.4, 19378.0], [60.5, 19380.0], [60.6, 19422.0], [60.7, 19430.0], [60.8, 19462.0], [60.9, 19463.0], [61.0, 19467.0], [61.1, 19482.0], [61.2, 19521.0], [61.3, 19528.0], [61.4, 19541.0], [61.5, 19570.0], [61.6, 19572.0], [61.7, 19586.0], [61.8, 19594.0], [61.9, 19606.0], [62.0, 19607.0], [62.1, 19615.0], [62.2, 19615.0], [62.3, 19639.0], [62.4, 19661.0], [62.5, 19667.0], [62.6, 19670.0], [62.7, 19673.0], [62.8, 19689.0], [62.9, 19693.0], [63.0, 19741.0], [63.1, 19757.0], [63.2, 19773.0], [63.3, 19783.0], [63.4, 19794.0], [63.5, 19800.0], [63.6, 19833.0], [63.7, 19842.0], [63.8, 19849.0], [63.9, 19855.0], [64.0, 19876.0], [64.1, 19912.0], [64.2, 19919.0], [64.3, 19919.0], [64.4, 19928.0], [64.5, 19938.0], [64.6, 19965.0], [64.7, 19997.0], [64.8, 20007.0], [64.9, 20023.0], [65.0, 20030.0], [65.1, 20037.0], [65.2, 20045.0], [65.3, 20047.0], [65.4, 20065.0], [65.5, 20078.0], [65.6, 20080.0], [65.7, 20080.0], [65.8, 20092.0], [65.9, 20113.0], [66.0, 20150.0], [66.1, 20165.0], [66.2, 20198.0], [66.3, 20208.0], [66.4, 20222.0], [66.5, 20229.0], [66.6, 20229.0], [66.7, 20264.0], [66.8, 20284.0], [66.9, 20287.0], [67.0, 20290.0], [67.1, 20311.0], [67.2, 20328.0], [67.3, 20362.0], [67.4, 20364.0], [67.5, 20392.0], [67.6, 20402.0], [67.7, 20414.0], [67.8, 20436.0], [67.9, 20441.0], [68.0, 20458.0], [68.1, 20482.0], [68.2, 20493.0], [68.3, 20502.0], [68.4, 20510.0], [68.5, 20519.0], [68.6, 20520.0], [68.7, 20551.0], [68.8, 20554.0], [68.9, 20554.0], [69.0, 20555.0], [69.1, 20580.0], [69.2, 20612.0], [69.3, 20624.0], [69.4, 20626.0], [69.5, 20691.0], [69.6, 20698.0], [69.7, 20720.0], [69.8, 20724.0], [69.9, 20816.0], [70.0, 21277.0], [70.1, 21479.0], [70.2, 22656.0], [70.3, 22750.0], [70.4, 22836.0], [70.5, 23125.0], [70.6, 23143.0], [70.7, 23224.0], [70.8, 23460.0], [70.9, 23466.0], [71.0, 23555.0], [71.1, 23644.0], [71.2, 23739.0], [71.3, 23832.0], [71.4, 23849.0], [71.5, 23864.0], [71.6, 24045.0], [71.7, 24051.0], [71.8, 24058.0], [71.9, 24952.0], [72.0, 24967.0], [72.1, 26516.0], [72.2, 27084.0], [72.3, 27250.0], [72.4, 27972.0], [72.5, 28000.0], [72.6, 28120.0], [72.7, 28491.0], [72.8, 28540.0], [72.9, 28699.0], [73.0, 28792.0], [73.1, 28995.0], [73.2, 29188.0], [73.3, 29208.0], [73.4, 29321.0], [73.5, 29432.0], [73.6, 29662.0], [73.7, 29702.0], [73.8, 30086.0], [73.9, 30152.0], [74.0, 30245.0], [74.1, 30279.0], [74.2, 30310.0], [74.3, 30342.0], [74.4, 30383.0], [74.5, 30425.0], [74.6, 30437.0], [74.7, 30444.0], [74.8, 30486.0], [74.9, 30551.0], [75.0, 30749.0], [75.1, 30752.0], [75.2, 30754.0], [75.3, 30951.0], [75.4, 30955.0], [75.5, 31055.0], [75.6, 31058.0], [75.7, 31153.0], [75.8, 31351.0], [75.9, 31411.0], [76.0, 31537.0], [76.1, 31680.0], [76.2, 31833.0], [76.3, 31925.0], [76.4, 31985.0], [76.5, 31999.0], [76.6, 32005.0], [76.7, 32053.0], [76.8, 32065.0], [76.9, 32092.0], [77.0, 32205.0], [77.1, 32298.0], [77.2, 32313.0], [77.3, 32457.0], [77.4, 32460.0], [77.5, 32560.0], [77.6, 32595.0], [77.7, 32670.0], [77.8, 32912.0], [77.9, 32951.0], [78.0, 32991.0], [78.1, 33024.0], [78.2, 33127.0], [78.3, 33128.0], [78.4, 33204.0], [78.5, 33213.0], [78.6, 33326.0], [78.7, 33383.0], [78.8, 33460.0], [78.9, 33463.0], [79.0, 33597.0], [79.1, 33661.0], [79.2, 33676.0], [79.3, 33687.0], [79.4, 33692.0], [79.5, 33757.0], [79.6, 33906.0], [79.7, 33934.0], [79.8, 33948.0], [79.9, 33983.0], [80.0, 34051.0], [80.1, 34165.0], [80.2, 34230.0], [80.3, 34289.0], [80.4, 34308.0], [80.5, 34348.0], [80.6, 34415.0], [80.7, 34455.0], [80.8, 34537.0], [80.9, 34553.0], [81.0, 34842.0], [81.1, 34844.0], [81.2, 35014.0], [81.3, 35041.0], [81.4, 35086.0], [81.5, 35131.0], [81.6, 35163.0], [81.7, 35362.0], [81.8, 35365.0], [81.9, 35368.0], [82.0, 35437.0], [82.1, 35472.0], [82.2, 35780.0], [82.3, 35789.0], [82.4, 35856.0], [82.5, 35869.0], [82.6, 36066.0], [82.7, 36068.0], [82.8, 36094.0], [82.9, 36163.0], [83.0, 36205.0], [83.1, 36301.0], [83.2, 36405.0], [83.3, 36517.0], [83.4, 36566.0], [83.5, 36572.0], [83.6, 36578.0], [83.7, 36771.0], [83.8, 36896.0], [83.9, 36897.0], [84.0, 37011.0], [84.1, 37096.0], [84.2, 37108.0], [84.3, 37219.0], [84.4, 37277.0], [84.5, 37610.0], [84.6, 37613.0], [84.7, 37824.0], [84.8, 37827.0], [84.9, 37835.0], [85.0, 37931.0], [85.1, 37957.0], [85.2, 37960.0], [85.3, 38040.0], [85.4, 38129.0], [85.5, 38132.0], [85.6, 38280.0], [85.7, 38332.0], [85.8, 38335.0], [85.9, 38433.0], [86.0, 38525.0], [86.1, 38527.0], [86.2, 38541.0], [86.3, 38647.0], [86.4, 38751.0], [86.5, 38781.0], [86.6, 38837.0], [86.7, 38839.0], [86.8, 38941.0], [86.9, 38962.0], [87.0, 39030.0], [87.1, 39053.0], [87.2, 39111.0], [87.3, 39244.0], [87.4, 39250.0], [87.5, 39343.0], [87.6, 39350.0], [87.7, 39353.0], [87.8, 39366.0], [87.9, 39499.0], [88.0, 39717.0], [88.1, 39719.0], [88.2, 39721.0], [88.3, 39729.0], [88.4, 39735.0], [88.5, 39738.0], [88.6, 39739.0], [88.7, 39743.0], [88.8, 39764.0], [88.9, 39816.0], [89.0, 39851.0], [89.1, 39863.0], [89.2, 39934.0], [89.3, 39994.0], [89.4, 39996.0], [89.5, 39999.0], [89.6, 40107.0], [89.7, 40143.0], [89.8, 40221.0], [89.9, 40262.0], [90.0, 40314.0], [90.1, 40371.0], [90.2, 40398.0], [90.3, 40426.0], [90.4, 40527.0], [90.5, 40530.0], [90.6, 40562.0], [90.7, 40590.0], [90.8, 40605.0], [90.9, 40661.0], [91.0, 40662.0], [91.1, 40677.0], [91.2, 40696.0], [91.3, 40736.0], [91.4, 40777.0], [91.5, 40793.0], [91.6, 40869.0], [91.7, 40909.0], [91.8, 40929.0], [91.9, 40986.0], [92.0, 41011.0], [92.1, 41105.0], [92.2, 41110.0], [92.3, 41137.0], [92.4, 41228.0], [92.5, 41287.0], [92.6, 41349.0], [92.7, 41390.0], [92.8, 41538.0], [92.9, 41641.0], [93.0, 41681.0], [93.1, 41685.0], [93.2, 41696.0], [93.3, 41734.0], [93.4, 41866.0], [93.5, 41913.0], [93.6, 41950.0], [93.7, 41955.0], [93.8, 42065.0], [93.9, 42078.0], [94.0, 42171.0], [94.1, 42213.0], [94.2, 42215.0], [94.3, 42276.0], [94.4, 42276.0], [94.5, 42290.0], [94.6, 42301.0], [94.7, 42334.0], [94.8, 42352.0], [94.9, 42393.0], [95.0, 42413.0], [95.1, 42456.0], [95.2, 42471.0], [95.3, 42509.0], [95.4, 42514.0], [95.5, 42523.0], [95.6, 42534.0], [95.7, 42537.0], [95.8, 42570.0], [95.9, 42591.0], [96.0, 42657.0], [96.1, 42707.0], [96.2, 42721.0], [96.3, 42731.0], [96.4, 42746.0], [96.5, 42767.0], [96.6, 42770.0], [96.7, 42770.0], [96.8, 42776.0], [96.9, 42809.0], [97.0, 42845.0], [97.1, 42969.0], [97.2, 42987.0], [97.3, 43007.0], [97.4, 43021.0], [97.5, 43323.0], [97.6, 43376.0], [97.7, 43388.0], [97.8, 43392.0], [97.9, 43397.0], [98.0, 43427.0], [98.1, 43434.0], [98.2, 43470.0], [98.3, 43483.0], [98.4, 43486.0], [98.5, 43507.0], [98.6, 43628.0], [98.7, 43654.0], [98.8, 43658.0], [98.9, 43686.0], [99.0, 43693.0], [99.1, 43703.0], [99.2, 43760.0], [99.3, 43794.0], [99.4, 43929.0], [99.5, 43940.0], [99.6, 43941.0], [99.7, 44042.0], [99.8, 44095.0], [99.9, 44183.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 9600.0, "maxY": 23.0, "series": [{"data": [[32900.0, 3.0], [33300.0, 2.0], [33700.0, 1.0], [34100.0, 1.0], [34500.0, 2.0], [35300.0, 3.0], [35700.0, 2.0], [36100.0, 1.0], [36500.0, 4.0], [38100.0, 2.0], [38500.0, 3.0], [38900.0, 2.0], [39300.0, 4.0], [39700.0, 9.0], [40100.0, 2.0], [40500.0, 4.0], [40900.0, 3.0], [41300.0, 2.0], [41700.0, 1.0], [42100.0, 1.0], [42500.0, 7.0], [42900.0, 2.0], [43300.0, 5.0], [43700.0, 3.0], [44100.0, 1.0], [9600.0, 1.0], [10300.0, 1.0], [10400.0, 3.0], [10500.0, 2.0], [10600.0, 5.0], [10700.0, 2.0], [10800.0, 2.0], [10900.0, 6.0], [11000.0, 3.0], [11100.0, 6.0], [11200.0, 4.0], [11300.0, 6.0], [11400.0, 5.0], [11500.0, 23.0], [11600.0, 12.0], [11700.0, 7.0], [11800.0, 9.0], [11900.0, 5.0], [12000.0, 7.0], [12100.0, 7.0], [12200.0, 6.0], [12300.0, 4.0], [12400.0, 7.0], [12500.0, 7.0], [12600.0, 7.0], [12700.0, 8.0], [12800.0, 4.0], [12900.0, 8.0], [13000.0, 9.0], [13100.0, 7.0], [13200.0, 5.0], [13300.0, 8.0], [13400.0, 5.0], [13500.0, 6.0], [13600.0, 10.0], [13700.0, 4.0], [13800.0, 8.0], [13900.0, 8.0], [14000.0, 6.0], [14100.0, 8.0], [14200.0, 4.0], [14300.0, 7.0], [14500.0, 7.0], [14400.0, 7.0], [14700.0, 9.0], [14600.0, 7.0], [14800.0, 4.0], [14900.0, 11.0], [15000.0, 5.0], [15100.0, 6.0], [15200.0, 10.0], [15300.0, 7.0], [15700.0, 9.0], [15400.0, 8.0], [15500.0, 6.0], [15600.0, 8.0], [15800.0, 9.0], [15900.0, 5.0], [16000.0, 7.0], [16100.0, 7.0], [16200.0, 7.0], [16300.0, 8.0], [16400.0, 5.0], [16600.0, 7.0], [17200.0, 9.0], [16800.0, 7.0], [17400.0, 11.0], [17000.0, 7.0], [18200.0, 6.0], [18000.0, 7.0], [17600.0, 6.0], [17800.0, 8.0], [18400.0, 7.0], [19000.0, 8.0], [18600.0, 5.0], [19400.0, 6.0], [18800.0, 7.0], [19200.0, 3.0], [19600.0, 11.0], [20000.0, 11.0], [19800.0, 6.0], [20200.0, 8.0], [20400.0, 7.0], [21200.0, 1.0], [20600.0, 5.0], [20800.0, 1.0], [21400.0, 1.0], [22600.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [23400.0, 2.0], [23600.0, 1.0], [23800.0, 3.0], [24000.0, 3.0], [27000.0, 1.0], [27200.0, 1.0], [28000.0, 1.0], [28400.0, 1.0], [28600.0, 1.0], [29200.0, 1.0], [29400.0, 1.0], [29600.0, 1.0], [30000.0, 1.0], [30200.0, 2.0], [30400.0, 4.0], [31000.0, 3.0], [31400.0, 1.0], [31600.0, 1.0], [31800.0, 1.0], [32000.0, 4.0], [32200.0, 2.0], [32400.0, 2.0], [32600.0, 1.0], [33200.0, 2.0], [33600.0, 4.0], [34000.0, 1.0], [34400.0, 2.0], [34800.0, 2.0], [36000.0, 3.0], [36400.0, 1.0], [36800.0, 2.0], [37200.0, 2.0], [37600.0, 2.0], [38000.0, 1.0], [38400.0, 1.0], [38800.0, 2.0], [39200.0, 2.0], [40400.0, 1.0], [40800.0, 1.0], [41200.0, 2.0], [41600.0, 4.0], [42000.0, 2.0], [42400.0, 3.0], [42800.0, 2.0], [43600.0, 5.0], [44000.0, 2.0], [33100.0, 2.0], [33500.0, 1.0], [33900.0, 4.0], [34300.0, 2.0], [35100.0, 2.0], [36300.0, 1.0], [36700.0, 1.0], [37100.0, 1.0], [37900.0, 3.0], [38300.0, 2.0], [38700.0, 2.0], [39100.0, 1.0], [39900.0, 4.0], [40300.0, 3.0], [40700.0, 3.0], [41100.0, 3.0], [41500.0, 1.0], [41900.0, 3.0], [42300.0, 4.0], [42700.0, 8.0], [43500.0, 1.0], [43900.0, 3.0], [16500.0, 5.0], [17300.0, 8.0], [16700.0, 6.0], [16900.0, 5.0], [17100.0, 4.0], [17500.0, 2.0], [17900.0, 6.0], [17700.0, 9.0], [18300.0, 7.0], [18100.0, 5.0], [18500.0, 5.0], [18900.0, 8.0], [18700.0, 8.0], [19100.0, 8.0], [19300.0, 7.0], [19900.0, 7.0], [19500.0, 7.0], [19700.0, 5.0], [20100.0, 4.0], [20300.0, 5.0], [20500.0, 9.0], [20700.0, 2.0], [22700.0, 1.0], [23100.0, 2.0], [23500.0, 1.0], [23700.0, 1.0], [24900.0, 2.0], [26500.0, 1.0], [27900.0, 1.0], [28100.0, 1.0], [28500.0, 1.0], [28700.0, 1.0], [28900.0, 1.0], [29100.0, 1.0], [29300.0, 1.0], [29700.0, 1.0], [30100.0, 1.0], [30300.0, 3.0], [30500.0, 1.0], [30700.0, 3.0], [30900.0, 2.0], [31100.0, 1.0], [31300.0, 1.0], [31500.0, 1.0], [31900.0, 3.0], [32300.0, 1.0], [32500.0, 2.0], [33000.0, 1.0], [33400.0, 2.0], [34200.0, 2.0], [35000.0, 3.0], [35400.0, 2.0], [35800.0, 2.0], [36200.0, 1.0], [37000.0, 2.0], [37800.0, 3.0], [38200.0, 1.0], [38600.0, 1.0], [39000.0, 2.0], [39400.0, 1.0], [39800.0, 3.0], [40200.0, 2.0], [40600.0, 5.0], [41000.0, 1.0], [41800.0, 1.0], [42200.0, 5.0], [42600.0, 1.0], [43000.0, 2.0], [43400.0, 5.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 315.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 685.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 315.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 685.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 133.0264150943397, "minX": 1.62248718E12, "maxY": 633.0394557823133, "series": [{"data": [[1.62248718E12, 633.0394557823133], [1.62248724E12, 133.0264150943397]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248724E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9659.0, "minX": 1.0, "maxY": 44183.0, "series": [{"data": [[2.0, 44095.0], [3.0, 43427.0], [4.0, 43470.0], [5.0, 43794.0], [6.0, 43941.0], [7.0, 44042.0], [8.0, 43940.0], [9.0, 43929.0], [10.0, 43323.0], [11.0, 43658.0], [12.0, 43654.0], [13.0, 43703.0], [14.0, 43760.0], [15.0, 43686.0], [16.0, 43693.0], [17.0, 43486.0], [18.0, 43628.0], [19.0, 43483.0], [20.0, 43397.0], [21.0, 42770.0], [22.0, 43507.0], [23.0, 43376.0], [24.0, 43392.0], [25.0, 42767.0], [26.0, 42731.0], [27.0, 43434.0], [28.0, 42570.0], [29.0, 43388.0], [30.0, 42514.0], [31.0, 42534.0], [33.0, 42591.0], [32.0, 42537.0], [35.0, 42509.0], [34.0, 42776.0], [37.0, 43021.0], [36.0, 42969.0], [39.0, 42987.0], [38.0, 43007.0], [41.0, 42334.0], [40.0, 42845.0], [43.0, 42413.0], [42.0, 42746.0], [45.0, 42721.0], [44.0, 42471.0], [47.0, 42770.0], [46.0, 42809.0], [49.0, 42707.0], [48.0, 42657.0], [51.0, 42523.0], [50.0, 42456.0], [53.0, 42393.0], [52.0, 42290.0], [55.0, 42352.0], [54.0, 42171.0], [57.0, 42276.0], [56.0, 42213.0], [59.0, 42301.0], [58.0, 42215.0], [61.0, 41950.0], [60.0, 42276.0], [63.0, 41955.0], [62.0, 42065.0], [67.0, 41696.0], [66.0, 41866.0], [65.0, 41913.0], [64.0, 42078.0], [71.0, 41641.0], [70.0, 41685.0], [69.0, 41707.5], [75.0, 41287.0], [74.0, 41369.5], [72.0, 41538.0], [79.0, 41105.0], [78.0, 41137.0], [77.0, 41110.0], [76.0, 41228.0], [83.0, 40909.0], [82.0, 40929.0], [81.0, 40986.0], [80.0, 41011.0], [87.0, 40696.0], [86.0, 40677.0], [85.0, 40793.0], [84.0, 40869.0], [91.0, 40736.0], [90.0, 40691.0], [88.0, 40662.0], [95.0, 40527.0], [94.0, 40426.0], [93.0, 40590.0], [92.0, 40661.0], [99.0, 40371.0], [98.0, 40398.0], [97.0, 40530.0], [96.0, 40562.0], [103.0, 39996.0], [102.0, 40221.0], [101.0, 40314.0], [100.0, 40262.0], [107.0, 39999.0], [106.0, 39994.0], [105.0, 40107.0], [104.0, 40143.0], [111.0, 39863.0], [110.0, 39735.0], [109.0, 39764.0], [108.0, 39934.0], [115.0, 39717.0], [114.0, 39851.0], [113.0, 39743.0], [112.0, 39721.0], [118.0, 39719.0], [117.0, 39729.0], [116.0, 39816.0], [123.0, 39350.0], [122.0, 39353.0], [121.0, 39366.0], [120.0, 39738.5], [127.0, 39250.0], [126.0, 39244.0], [125.0, 39343.0], [124.0, 39499.0], [135.0, 38781.0], [134.0, 38839.0], [133.0, 38837.0], [132.0, 38941.0], [131.0, 38962.0], [130.0, 39111.0], [129.0, 39030.0], [128.0, 39053.0], [143.0, 38332.0], [142.0, 38335.0], [141.0, 38433.0], [140.0, 38525.0], [139.0, 38527.0], [138.0, 38541.0], [137.0, 38647.0], [136.0, 38751.0], [151.0, 37835.0], [150.0, 37931.0], [149.0, 38040.0], [148.0, 37957.0], [147.0, 37960.0], [146.0, 38280.0], [145.0, 38129.0], [144.0, 38132.0], [158.0, 37108.0], [157.0, 37277.0], [156.0, 37219.0], [155.0, 37610.0], [154.0, 37613.0], [153.0, 37824.0], [152.0, 37827.0], [167.0, 36572.0], [166.0, 36547.5], [164.0, 36566.0], [163.0, 36771.0], [162.0, 36897.0], [161.0, 36896.0], [160.0, 37053.5], [175.0, 35869.0], [174.0, 36066.0], [173.0, 36068.0], [172.0, 36094.0], [171.0, 36163.0], [170.0, 36205.0], [169.0, 36301.0], [168.0, 36405.0], [183.0, 35365.0], [182.0, 35368.0], [181.0, 35437.0], [180.0, 35362.0], [179.0, 35472.0], [178.0, 35780.0], [177.0, 35856.0], [176.0, 35789.0], [191.0, 34553.0], [190.0, 34842.0], [189.0, 34844.0], [188.0, 35086.0], [187.0, 35014.0], [186.0, 35041.0], [185.0, 35131.0], [184.0, 35163.0], [199.0, 34230.0], [198.0, 34165.0], [197.0, 34308.0], [196.0, 34289.0], [195.0, 34415.0], [194.0, 34348.0], [193.0, 34455.0], [192.0, 34537.0], [207.0, 33692.0], [206.0, 33687.0], [205.0, 33757.0], [204.0, 33934.0], [203.0, 33906.0], [202.0, 33948.0], [201.0, 33983.0], [200.0, 34051.0], [215.0, 33213.0], [214.0, 33383.0], [213.0, 33326.0], [212.0, 33460.0], [211.0, 33463.0], [210.0, 33661.0], [209.0, 33597.0], [208.0, 33676.0], [223.0, 32670.0], [222.0, 32951.0], [221.0, 32912.0], [220.0, 32991.0], [219.0, 33024.0], [218.0, 33127.0], [217.0, 33128.0], [216.0, 33204.0], [231.0, 32092.0], [230.0, 32205.0], [229.0, 32298.0], [228.0, 32313.0], [227.0, 32460.0], [226.0, 32457.0], [225.0, 32595.0], [224.0, 32560.0], [239.0, 31680.0], [238.0, 31833.0], [237.0, 31985.0], [236.0, 32005.0], [235.0, 31999.0], [234.0, 31925.0], [233.0, 32053.0], [232.0, 32065.0], [247.0, 31058.0], [246.0, 30955.0], [245.0, 31055.0], [244.0, 31063.0], [243.0, 31153.0], [242.0, 31351.0], [241.0, 31411.0], [240.0, 31537.0], [255.0, 30383.0], [254.0, 30444.0], [253.0, 30486.0], [252.0, 30551.0], [251.0, 30752.0], [250.0, 30749.0], [249.0, 30754.0], [248.0, 30951.0], [270.0, 28995.0], [271.0, 28792.0], [269.0, 29208.0], [268.0, 29188.0], [267.0, 29321.0], [266.0, 29432.0], [265.0, 29702.0], [264.0, 29662.0], [263.0, 30086.0], [256.0, 30437.0], [259.0, 30367.5], [257.0, 30342.0], [262.0, 30152.0], [261.0, 30245.0], [260.0, 30279.0], [286.0, 23864.0], [287.0, 23849.0], [285.0, 24058.0], [284.0, 24051.0], [283.0, 24045.0], [282.0, 24952.0], [281.0, 24967.0], [280.0, 26516.0], [279.0, 27084.0], [273.0, 28540.0], [272.0, 28699.0], [275.0, 28120.0], [274.0, 28491.0], [278.0, 27250.0], [277.0, 27972.0], [276.0, 28000.0], [302.0, 20724.0], [303.0, 20720.0], [301.0, 20816.0], [300.0, 21479.0], [299.0, 22703.0], [297.0, 22836.0], [296.0, 23143.0], [295.0, 23125.0], [289.0, 23832.0], [288.0, 23739.0], [291.0, 23555.0], [290.0, 23644.0], [294.0, 23224.0], [293.0, 23460.0], [292.0, 23466.0], [318.0, 20493.0], [319.0, 20482.0], [317.0, 20506.0], [307.0, 20624.0], [306.0, 20626.0], [305.0, 20691.0], [304.0, 20698.0], [315.0, 20898.5], [313.0, 20519.0], [312.0, 20551.0], [311.0, 20555.0], [310.0, 20554.0], [309.0, 20580.0], [308.0, 20612.0], [334.0, 20229.0], [335.0, 20229.0], [333.0, 20264.0], [332.0, 20287.0], [331.0, 20284.0], [330.0, 20290.0], [329.0, 20311.0], [328.0, 20328.0], [327.0, 20362.0], [321.0, 20441.0], [320.0, 20458.0], [323.0, 20436.0], [322.0, 20414.0], [326.0, 20364.0], [325.0, 20392.0], [324.0, 20402.0], [350.0, 20023.0], [351.0, 20007.0], [349.0, 20037.0], [348.0, 20047.0], [347.0, 20045.0], [346.0, 20078.0], [345.0, 20065.0], [344.0, 20080.0], [343.0, 20080.0], [337.0, 20208.0], [336.0, 20222.0], [339.0, 20165.0], [338.0, 20198.0], [342.0, 20092.0], [341.0, 20113.0], [340.0, 20150.0], [366.0, 19783.5], [367.0, 19757.0], [364.0, 19783.0], [355.0, 19919.0], [354.0, 19938.0], [353.0, 19965.0], [352.0, 19997.0], [363.0, 19800.0], [362.0, 19833.0], [361.0, 19842.0], [360.0, 19852.0], [358.0, 19876.0], [357.0, 19919.0], [356.0, 19912.0], [382.0, 19572.0], [383.0, 19570.0], [381.0, 19586.0], [380.0, 19606.0], [379.0, 19594.0], [378.0, 19615.0], [377.0, 19607.0], [376.0, 19615.0], [375.0, 19661.0], [369.0, 19741.0], [368.0, 20554.0], [371.0, 19689.0], [370.0, 19693.0], [374.0, 19670.0], [373.0, 19667.0], [372.0, 19673.0], [398.0, 19319.0], [399.0, 19260.0], [397.0, 19341.0], [396.0, 19349.0], [395.0, 19358.0], [394.0, 19378.0], [393.0, 19363.0], [392.0, 19380.0], [391.0, 19422.0], [385.0, 19528.0], [384.0, 19541.0], [387.0, 19482.0], [386.0, 19521.0], [390.0, 19462.0], [389.0, 19463.0], [388.0, 19467.0], [414.0, 19137.0], [415.0, 19034.0], [413.0, 19082.0], [412.0, 19089.0], [411.0, 19097.0], [410.0, 19109.0], [409.0, 19125.0], [408.0, 19147.0], [407.0, 19156.0], [401.0, 19253.0], [400.0, 20030.0], [403.0, 19208.0], [402.0, 19928.0], [406.0, 19170.0], [405.0, 19168.0], [404.0, 19181.0], [430.0, 18894.0], [431.0, 18871.0], [429.0, 18882.0], [428.0, 18890.0], [427.0, 18896.0], [426.0, 18916.0], [425.0, 18890.0], [424.0, 18942.0], [423.0, 18923.0], [417.0, 19001.0], [416.0, 19022.0], [419.0, 18970.0], [418.0, 19639.0], [422.0, 18935.0], [421.0, 18947.0], [420.0, 18968.0], [446.0, 18600.0], [447.0, 18587.0], [445.0, 18613.0], [444.0, 18622.0], [443.0, 18627.0], [442.0, 18675.0], [441.0, 18711.0], [440.0, 18728.0], [439.0, 19430.0], [432.0, 18841.0], [435.0, 18780.5], [433.0, 18796.0], [438.0, 18728.0], [437.0, 18735.0], [436.0, 18747.0], [462.0, 18324.0], [463.0, 18324.0], [461.0, 19023.0], [460.0, 19016.0], [459.0, 18367.0], [458.0, 18429.0], [457.0, 18456.0], [456.0, 18459.0], [455.0, 18469.0], [449.0, 18556.0], [448.0, 18583.0], [451.0, 18502.0], [450.0, 18520.0], [454.0, 18476.0], [453.0, 18480.0], [452.0, 18484.0], [478.0, 18348.0], [479.0, 18094.0], [477.0, 18117.5], [467.0, 18294.0], [466.0, 18318.0], [465.0, 18303.0], [464.0, 18304.0], [475.0, 18119.0], [473.0, 18157.0], [472.0, 18217.0], [471.0, 18565.5], [469.0, 18252.0], [468.0, 18274.0], [494.0, 17873.0], [495.0, 17879.0], [493.0, 17881.5], [483.0, 18028.0], [482.0, 18026.0], [481.0, 18050.0], [480.0, 18056.0], [491.0, 17882.0], [490.0, 17895.0], [489.0, 17900.0], [488.0, 17960.0], [487.0, 17964.0], [486.0, 17977.0], [485.0, 17988.0], [484.0, 18003.0], [510.0, 17678.0], [511.0, 18269.0], [509.0, 17469.0], [508.0, 17680.0], [507.0, 17675.0], [506.0, 17703.0], [505.0, 17719.0], [504.0, 17728.0], [503.0, 17734.0], [497.0, 17834.0], [496.0, 17830.0], [499.0, 17778.0], [498.0, 17798.0], [502.0, 17750.0], [501.0, 17782.0], [500.0, 17777.0], [540.0, 17248.0], [543.0, 17224.0], [529.0, 17364.0], [528.0, 17371.0], [531.0, 17361.0], [530.0, 17902.0], [533.0, 17316.0], [532.0, 17327.0], [542.0, 17221.0], [541.0, 17232.0], [539.0, 17259.0], [538.0, 17268.0], [537.0, 17272.0], [536.0, 17296.0], [527.0, 17396.0], [513.0, 17603.0], [512.0, 17647.0], [515.0, 18095.0], [514.0, 17609.0], [517.0, 17524.0], [516.0, 17563.0], [519.0, 17492.0], [518.0, 17498.0], [526.0, 17418.0], [525.0, 17424.0], [524.0, 17429.0], [522.0, 17469.0], [521.0, 17485.0], [520.0, 17489.0], [535.0, 17311.0], [534.0, 17318.0], [572.0, 16743.0], [575.0, 16684.0], [561.0, 16927.0], [560.0, 16734.0], [563.0, 16889.0], [562.0, 16908.0], [565.0, 16848.0], [564.0, 16852.0], [574.0, 16711.0], [573.0, 16738.0], [571.0, 16764.0], [570.0, 16788.0], [569.0, 16807.0], [568.0, 16800.0], [559.0, 16943.0], [545.0, 17168.0], [544.0, 17201.0], [547.0, 17118.0], [546.0, 16921.0], [549.0, 17108.0], [548.0, 17104.0], [551.0, 17069.0], [550.0, 17075.0], [557.0, 17466.0], [556.0, 17003.0], [555.0, 17001.0], [554.0, 17006.0], [553.0, 17023.0], [552.0, 17026.0], [567.0, 16810.0], [566.0, 16822.0], [601.0, 16297.0], [606.0, 16261.0], [607.0, 16244.0], [593.0, 16396.0], [592.0, 16438.0], [595.0, 16381.0], [594.0, 16382.0], [597.0, 16156.0], [596.0, 16362.0], [604.0, 16280.0], [603.0, 16290.0], [602.0, 16295.0], [600.0, 16304.0], [583.0, 16569.0], [582.0, 16385.0], [581.0, 16607.0], [580.0, 16609.0], [579.0, 16646.0], [578.0, 16653.0], [577.0, 16662.0], [576.0, 16673.0], [591.0, 16443.0], [590.0, 16455.0], [589.0, 16476.0], [588.0, 16484.0], [587.0, 16510.0], [586.0, 16529.0], [585.0, 16532.0], [584.0, 16544.0], [599.0, 16302.0], [598.0, 16310.0], [636.0, 15794.0], [639.0, 15774.0], [625.0, 15932.0], [624.0, 15937.0], [627.0, 15766.0], [626.0, 15929.0], [629.0, 15873.0], [628.0, 15875.0], [638.0, 15779.0], [637.0, 15783.0], [635.0, 15822.0], [634.0, 15828.0], [633.0, 15845.0], [632.0, 15857.0], [623.0, 15963.0], [609.0, 16166.0], [608.0, 16187.0], [611.0, 16139.0], [610.0, 16164.0], [613.0, 16102.0], [612.0, 16134.0], [615.0, 16087.0], [614.0, 16098.0], [622.0, 15972.0], [621.0, 16000.0], [620.0, 16002.0], [619.0, 16006.0], [618.0, 15871.0], [617.0, 16035.0], [616.0, 16061.0], [631.0, 15865.0], [630.0, 15876.0], [668.0, 15736.0], [671.0, 15318.0], [657.0, 15476.0], [656.0, 15502.0], [659.0, 15498.0], [658.0, 15475.0], [661.0, 15448.0], [660.0, 15461.0], [670.0, 15331.0], [669.0, 15331.0], [667.0, 15349.0], [666.0, 15360.0], [665.0, 15399.0], [664.0, 15433.0], [655.0, 15540.0], [641.0, 15731.0], [640.0, 15759.0], [643.0, 15553.0], [642.0, 15742.0], [645.0, 15689.0], [644.0, 15697.0], [647.0, 15680.0], [646.0, 15684.0], [654.0, 15570.0], [653.0, 15575.0], [652.0, 15597.0], [651.0, 15601.0], [650.0, 15600.0], [649.0, 15615.0], [648.0, 15626.0], [663.0, 15434.0], [662.0, 15443.0], [696.0, 14990.0], [700.0, 14929.0], [703.0, 14910.0], [689.0, 15125.0], [688.0, 15144.0], [693.0, 15041.5], [691.0, 15089.0], [702.0, 14912.0], [701.0, 14917.0], [699.0, 14935.0], [698.0, 14976.0], [697.0, 14980.0], [687.0, 15164.0], [673.0, 15274.0], [672.0, 15275.0], [675.0, 15266.0], [674.0, 15336.0], [677.0, 15229.0], [676.0, 15272.0], [679.0, 15218.0], [678.0, 15214.0], [686.0, 14965.0], [685.0, 15177.0], [684.0, 15150.0], [683.0, 15160.0], [682.0, 15204.0], [681.0, 15245.0], [680.0, 15211.0], [695.0, 14998.0], [694.0, 15004.0], [732.0, 14459.0], [735.0, 14432.0], [720.0, 14627.0], [723.0, 14605.0], [721.0, 14620.0], [725.0, 14371.0], [724.0, 14581.0], [734.0, 14435.0], [733.0, 14246.0], [731.0, 14778.0], [730.0, 14500.0], [729.0, 14517.0], [728.0, 14531.0], [719.0, 14630.0], [705.0, 14866.0], [704.0, 14904.0], [707.0, 14822.0], [706.0, 14846.0], [709.0, 14796.0], [708.0, 14803.0], [711.0, 14769.0], [710.0, 14788.0], [718.0, 14667.0], [717.0, 14671.0], [716.0, 14736.0], [715.0, 14723.0], [714.0, 14728.0], [713.0, 14740.0], [727.0, 14532.0], [726.0, 14553.0], [764.0, 13992.0], [767.0, 13976.0], [753.0, 14136.0], [752.0, 14146.0], [755.0, 14124.0], [754.0, 14124.0], [757.0, 14112.0], [756.0, 14120.0], [766.0, 13974.0], [765.0, 13976.0], [763.0, 14011.0], [762.0, 14051.0], [761.0, 14060.0], [760.0, 14057.0], [751.0, 14173.0], [736.0, 14407.0], [739.0, 14405.0], [737.0, 14412.0], [741.0, 14380.0], [740.0, 14373.0], [743.0, 14322.0], [742.0, 14333.0], [750.0, 14203.0], [749.0, 14220.0], [748.0, 14519.0], [747.0, 14240.0], [746.0, 14040.0], [745.0, 14305.5], [759.0, 14070.0], [758.0, 14100.0], [793.0, 13606.0], [798.0, 13530.0], [799.0, 13519.0], [785.0, 13695.0], [784.0, 13716.0], [787.0, 13668.0], [786.0, 13695.0], [789.0, 13665.0], [788.0, 13668.0], [796.0, 13567.0], [795.0, 13597.0], [794.0, 13606.0], [792.0, 13614.0], [775.0, 13851.0], [774.0, 13861.0], [773.0, 13899.0], [772.0, 13899.0], [771.0, 13930.0], [770.0, 13913.0], [769.0, 13937.0], [768.0, 13942.0], [783.0, 13504.0], [782.0, 13719.0], [781.0, 13764.0], [780.0, 13769.0], [779.0, 13826.0], [778.0, 13832.0], [777.0, 13826.0], [776.0, 13844.0], [791.0, 13615.0], [790.0, 13657.0], [825.0, 13094.0], [829.0, 13035.0], [830.0, 13038.0], [816.0, 13222.0], [818.0, 13195.0], [817.0, 13205.0], [820.0, 13159.0], [819.0, 13163.0], [828.0, 13036.0], [827.0, 13046.0], [826.0, 13068.0], [824.0, 13111.0], [807.0, 13359.0], [806.0, 13362.0], [805.0, 13397.0], [804.0, 13407.0], [803.0, 13413.0], [802.0, 13472.0], [801.0, 13477.0], [800.0, 13489.0], [815.0, 13240.0], [814.0, 13267.0], [813.0, 13313.0], [812.0, 13289.0], [811.0, 13300.0], [810.0, 13345.0], [809.0, 13353.0], [808.0, 13350.0], [822.0, 13129.0], [821.0, 13149.0], [860.0, 12609.0], [863.0, 12574.0], [848.0, 12787.0], [851.0, 12771.0], [849.0, 12761.0], [853.0, 12706.0], [852.0, 12732.0], [862.0, 12577.0], [861.0, 12598.0], [859.0, 12630.0], [858.0, 12634.0], [857.0, 12645.0], [856.0, 12657.0], [847.0, 12790.0], [833.0, 13010.0], [832.0, 13009.5], [835.0, 12971.0], [834.0, 12979.0], [837.0, 12941.0], [836.0, 12945.0], [839.0, 12937.0], [838.0, 12940.0], [846.0, 12788.0], [845.0, 12825.0], [844.0, 12844.0], [843.0, 12860.0], [842.0, 12877.0], [841.0, 12913.0], [840.0, 12926.0], [855.0, 12662.0], [854.0, 12690.0], [889.0, 12149.0], [893.0, 12080.0], [895.0, 12079.5], [881.0, 12279.0], [880.0, 12298.0], [883.0, 12262.0], [882.0, 12271.0], [885.0, 12225.0], [884.0, 12240.0], [892.0, 12114.0], [891.0, 12131.0], [890.0, 12144.0], [888.0, 12167.0], [871.0, 12437.0], [870.0, 12456.0], [869.0, 12460.0], [868.0, 12473.0], [867.0, 12581.0], [866.0, 12513.0], [865.0, 12516.0], [864.0, 12571.0], [879.0, 12150.0], [878.0, 12342.0], [877.0, 12360.0], [876.0, 12376.0], [875.0, 12389.0], [874.0, 12406.0], [873.0, 12421.0], [887.0, 12023.0], [886.0, 12184.0], [924.0, 11588.0], [927.0, 11625.0], [913.0, 11752.0], [912.0, 11800.0], [915.0, 11742.0], [914.0, 11591.0], [917.0, 11702.0], [916.0, 11727.0], [926.0, 11568.0], [925.0, 11572.0], [923.0, 11596.0], [922.0, 11620.0], [921.0, 11661.0], [920.0, 11664.0], [911.0, 11806.0], [897.0, 12032.0], [896.0, 12062.0], [899.0, 11964.0], [898.0, 12021.0], [901.0, 11939.0], [900.0, 11942.0], [903.0, 11939.0], [902.0, 11934.0], [910.0, 11837.0], [909.0, 11860.0], [908.0, 11877.0], [907.0, 11885.0], [906.0, 11889.0], [905.0, 11893.0], [904.0, 11894.0], [919.0, 11684.0], [918.0, 11708.0], [956.0, 11507.0], [959.0, 11435.0], [945.0, 11512.0], [947.0, 11503.0], [946.0, 11542.0], [949.0, 11589.0], [948.0, 11680.0], [958.0, 11453.0], [957.0, 11334.0], [955.0, 11522.0], [954.0, 11539.0], [953.0, 11592.0], [952.0, 11445.0], [943.0, 11705.0], [929.0, 11549.0], [928.0, 11547.0], [932.0, 11684.0], [931.0, 11668.5], [935.0, 11574.0], [934.0, 11572.0], [942.0, 11518.0], [941.0, 11552.0], [940.0, 11547.0], [939.0, 11596.0], [938.0, 11655.0], [937.0, 11599.0], [936.0, 11608.0], [951.0, 11353.0], [950.0, 11664.0], [988.0, 10663.0], [991.0, 10595.0], [977.0, 11034.0], [976.0, 11061.0], [979.0, 10982.0], [978.0, 11002.0], [981.0, 10951.0], [980.0, 10977.0], [990.0, 10735.0], [989.0, 10734.0], [987.0, 10819.0], [986.0, 10696.0], [985.0, 10865.0], [984.0, 10936.0], [975.0, 11104.0], [961.0, 11367.0], [960.0, 11447.0], [963.0, 11359.0], [962.0, 11411.0], [965.0, 11197.0], [964.0, 11317.0], [967.0, 11293.0], [966.0, 11309.0], [974.0, 11108.0], [973.0, 11113.0], [972.0, 11155.0], [971.0, 11171.0], [970.0, 11211.0], [969.0, 11274.0], [968.0, 11278.0], [983.0, 10925.0], [982.0, 10941.0], [1000.0, 9659.0], [999.0, 10343.0], [998.0, 10429.0], [997.0, 10446.0], [996.0, 10457.0], [995.0, 10594.0], [994.0, 10635.0], [993.0, 10675.0], [992.0, 10684.0], [1.0, 44183.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.53600000000057, 21909.172000000024]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1007.0, "minX": 1.62248718E12, "maxY": 215146.98333333334, "series": [{"data": [[1.62248718E12, 215146.98333333334], [1.62248724E12, 66510.58333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62248718E12, 2793.0], [1.62248724E12, 1007.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248724E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16123.882993197294, "minX": 1.62248718E12, "maxY": 37955.162264150946, "series": [{"data": [[1.62248718E12, 16123.882993197294], [1.62248724E12, 37955.162264150946]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248724E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15840.636734693873, "minX": 1.62248718E12, "maxY": 37673.596226415124, "series": [{"data": [[1.62248718E12, 15840.636734693873], [1.62248724E12, 37673.596226415124]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248724E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5768.407547169809, "minX": 1.62248718E12, "maxY": 11430.685714285722, "series": [{"data": [[1.62248718E12, 11430.685714285722], [1.62248724E12, 5768.407547169809]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248724E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14519.0, "minX": 1.62248718E12, "maxY": 44183.0, "series": [{"data": [[1.62248718E12, 29432.0], [1.62248724E12, 44183.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62248718E12, 28974.7], [1.62248724E12, 43012.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62248718E12, 29432.0], [1.62248724E12, 44060.02]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62248718E12, 29258.85], [1.62248724E12, 43646.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62248718E12, 14519.0], [1.62248724E12, 29662.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62248718E12, 23599.5], [1.62248724E12, 38839.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248724E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10429.0, "minX": 1.0, "maxY": 43731.5, "series": [{"data": [[8.0, 23856.5], [2.0, 26025.5], [33.0, 42770.0], [9.0, 23143.0], [11.0, 36897.0], [12.0, 36081.0], [13.0, 31055.0], [14.0, 33127.5], [61.0, 19019.5], [15.0, 35102.5], [63.0, 14778.0], [62.0, 19979.0], [65.0, 14519.0], [66.0, 18095.0], [1.0, 26516.0], [16.0, 43731.5], [70.0, 15736.0], [19.0, 33983.0], [5.0, 28120.0], [20.0, 38996.0], [21.0, 40909.0], [23.0, 42078.0], [27.0, 39994.0], [7.0, 29188.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 12868.5], [65.0, 13826.0], [66.0, 17489.0], [2.0, 21147.5], [70.0, 15626.0], [77.0, 11752.0], [5.0, 10429.0], [44.0, 11110.5], [61.0, 18476.0], [63.0, 14737.0], [62.0, 19379.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 77.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10146.0, "minX": 1.0, "maxY": 43442.5, "series": [{"data": [[8.0, 23574.5], [2.0, 25742.0], [33.0, 42481.0], [9.0, 22866.0], [11.0, 36625.0], [12.0, 35798.5], [13.0, 30779.0], [14.0, 32847.0], [61.0, 18742.0], [15.0, 34825.5], [63.0, 14495.0], [62.0, 19701.5], [65.0, 14242.0], [66.0, 17812.0], [1.0, 26237.0], [16.0, 43442.5], [70.0, 15453.0], [19.0, 33706.0], [5.0, 27839.0], [20.0, 38717.5], [21.0, 40630.0], [23.0, 41800.0], [27.0, 39702.0], [7.0, 28903.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 12580.5], [65.0, 13543.0], [66.0, 17211.0], [2.0, 20866.5], [70.0, 15341.0], [77.0, 11476.0], [5.0, 10146.0], [44.0, 10831.5], [61.0, 18199.0], [63.0, 14451.0], [62.0, 19102.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 77.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62248718E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62248718E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248718E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.62248718E12, "maxY": 11.416666666666666, "series": [{"data": [[1.62248718E12, 0.8333333333333334], [1.62248724E12, 4.416666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62248718E12, 11.416666666666666]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248724E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.62248718E12, "maxY": 11.416666666666666, "series": [{"data": [[1.62248718E12, 11.416666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.62248718E12, 0.8333333333333334], [1.62248724E12, 4.416666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248724E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.62248718E12, "maxY": 11.416666666666666, "series": [{"data": [[1.62248718E12, 0.8333333333333334], [1.62248724E12, 4.416666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62248718E12, 11.416666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248724E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

