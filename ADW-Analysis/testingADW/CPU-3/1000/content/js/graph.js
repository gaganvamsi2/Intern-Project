/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9113.0, "minX": 0.0, "maxY": 56776.0, "series": [{"data": [[0.0, 9113.0], [0.1, 9136.0], [0.2, 9157.0], [0.3, 9157.0], [0.4, 9249.0], [0.5, 9273.0], [0.6, 9275.0], [0.7, 9290.0], [0.8, 9314.0], [0.9, 9337.0], [1.0, 9338.0], [1.1, 9352.0], [1.2, 9358.0], [1.3, 9359.0], [1.4, 9359.0], [1.5, 9389.0], [1.6, 9397.0], [1.7, 9516.0], [1.8, 9517.0], [1.9, 9517.0], [2.0, 9518.0], [2.1, 9519.0], [2.2, 9521.0], [2.3, 9521.0], [2.4, 9522.0], [2.5, 9523.0], [2.6, 9526.0], [2.7, 9530.0], [2.8, 9532.0], [2.9, 9534.0], [3.0, 9549.0], [3.1, 9563.0], [3.2, 9565.0], [3.3, 9573.0], [3.4, 9579.0], [3.5, 9593.0], [3.6, 9594.0], [3.7, 9598.0], [3.8, 9600.0], [3.9, 9626.0], [4.0, 9639.0], [4.1, 9651.0], [4.2, 9659.0], [4.3, 9660.0], [4.4, 9678.0], [4.5, 9680.0], [4.6, 9728.0], [4.7, 9772.0], [4.8, 9790.0], [4.9, 9791.0], [5.0, 9794.0], [5.1, 9796.0], [5.2, 9809.0], [5.3, 9830.0], [5.4, 9832.0], [5.5, 9841.0], [5.6, 9841.0], [5.7, 9843.0], [5.8, 9844.0], [5.9, 9865.0], [6.0, 9881.0], [6.1, 9890.0], [6.2, 9901.0], [6.3, 9906.0], [6.4, 9917.0], [6.5, 9928.0], [6.6, 9929.0], [6.7, 9929.0], [6.8, 9935.0], [6.9, 9959.0], [7.0, 9964.0], [7.1, 9984.0], [7.2, 9994.0], [7.3, 10018.0], [7.4, 10024.0], [7.5, 10070.0], [7.6, 10079.0], [7.7, 10081.0], [7.8, 10086.0], [7.9, 10087.0], [8.0, 10088.0], [8.1, 10090.0], [8.2, 10111.0], [8.3, 10113.0], [8.4, 10135.0], [8.5, 10141.0], [8.6, 10147.0], [8.7, 10165.0], [8.8, 10172.0], [8.9, 10235.0], [9.0, 10236.0], [9.1, 10241.0], [9.2, 10257.0], [9.3, 10257.0], [9.4, 10258.0], [9.5, 10270.0], [9.6, 10282.0], [9.7, 10282.0], [9.8, 10328.0], [9.9, 10330.0], [10.0, 10330.0], [10.1, 10334.0], [10.2, 10355.0], [10.3, 10360.0], [10.4, 10366.0], [10.5, 10379.0], [10.6, 10408.0], [10.7, 10418.0], [10.8, 10428.0], [10.9, 10430.0], [11.0, 10441.0], [11.1, 10467.0], [11.2, 10484.0], [11.3, 10487.0], [11.4, 10518.0], [11.5, 10523.0], [11.6, 10525.0], [11.7, 10526.0], [11.8, 10527.0], [11.9, 10551.0], [12.0, 10567.0], [12.1, 10581.0], [12.2, 10585.0], [12.3, 10594.0], [12.4, 10617.0], [12.5, 10622.0], [12.6, 10630.0], [12.7, 10645.0], [12.8, 10646.0], [12.9, 10646.0], [13.0, 10664.0], [13.1, 10677.0], [13.2, 10683.0], [13.3, 10715.0], [13.4, 10722.0], [13.5, 10740.0], [13.6, 10742.0], [13.7, 10755.0], [13.8, 10781.0], [13.9, 10783.0], [14.0, 10792.0], [14.1, 10798.0], [14.2, 10818.0], [14.3, 10822.0], [14.4, 10830.0], [14.5, 10838.0], [14.6, 10841.0], [14.7, 10841.0], [14.8, 10847.0], [14.9, 10860.0], [15.0, 10869.0], [15.1, 10884.0], [15.2, 10918.0], [15.3, 10919.0], [15.4, 10955.0], [15.5, 10958.0], [15.6, 10964.0], [15.7, 10964.0], [15.8, 10976.0], [15.9, 10988.0], [16.0, 10988.0], [16.1, 11007.0], [16.2, 11013.0], [16.3, 11014.0], [16.4, 11017.0], [16.5, 11017.0], [16.6, 11053.0], [16.7, 11064.0], [16.8, 11066.0], [16.9, 11077.0], [17.0, 11079.0], [17.1, 11093.0], [17.2, 11112.0], [17.3, 11126.0], [17.4, 11127.0], [17.5, 11134.0], [17.6, 11149.0], [17.7, 11165.0], [17.8, 11170.0], [17.9, 11172.0], [18.0, 11194.0], [18.1, 11199.0], [18.2, 11218.0], [18.3, 11223.0], [18.4, 11228.0], [18.5, 11266.0], [18.6, 11269.0], [18.7, 11274.0], [18.8, 11299.0], [18.9, 11303.0], [19.0, 11304.0], [19.1, 11304.0], [19.2, 11327.0], [19.3, 11343.0], [19.4, 11343.0], [19.5, 11346.0], [19.6, 11348.0], [19.7, 11363.0], [19.8, 11373.0], [19.9, 11375.0], [20.0, 11382.0], [20.1, 11382.0], [20.2, 11391.0], [20.3, 11393.0], [20.4, 11396.0], [20.5, 11428.0], [20.6, 11441.0], [20.7, 11467.0], [20.8, 11470.0], [20.9, 11475.0], [21.0, 11477.0], [21.1, 11487.0], [21.2, 11496.0], [21.3, 11504.0], [21.4, 11517.0], [21.5, 11519.0], [21.6, 11546.0], [21.7, 11546.0], [21.8, 11600.0], [21.9, 11604.0], [22.0, 11620.0], [22.1, 11628.0], [22.2, 11636.0], [22.3, 11643.0], [22.4, 11646.0], [22.5, 11653.0], [22.6, 11666.0], [22.7, 11679.0], [22.8, 11697.0], [22.9, 11728.0], [23.0, 11735.0], [23.1, 11738.0], [23.2, 11745.0], [23.3, 11753.0], [23.4, 11754.0], [23.5, 11764.0], [23.6, 11773.0], [23.7, 11787.0], [23.8, 11794.0], [23.9, 11794.0], [24.0, 11796.0], [24.1, 11810.0], [24.2, 11815.0], [24.3, 11826.0], [24.4, 11832.0], [24.5, 11857.0], [24.6, 11879.0], [24.7, 11880.0], [24.8, 11889.0], [24.9, 11891.0], [25.0, 11893.0], [25.1, 11896.0], [25.2, 11907.0], [25.3, 11917.0], [25.4, 11932.0], [25.5, 11958.0], [25.6, 11961.0], [25.7, 11967.0], [25.8, 11972.0], [25.9, 11989.0], [26.0, 11992.0], [26.1, 11993.0], [26.2, 12002.0], [26.3, 12016.0], [26.4, 12034.0], [26.5, 12050.0], [26.6, 12060.0], [26.7, 12061.0], [26.8, 12078.0], [26.9, 12091.0], [27.0, 12100.0], [27.1, 12115.0], [27.2, 12130.0], [27.3, 12158.0], [27.4, 12430.0], [27.5, 12459.0], [27.6, 12487.0], [27.7, 12517.0], [27.8, 12558.0], [27.9, 12565.0], [28.0, 12571.0], [28.1, 12572.0], [28.2, 12587.0], [28.3, 12595.0], [28.4, 12596.0], [28.5, 12602.0], [28.6, 12650.0], [28.7, 12665.0], [28.8, 12682.0], [28.9, 12685.0], [29.0, 12687.0], [29.1, 12703.0], [29.2, 12710.0], [29.3, 12712.0], [29.4, 12718.0], [29.5, 12738.0], [29.6, 12750.0], [29.7, 12755.0], [29.8, 12772.0], [29.9, 12775.0], [30.0, 12787.0], [30.1, 12791.0], [30.2, 12795.0], [30.3, 12797.0], [30.4, 12804.0], [30.5, 12840.0], [30.6, 12852.0], [30.7, 12862.0], [30.8, 12883.0], [30.9, 12894.0], [31.0, 12924.0], [31.1, 12927.0], [31.2, 12929.0], [31.3, 12942.0], [31.4, 12950.0], [31.5, 12968.0], [31.6, 13010.0], [31.7, 13021.0], [31.8, 13022.0], [31.9, 13026.0], [32.0, 13035.0], [32.1, 13037.0], [32.2, 13043.0], [32.3, 13045.0], [32.4, 13062.0], [32.5, 13078.0], [32.6, 13085.0], [32.7, 13099.0], [32.8, 13110.0], [32.9, 13127.0], [33.0, 13148.0], [33.1, 13149.0], [33.2, 13159.0], [33.3, 13160.0], [33.4, 13171.0], [33.5, 13248.0], [33.6, 13300.0], [33.7, 13313.0], [33.8, 13320.0], [33.9, 13321.0], [34.0, 13326.0], [34.1, 13327.0], [34.2, 13329.0], [34.3, 13329.0], [34.4, 13335.0], [34.5, 13337.0], [34.6, 13350.0], [34.7, 13355.0], [34.8, 13357.0], [34.9, 13358.0], [35.0, 13358.0], [35.1, 13388.0], [35.2, 13390.0], [35.3, 13392.0], [35.4, 13401.0], [35.5, 13408.0], [35.6, 13410.0], [35.7, 13420.0], [35.8, 13426.0], [35.9, 13446.0], [36.0, 13460.0], [36.1, 13576.0], [36.2, 13582.0], [36.3, 13582.0], [36.4, 13594.0], [36.5, 13595.0], [36.6, 13609.0], [36.7, 13612.0], [36.8, 13615.0], [36.9, 13617.0], [37.0, 13617.0], [37.1, 13620.0], [37.2, 13625.0], [37.3, 13626.0], [37.4, 13633.0], [37.5, 13640.0], [37.6, 13647.0], [37.7, 13664.0], [37.8, 13665.0], [37.9, 13679.0], [38.0, 13687.0], [38.1, 13699.0], [38.2, 13715.0], [38.3, 13724.0], [38.4, 13727.0], [38.5, 13733.0], [38.6, 13743.0], [38.7, 13755.0], [38.8, 13758.0], [38.9, 13761.0], [39.0, 13763.0], [39.1, 13803.0], [39.2, 13809.0], [39.3, 13830.0], [39.4, 13830.0], [39.5, 13843.0], [39.6, 13853.0], [39.7, 13860.0], [39.8, 13864.0], [39.9, 13870.0], [40.0, 13874.0], [40.1, 13874.0], [40.2, 13895.0], [40.3, 13896.0], [40.4, 13901.0], [40.5, 13902.0], [40.6, 13902.0], [40.7, 13920.0], [40.8, 13921.0], [40.9, 13924.0], [41.0, 13930.0], [41.1, 13934.0], [41.2, 13939.0], [41.3, 13940.0], [41.4, 13942.0], [41.5, 13949.0], [41.6, 13951.0], [41.7, 13952.0], [41.8, 13954.0], [41.9, 13958.0], [42.0, 13961.0], [42.1, 13963.0], [42.2, 13971.0], [42.3, 13980.0], [42.4, 13984.0], [42.5, 13987.0], [42.6, 13991.0], [42.7, 13994.0], [42.8, 13994.0], [42.9, 13995.0], [43.0, 14017.0], [43.1, 14017.0], [43.2, 14028.0], [43.3, 14048.0], [43.4, 14053.0], [43.5, 14055.0], [43.6, 14060.0], [43.7, 14075.0], [43.8, 14076.0], [43.9, 14079.0], [44.0, 14081.0], [44.1, 14097.0], [44.2, 14103.0], [44.3, 14109.0], [44.4, 14110.0], [44.5, 14117.0], [44.6, 14122.0], [44.7, 14133.0], [44.8, 14140.0], [44.9, 14144.0], [45.0, 14147.0], [45.1, 14150.0], [45.2, 14151.0], [45.3, 14158.0], [45.4, 14167.0], [45.5, 14172.0], [45.6, 14172.0], [45.7, 14187.0], [45.8, 14197.0], [45.9, 14221.0], [46.0, 14221.0], [46.1, 14224.0], [46.2, 14234.0], [46.3, 14258.0], [46.4, 14263.0], [46.5, 14266.0], [46.6, 14271.0], [46.7, 14287.0], [46.8, 14298.0], [46.9, 14316.0], [47.0, 14321.0], [47.1, 14330.0], [47.2, 14331.0], [47.3, 14353.0], [47.4, 14357.0], [47.5, 14381.0], [47.6, 14388.0], [47.7, 14430.0], [47.8, 14452.0], [47.9, 14473.0], [48.0, 14481.0], [48.1, 14481.0], [48.2, 14494.0], [48.3, 14500.0], [48.4, 14507.0], [48.5, 14525.0], [48.6, 14531.0], [48.7, 14532.0], [48.8, 14545.0], [48.9, 14559.0], [49.0, 14565.0], [49.1, 14574.0], [49.2, 14593.0], [49.3, 14613.0], [49.4, 14628.0], [49.5, 14652.0], [49.6, 14659.0], [49.7, 14688.0], [49.8, 14688.0], [49.9, 14691.0], [50.0, 14697.0], [50.1, 14697.0], [50.2, 14705.0], [50.3, 14716.0], [50.4, 14724.0], [50.5, 14741.0], [50.6, 14747.0], [50.7, 14761.0], [50.8, 14770.0], [50.9, 14788.0], [51.0, 14816.0], [51.1, 14827.0], [51.2, 14830.0], [51.3, 14845.0], [51.4, 14858.0], [51.5, 14865.0], [51.6, 14870.0], [51.7, 14874.0], [51.8, 14897.0], [51.9, 14898.0], [52.0, 14913.0], [52.1, 14921.0], [52.2, 14925.0], [52.3, 14926.0], [52.4, 14930.0], [52.5, 14934.0], [52.6, 14976.0], [52.7, 14986.0], [52.8, 14987.0], [52.9, 14987.0], [53.0, 14992.0], [53.1, 14995.0], [53.2, 15024.0], [53.3, 15029.0], [53.4, 15033.0], [53.5, 15041.0], [53.6, 15044.0], [53.7, 15069.0], [53.8, 15072.0], [53.9, 15102.0], [54.0, 15103.0], [54.1, 15111.0], [54.2, 15118.0], [54.3, 15122.0], [54.4, 15149.0], [54.5, 15182.0], [54.6, 15187.0], [54.7, 15197.0], [54.8, 15197.0], [54.9, 15200.0], [55.0, 15208.0], [55.1, 15213.0], [55.2, 15238.0], [55.3, 15244.0], [55.4, 15245.0], [55.5, 15252.0], [55.6, 15269.0], [55.7, 15301.0], [55.8, 15308.0], [55.9, 15309.0], [56.0, 15310.0], [56.1, 15344.0], [56.2, 15349.0], [56.3, 15367.0], [56.4, 15388.0], [56.5, 15401.0], [56.6, 15416.0], [56.7, 15420.0], [56.8, 15452.0], [56.9, 15458.0], [57.0, 15470.0], [57.1, 15474.0], [57.2, 15484.0], [57.3, 15491.0], [57.4, 15502.0], [57.5, 15524.0], [57.6, 15540.0], [57.7, 15550.0], [57.8, 15557.0], [57.9, 15573.0], [58.0, 15579.0], [58.1, 15581.0], [58.2, 15603.0], [58.3, 15609.0], [58.4, 15615.0], [58.5, 15624.0], [58.6, 15626.0], [58.7, 15676.0], [58.8, 15683.0], [58.9, 15684.0], [59.0, 15686.0], [59.1, 15689.0], [59.2, 15702.0], [59.3, 15713.0], [59.4, 15763.0], [59.5, 15770.0], [59.6, 15774.0], [59.7, 15774.0], [59.8, 15787.0], [59.9, 15807.0], [60.0, 15815.0], [60.1, 15822.0], [60.2, 15823.0], [60.3, 15847.0], [60.4, 15868.0], [60.5, 15886.0], [60.6, 15889.0], [60.7, 15891.0], [60.8, 15891.0], [60.9, 15916.0], [61.0, 15941.0], [61.1, 15941.0], [61.2, 15943.0], [61.3, 15973.0], [61.4, 15977.0], [61.5, 15978.0], [61.6, 15983.0], [61.7, 15983.0], [61.8, 15998.0], [61.9, 16013.0], [62.0, 16034.0], [62.1, 16039.0], [62.2, 16040.0], [62.3, 16050.0], [62.4, 16056.0], [62.5, 16058.0], [62.6, 16076.0], [62.7, 16097.0], [62.8, 16108.0], [62.9, 16115.0], [63.0, 16119.0], [63.1, 16153.0], [63.2, 16162.0], [63.3, 16163.0], [63.4, 16178.0], [63.5, 16178.0], [63.6, 16187.0], [63.7, 16191.0], [63.8, 16198.0], [63.9, 16217.0], [64.0, 16222.0], [64.1, 16243.0], [64.2, 16260.0], [64.3, 16267.0], [64.4, 16268.0], [64.5, 16277.0], [64.6, 16292.0], [64.7, 16311.0], [64.8, 16316.0], [64.9, 16322.0], [65.0, 16326.0], [65.1, 16336.0], [65.2, 16363.0], [65.3, 16365.0], [65.4, 16388.0], [65.5, 16390.0], [65.6, 16407.0], [65.7, 16408.0], [65.8, 16430.0], [65.9, 16451.0], [66.0, 16474.0], [66.1, 16479.0], [66.2, 16483.0], [66.3, 16486.0], [66.4, 16500.0], [66.5, 16525.0], [66.6, 16530.0], [66.7, 16533.0], [66.8, 16553.0], [66.9, 16568.0], [67.0, 16569.0], [67.1, 16580.0], [67.2, 16583.0], [67.3, 16599.0], [67.4, 16603.0], [67.5, 16607.0], [67.6, 16626.0], [67.7, 16631.0], [67.8, 16637.0], [67.9, 16659.0], [68.0, 16664.0], [68.1, 16667.0], [68.2, 16668.0], [68.3, 16672.0], [68.4, 16678.0], [68.5, 16701.0], [68.6, 16702.0], [68.7, 16710.0], [68.8, 16728.0], [68.9, 16741.0], [69.0, 16764.0], [69.1, 16774.0], [69.2, 16782.0], [69.3, 16787.0], [69.4, 16790.0], [69.5, 16814.0], [69.6, 16815.0], [69.7, 16815.0], [69.8, 16825.0], [69.9, 16835.0], [70.0, 16872.0], [70.1, 25219.0], [70.2, 25426.0], [70.3, 27204.0], [70.4, 27499.0], [70.5, 29480.0], [70.6, 35820.0], [70.7, 36017.0], [70.8, 36122.0], [70.9, 36222.0], [71.0, 36412.0], [71.1, 36526.0], [71.2, 36542.0], [71.3, 36547.0], [71.4, 36554.0], [71.5, 36745.0], [71.6, 36837.0], [71.7, 36839.0], [71.8, 36844.0], [71.9, 36944.0], [72.0, 36955.0], [72.1, 37041.0], [72.2, 37142.0], [72.3, 37145.0], [72.4, 37364.0], [72.5, 37571.0], [72.6, 37573.0], [72.7, 37789.0], [72.8, 37813.0], [72.9, 38101.0], [73.0, 38103.0], [73.1, 38232.0], [73.2, 38394.0], [73.3, 38604.0], [73.4, 38621.0], [73.5, 38815.0], [73.6, 39129.0], [73.7, 39220.0], [73.8, 39541.0], [73.9, 39660.0], [74.0, 39725.0], [74.1, 39820.0], [74.2, 39939.0], [74.3, 40053.0], [74.4, 40267.0], [74.5, 40579.0], [74.6, 40684.0], [74.7, 40796.0], [74.8, 41205.0], [74.9, 41400.0], [75.0, 41545.0], [75.1, 41594.0], [75.2, 41924.0], [75.3, 41927.0], [75.4, 42150.0], [75.5, 42317.0], [75.6, 42345.0], [75.7, 42357.0], [75.8, 42563.0], [75.9, 42766.0], [76.0, 42861.0], [76.1, 42864.0], [76.2, 43082.0], [76.3, 43103.0], [76.4, 43187.0], [76.5, 43366.0], [76.6, 43370.0], [76.7, 43376.0], [76.8, 43487.0], [76.9, 43687.0], [77.0, 43690.0], [77.1, 43873.0], [77.2, 43977.0], [77.3, 44078.0], [77.4, 44316.0], [77.5, 44323.0], [77.6, 44397.0], [77.7, 44428.0], [77.8, 44538.0], [77.9, 44638.0], [78.0, 44717.0], [78.1, 44721.0], [78.2, 44961.0], [78.3, 45019.0], [78.4, 45121.0], [78.5, 45236.0], [78.6, 45324.0], [78.7, 45447.0], [78.8, 45653.0], [78.9, 45728.0], [79.0, 46042.0], [79.1, 46242.0], [79.2, 46486.0], [79.3, 46624.0], [79.4, 46631.0], [79.5, 46673.0], [79.6, 47223.0], [79.7, 47418.0], [79.8, 47445.0], [79.9, 47639.0], [80.0, 47826.0], [80.1, 47845.0], [80.2, 48164.0], [80.3, 48364.0], [80.4, 48365.0], [80.5, 48473.0], [80.6, 48479.0], [80.7, 48547.0], [80.8, 48574.0], [80.9, 48589.0], [81.0, 48682.0], [81.1, 48806.0], [81.2, 48808.0], [81.3, 48904.0], [81.4, 48913.0], [81.5, 48928.0], [81.6, 49093.0], [81.7, 49227.0], [81.8, 49267.0], [81.9, 49292.0], [82.0, 49344.0], [82.1, 49345.0], [82.2, 49425.0], [82.3, 49427.0], [82.4, 49473.0], [82.5, 49666.0], [82.6, 49673.0], [82.7, 49740.0], [82.8, 49752.0], [82.9, 49799.0], [83.0, 49804.0], [83.1, 49808.0], [83.2, 49853.0], [83.3, 49869.0], [83.4, 50027.0], [83.5, 50170.0], [83.6, 50365.0], [83.7, 50368.0], [83.8, 50381.0], [83.9, 50386.0], [84.0, 50453.0], [84.1, 50796.0], [84.2, 50838.0], [84.3, 50839.0], [84.4, 50911.0], [84.5, 51022.0], [84.6, 51110.0], [84.7, 51123.0], [84.8, 51138.0], [84.9, 51233.0], [85.0, 51401.0], [85.1, 51408.0], [85.2, 51429.0], [85.3, 51503.0], [85.4, 51528.0], [85.5, 51535.0], [85.6, 51634.0], [85.7, 51729.0], [85.8, 51731.0], [85.9, 51737.0], [86.0, 51744.0], [86.1, 51831.0], [86.2, 51846.0], [86.3, 51849.0], [86.4, 51928.0], [86.5, 51936.0], [86.6, 51955.0], [86.7, 52023.0], [86.8, 52049.0], [86.9, 52065.0], [87.0, 52075.0], [87.1, 52092.0], [87.2, 52118.0], [87.3, 52120.0], [87.4, 52138.0], [87.5, 52145.0], [87.6, 52147.0], [87.7, 52147.0], [87.8, 52156.0], [87.9, 52244.0], [88.0, 52259.0], [88.1, 52260.0], [88.2, 52271.0], [88.3, 52272.0], [88.4, 52321.0], [88.5, 52324.0], [88.6, 52426.0], [88.7, 52433.0], [88.8, 52529.0], [88.9, 52645.0], [89.0, 52743.0], [89.1, 52755.0], [89.2, 52837.0], [89.3, 52951.0], [89.4, 52952.0], [89.5, 53169.0], [89.6, 53170.0], [89.7, 53345.0], [89.8, 53353.0], [89.9, 53360.0], [90.0, 53391.0], [90.1, 53446.0], [90.2, 53450.0], [90.3, 53679.0], [90.4, 53775.0], [90.5, 53872.0], [90.6, 53991.0], [90.7, 54087.0], [90.8, 54087.0], [90.9, 54165.0], [91.0, 54175.0], [91.1, 54177.0], [91.2, 54181.0], [91.3, 54182.0], [91.4, 54196.0], [91.5, 54200.0], [91.6, 54202.0], [91.7, 54205.0], [91.8, 54281.0], [91.9, 54303.0], [92.0, 54303.0], [92.1, 54323.0], [92.2, 54339.0], [92.3, 54455.0], [92.4, 54456.0], [92.5, 54458.0], [92.6, 54458.0], [92.7, 54471.0], [92.8, 54505.0], [92.9, 54609.0], [93.0, 54611.0], [93.1, 54621.0], [93.2, 54624.0], [93.3, 54637.0], [93.4, 54710.0], [93.5, 54830.0], [93.6, 54836.0], [93.7, 54874.0], [93.8, 54881.0], [93.9, 54912.0], [94.0, 54912.0], [94.1, 54918.0], [94.2, 54930.0], [94.3, 54933.0], [94.4, 54934.0], [94.5, 54951.0], [94.6, 54958.0], [94.7, 55037.0], [94.8, 55041.0], [94.9, 55050.0], [95.0, 55054.0], [95.1, 55115.0], [95.2, 55117.0], [95.3, 55140.0], [95.4, 55201.0], [95.5, 55210.0], [95.6, 55226.0], [95.7, 55241.0], [95.8, 55317.0], [95.9, 55332.0], [96.0, 55332.0], [96.1, 55414.0], [96.2, 55419.0], [96.3, 55433.0], [96.4, 55523.0], [96.5, 55526.0], [96.6, 55566.0], [96.7, 55601.0], [96.8, 55625.0], [96.9, 55630.0], [97.0, 55708.0], [97.1, 55808.0], [97.2, 55815.0], [97.3, 56007.0], [97.4, 56032.0], [97.5, 56242.0], [97.6, 56252.0], [97.7, 56255.0], [97.8, 56264.0], [97.9, 56268.0], [98.0, 56348.0], [98.1, 56354.0], [98.2, 56367.0], [98.3, 56369.0], [98.4, 56370.0], [98.5, 56386.0], [98.6, 56436.0], [98.7, 56455.0], [98.8, 56527.0], [98.9, 56538.0], [99.0, 56543.0], [99.1, 56548.0], [99.2, 56549.0], [99.3, 56639.0], [99.4, 56654.0], [99.5, 56656.0], [99.6, 56657.0], [99.7, 56660.0], [99.8, 56668.0], [99.9, 56776.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 9100.0, "maxY": 26.0, "series": [{"data": [[36100.0, 1.0], [36500.0, 4.0], [36900.0, 2.0], [37300.0, 1.0], [37700.0, 1.0], [38100.0, 2.0], [39700.0, 1.0], [40500.0, 1.0], [42100.0, 1.0], [42500.0, 1.0], [43300.0, 3.0], [44500.0, 1.0], [44900.0, 1.0], [45300.0, 1.0], [45700.0, 1.0], [48100.0, 1.0], [48500.0, 3.0], [48900.0, 3.0], [49300.0, 2.0], [49700.0, 3.0], [50100.0, 1.0], [50900.0, 1.0], [51700.0, 4.0], [52100.0, 7.0], [52500.0, 1.0], [52900.0, 2.0], [53300.0, 4.0], [53700.0, 1.0], [54100.0, 6.0], [54500.0, 1.0], [54900.0, 8.0], [55300.0, 3.0], [55700.0, 1.0], [56500.0, 5.0], [9100.0, 4.0], [9200.0, 4.0], [9500.0, 21.0], [9300.0, 8.0], [9600.0, 9.0], [9700.0, 6.0], [9800.0, 10.0], [9900.0, 11.0], [10000.0, 9.0], [10100.0, 7.0], [10200.0, 9.0], [10300.0, 8.0], [10400.0, 8.0], [10500.0, 10.0], [10600.0, 9.0], [10700.0, 9.0], [10800.0, 10.0], [10900.0, 9.0], [11000.0, 11.0], [11100.0, 10.0], [11200.0, 7.0], [11300.0, 15.0], [11400.0, 8.0], [11500.0, 5.0], [11600.0, 11.0], [11700.0, 12.0], [11800.0, 11.0], [11900.0, 10.0], [12000.0, 8.0], [12100.0, 4.0], [12400.0, 3.0], [12500.0, 8.0], [12600.0, 6.0], [12700.0, 13.0], [12800.0, 6.0], [12900.0, 6.0], [13000.0, 12.0], [13100.0, 7.0], [13300.0, 18.0], [13200.0, 1.0], [13400.0, 7.0], [13500.0, 5.0], [13600.0, 16.0], [13700.0, 9.0], [13800.0, 13.0], [13900.0, 26.0], [14000.0, 12.0], [14100.0, 17.0], [14200.0, 10.0], [14300.0, 8.0], [14400.0, 6.0], [14500.0, 10.0], [14600.0, 9.0], [14700.0, 8.0], [14800.0, 10.0], [14900.0, 12.0], [15000.0, 7.0], [15100.0, 10.0], [15200.0, 8.0], [15300.0, 8.0], [15400.0, 9.0], [15500.0, 8.0], [15600.0, 10.0], [15700.0, 7.0], [15800.0, 10.0], [15900.0, 10.0], [16000.0, 9.0], [16100.0, 11.0], [16200.0, 8.0], [16300.0, 9.0], [16400.0, 8.0], [16600.0, 11.0], [16800.0, 6.0], [25200.0, 1.0], [25400.0, 1.0], [27200.0, 1.0], [27400.0, 1.0], [29400.0, 1.0], [36000.0, 1.0], [36400.0, 1.0], [36800.0, 3.0], [38800.0, 1.0], [39200.0, 1.0], [39600.0, 1.0], [40000.0, 1.0], [41200.0, 1.0], [42800.0, 2.0], [43600.0, 2.0], [44000.0, 1.0], [44400.0, 1.0], [45200.0, 1.0], [45600.0, 1.0], [46000.0, 1.0], [46400.0, 1.0], [47200.0, 1.0], [47600.0, 1.0], [48400.0, 2.0], [48800.0, 2.0], [49200.0, 3.0], [49600.0, 2.0], [50000.0, 1.0], [50400.0, 1.0], [50800.0, 2.0], [51200.0, 1.0], [51600.0, 1.0], [52000.0, 5.0], [52400.0, 2.0], [52800.0, 1.0], [53600.0, 1.0], [54000.0, 2.0], [54400.0, 5.0], [54800.0, 4.0], [55200.0, 4.0], [55600.0, 3.0], [56000.0, 2.0], [56400.0, 2.0], [36700.0, 1.0], [37100.0, 2.0], [37500.0, 2.0], [38300.0, 1.0], [39100.0, 1.0], [39500.0, 1.0], [39900.0, 1.0], [40700.0, 1.0], [41500.0, 2.0], [41900.0, 2.0], [42300.0, 3.0], [42700.0, 1.0], [43100.0, 2.0], [43900.0, 1.0], [44300.0, 3.0], [44700.0, 2.0], [45100.0, 1.0], [48300.0, 2.0], [50300.0, 4.0], [50700.0, 1.0], [51100.0, 3.0], [51500.0, 3.0], [51900.0, 3.0], [52300.0, 2.0], [52700.0, 2.0], [53100.0, 2.0], [53900.0, 1.0], [54300.0, 4.0], [54700.0, 1.0], [55100.0, 3.0], [55500.0, 3.0], [56300.0, 6.0], [56700.0, 1.0], [16500.0, 10.0], [16700.0, 10.0], [35800.0, 1.0], [36200.0, 1.0], [37000.0, 1.0], [37800.0, 1.0], [38200.0, 1.0], [38600.0, 2.0], [39800.0, 1.0], [40200.0, 1.0], [40600.0, 1.0], [41400.0, 1.0], [41800.0, 1.0], [43000.0, 1.0], [43400.0, 1.0], [43800.0, 1.0], [44600.0, 1.0], [45000.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [46600.0, 3.0], [47400.0, 2.0], [47800.0, 2.0], [48600.0, 1.0], [49000.0, 1.0], [49400.0, 3.0], [49800.0, 4.0], [51000.0, 1.0], [51400.0, 3.0], [51800.0, 3.0], [52200.0, 5.0], [52600.0, 1.0], [53400.0, 2.0], [53800.0, 1.0], [54200.0, 4.0], [54600.0, 5.0], [55000.0, 4.0], [55400.0, 3.0], [55800.0, 2.0], [56200.0, 5.0], [56600.0, 6.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 56700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 300.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 700.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 300.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 700.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 92.5434782608696, "minX": 1.62332724E12, "maxY": 592.5808823529411, "series": [{"data": [[1.6233273E12, 92.5434782608696], [1.62332724E12, 592.5808823529411]], "isOverall": false, "label": "testingadw", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6233273E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9113.0, "minX": 1.0, "maxY": 56776.0, "series": [{"data": [[2.0, 56455.0], [3.0, 56668.0], [4.0, 56370.0], [5.0, 56660.0], [7.0, 56511.5], [8.0, 56367.0], [9.0, 56386.0], [10.0, 56657.0], [11.0, 56656.0], [12.0, 56348.0], [13.0, 56354.0], [14.0, 56639.0], [15.0, 56264.0], [16.0, 56549.0], [17.0, 56548.0], [18.0, 56255.0], [20.0, 56397.5], [21.0, 56268.0], [22.0, 56538.0], [23.0, 56242.0], [24.0, 56527.0], [25.0, 56436.0], [26.0, 56032.0], [27.0, 56007.0], [28.0, 55708.0], [29.0, 55630.0], [30.0, 55625.0], [31.0, 55566.0], [33.0, 55808.0], [32.0, 55815.0], [35.0, 55526.0], [34.0, 55523.0], [37.0, 55419.0], [36.0, 55433.0], [39.0, 55332.0], [38.0, 55414.0], [41.0, 55466.5], [43.0, 55241.0], [42.0, 55317.0], [45.0, 55226.0], [44.0, 55210.0], [47.0, 55140.0], [46.0, 55201.0], [49.0, 55116.0], [51.0, 55050.0], [50.0, 55054.0], [53.0, 55037.0], [52.0, 55041.0], [55.0, 54951.0], [54.0, 54933.0], [57.0, 54930.0], [56.0, 54958.0], [59.0, 54912.0], [58.0, 54918.0], [61.0, 54912.0], [60.0, 54934.0], [63.0, 54874.0], [62.0, 54881.0], [67.0, 54637.0], [66.0, 54710.0], [65.0, 54830.0], [64.0, 54836.0], [71.0, 54621.0], [70.0, 54609.0], [69.0, 54611.0], [68.0, 54624.0], [75.0, 54455.0], [74.0, 54456.0], [73.0, 54471.0], [72.0, 54505.0], [79.0, 54323.0], [78.0, 54339.0], [77.0, 54458.0], [76.0, 54458.0], [83.0, 54202.0], [82.0, 54281.0], [81.0, 54303.0], [80.0, 54303.0], [87.0, 54182.0], [86.0, 54196.0], [85.0, 54205.0], [84.0, 54200.0], [91.0, 54165.0], [90.0, 54175.0], [89.0, 54177.0], [88.0, 54181.0], [95.0, 53872.0], [94.0, 53991.0], [93.0, 54087.0], [92.0, 54087.0], [99.0, 53446.0], [98.0, 53450.0], [97.0, 53679.0], [96.0, 53775.0], [103.0, 53345.0], [102.0, 53353.0], [101.0, 53360.0], [100.0, 53391.0], [107.0, 52952.0], [106.0, 52951.0], [105.0, 53169.0], [104.0, 53170.0], [111.0, 52645.0], [110.0, 52743.0], [109.0, 52755.0], [108.0, 52837.0], [115.0, 52324.0], [114.0, 52426.0], [113.0, 52433.0], [112.0, 52529.0], [119.0, 52272.0], [118.0, 52244.0], [117.0, 52271.0], [116.0, 52321.0], [123.0, 52260.0], [122.0, 52145.0], [121.0, 52147.0], [127.0, 52118.0], [126.0, 52120.0], [125.0, 52156.0], [124.0, 52259.0], [134.0, 51737.0], [133.0, 52023.0], [132.0, 52049.0], [131.0, 52065.0], [130.0, 52075.0], [129.0, 52092.0], [128.0, 52138.0], [143.0, 51731.0], [142.0, 51528.0], [141.0, 51744.0], [140.0, 51831.0], [139.0, 51846.0], [138.0, 51849.0], [137.0, 51936.0], [136.0, 51941.5], [151.0, 51233.0], [150.0, 51408.0], [149.0, 51401.0], [148.0, 51429.0], [147.0, 51503.0], [146.0, 51535.0], [145.0, 51634.0], [144.0, 51729.0], [159.0, 50796.0], [158.0, 50838.0], [157.0, 50839.0], [156.0, 50911.0], [155.0, 51022.0], [154.0, 51110.0], [153.0, 51123.0], [152.0, 51138.0], [167.0, 49869.0], [166.0, 50027.0], [165.0, 50170.0], [164.0, 50365.0], [163.0, 50368.0], [162.0, 50381.0], [161.0, 50386.0], [160.0, 50453.0], [175.0, 49666.0], [174.0, 49673.0], [173.0, 49752.0], [172.0, 49740.0], [171.0, 49799.0], [170.0, 49804.0], [169.0, 49808.0], [168.0, 49853.0], [182.0, 49267.0], [181.0, 49292.0], [180.0, 49344.5], [178.0, 49425.0], [177.0, 49427.0], [176.0, 49473.0], [191.0, 48547.0], [190.0, 48682.0], [189.0, 48806.0], [188.0, 48808.0], [187.0, 48904.0], [186.0, 48913.0], [185.0, 48928.0], [184.0, 49160.0], [199.0, 47826.0], [198.0, 48164.0], [197.0, 48365.0], [196.0, 48364.0], [195.0, 48473.0], [194.0, 48479.0], [193.0, 48574.0], [192.0, 48589.0], [207.0, 46624.0], [206.0, 46631.0], [205.0, 46673.0], [204.0, 47223.0], [203.0, 47418.0], [202.0, 47445.0], [201.0, 47639.0], [200.0, 47845.0], [215.0, 45236.0], [214.0, 45324.0], [213.0, 45447.0], [212.0, 45653.0], [211.0, 45728.0], [210.0, 46042.0], [209.0, 46242.0], [208.0, 46486.0], [223.0, 44397.0], [222.0, 44638.0], [221.0, 44538.0], [220.0, 44719.0], [218.0, 44961.0], [217.0, 45019.0], [216.0, 45121.0], [231.0, 43687.0], [230.0, 43690.0], [229.0, 43873.0], [228.0, 43977.0], [227.0, 44078.0], [226.0, 44323.0], [225.0, 44428.0], [224.0, 44316.0], [239.0, 42861.0], [238.0, 43082.0], [237.0, 43103.0], [236.0, 43187.0], [235.0, 43366.0], [234.0, 43370.0], [233.0, 43376.0], [232.0, 43487.0], [247.0, 41927.0], [246.0, 42150.0], [245.0, 42317.0], [244.0, 42345.0], [243.0, 42357.0], [242.0, 42563.0], [241.0, 42766.0], [240.0, 42864.0], [255.0, 40796.0], [254.0, 40684.0], [253.0, 41205.0], [252.0, 41400.0], [251.0, 41545.0], [250.0, 41594.0], [249.0, 41924.0], [248.0, 41804.0], [270.0, 38232.0], [271.0, 38103.0], [269.0, 38394.0], [268.0, 38604.0], [267.0, 38621.0], [266.0, 38815.0], [265.0, 39129.0], [264.0, 39220.0], [263.0, 39541.0], [257.0, 40267.0], [256.0, 40579.0], [259.0, 39939.0], [258.0, 40053.0], [262.0, 39660.0], [261.0, 39725.0], [260.0, 39820.0], [286.0, 36745.0], [287.0, 36547.0], [285.0, 36839.0], [284.0, 36955.0], [283.0, 36840.5], [281.0, 36944.0], [280.0, 37041.0], [279.0, 37145.0], [273.0, 37813.0], [272.0, 38101.0], [275.0, 37573.0], [274.0, 37789.0], [278.0, 37142.0], [277.0, 37364.0], [276.0, 37571.0], [302.0, 16835.0], [303.0, 16825.0], [301.0, 16872.0], [300.0, 25219.0], [299.0, 25426.0], [298.0, 27204.0], [297.0, 27499.0], [296.0, 29480.0], [295.0, 35820.0], [289.0, 36534.0], [291.0, 36412.0], [290.0, 36554.0], [294.0, 36017.0], [293.0, 36122.0], [292.0, 36222.0], [318.0, 16672.0], [319.0, 16668.0], [317.0, 16678.0], [316.0, 16702.0], [315.0, 16701.0], [314.0, 16710.0], [313.0, 16728.0], [312.0, 16741.0], [311.0, 16764.0], [305.0, 16815.0], [304.0, 16814.0], [307.0, 16790.0], [306.0, 16815.0], [310.0, 16774.0], [309.0, 16782.0], [308.0, 16787.0], [334.0, 16530.0], [335.0, 16533.0], [333.0, 16553.0], [332.0, 16568.0], [331.0, 16569.0], [330.0, 16580.0], [329.0, 16583.0], [328.0, 16599.0], [327.0, 16603.0], [321.0, 16664.0], [320.0, 16667.0], [323.0, 16637.0], [322.0, 16659.0], [326.0, 16607.0], [325.0, 16626.0], [324.0, 16631.0], [350.0, 16336.0], [351.0, 16326.0], [349.0, 16363.0], [348.0, 16365.0], [347.0, 16388.0], [346.0, 16390.0], [345.0, 16407.0], [344.0, 16408.0], [343.0, 16430.0], [336.0, 16525.0], [339.0, 16483.0], [338.0, 16493.0], [342.0, 16451.0], [341.0, 16474.0], [340.0, 16479.0], [365.0, 16187.0], [367.0, 16178.0], [364.0, 16191.0], [355.0, 16292.0], [354.0, 16311.0], [353.0, 16316.0], [352.0, 16322.0], [363.0, 16198.0], [362.0, 16217.0], [361.0, 16222.0], [360.0, 16243.0], [359.0, 16260.0], [358.0, 16267.0], [357.0, 16268.0], [356.0, 16277.0], [382.0, 16013.0], [383.0, 15998.0], [381.0, 16034.0], [380.0, 16039.5], [378.0, 16050.0], [377.0, 16056.0], [376.0, 16058.0], [375.0, 16076.0], [369.0, 16162.5], [371.0, 16119.0], [370.0, 16153.0], [374.0, 16097.0], [373.0, 16108.0], [372.0, 16115.0], [398.0, 15847.0], [399.0, 15823.0], [397.0, 15868.0], [396.0, 15886.0], [395.0, 15889.0], [394.0, 15891.0], [393.0, 15891.0], [392.0, 15916.0], [391.0, 15941.0], [385.0, 15978.0], [384.0, 15983.0], [387.0, 15983.0], [386.0, 15977.0], [390.0, 15941.0], [389.0, 15943.0], [388.0, 15973.0], [414.0, 15676.0], [415.0, 15626.0], [413.0, 15683.0], [412.0, 15684.0], [411.0, 15686.0], [410.0, 15689.0], [409.0, 15702.0], [408.0, 15713.0], [407.0, 15763.0], [401.0, 15815.0], [400.0, 15822.0], [403.0, 15787.0], [402.0, 15807.0], [406.0, 15770.0], [405.0, 15774.0], [404.0, 15774.0], [430.0, 15474.0], [431.0, 15470.0], [429.0, 15484.0], [428.0, 15491.0], [427.0, 15502.0], [426.0, 15524.0], [425.0, 15540.0], [424.0, 15550.0], [423.0, 15557.0], [417.0, 15615.0], [416.0, 15624.0], [419.0, 15603.0], [418.0, 15609.0], [422.0, 15573.0], [421.0, 15580.0], [446.0, 15252.0], [447.0, 15245.0], [445.0, 15269.0], [444.0, 15301.0], [443.0, 15308.0], [442.0, 15309.0], [441.0, 15310.0], [440.0, 15344.0], [439.0, 15349.0], [433.0, 15452.0], [432.0, 15458.0], [435.0, 15416.0], [434.0, 15420.0], [438.0, 15367.0], [437.0, 15388.0], [436.0, 15401.0], [462.0, 15103.0], [463.0, 15072.0], [461.0, 15102.0], [460.0, 15111.0], [459.0, 15118.0], [458.0, 15122.0], [457.0, 15149.0], [456.0, 15182.0], [455.0, 15187.0], [449.0, 15238.0], [448.0, 15244.0], [451.0, 15208.0], [450.0, 15213.0], [454.0, 15197.0], [452.0, 15200.0], [478.0, 14926.0], [479.0, 14925.0], [477.0, 14930.0], [476.0, 14934.0], [475.0, 14976.0], [474.0, 14986.0], [473.0, 14987.0], [471.0, 14992.0], [465.0, 15044.0], [464.0, 15069.0], [467.0, 15033.0], [466.0, 15041.0], [470.0, 14995.0], [469.0, 15024.0], [468.0, 15029.0], [494.0, 14761.0], [495.0, 14747.0], [493.0, 14770.0], [492.0, 14788.0], [491.0, 14816.0], [490.0, 14827.0], [489.0, 14830.0], [488.0, 14858.0], [487.0, 14870.0], [481.0, 14913.0], [480.0, 14921.0], [483.0, 14897.0], [482.0, 14874.0], [486.0, 14845.0], [485.0, 14865.0], [484.0, 14898.0], [510.0, 14574.0], [511.0, 14565.0], [509.0, 14593.0], [508.0, 14613.0], [507.0, 14628.0], [506.0, 14652.0], [505.0, 14659.0], [504.0, 14688.0], [503.0, 14688.0], [497.0, 14724.0], [496.0, 14741.0], [499.0, 14705.0], [498.0, 14716.0], [502.0, 14691.0], [501.0, 14697.0], [500.0, 14697.0], [540.0, 14221.0], [543.0, 14197.0], [529.0, 14330.0], [528.0, 14353.0], [531.0, 14321.0], [530.0, 14331.0], [533.0, 14298.0], [532.0, 14316.0], [542.0, 14221.0], [541.0, 14224.0], [539.0, 14234.0], [538.0, 14258.0], [537.0, 14266.0], [536.0, 14263.0], [527.0, 14357.0], [513.0, 14545.0], [512.0, 14559.0], [515.0, 14531.0], [514.0, 14532.0], [517.0, 14507.0], [516.0, 14525.0], [519.0, 14494.0], [518.0, 14500.0], [526.0, 14381.0], [525.0, 14388.0], [524.0, 14430.0], [523.0, 14452.0], [522.0, 14477.0], [520.0, 14481.0], [535.0, 14271.0], [534.0, 14287.0], [572.0, 13895.0], [575.0, 13860.0], [561.0, 13987.0], [560.0, 13994.0], [563.0, 13961.0], [562.0, 13980.0], [565.0, 13951.0], [564.0, 13963.0], [574.0, 13870.0], [573.0, 13902.0], [571.0, 13901.0], [570.0, 13924.0], [569.0, 13939.0], [568.0, 13952.0], [559.0, 13995.0], [545.0, 14172.0], [544.0, 14187.0], [547.0, 14147.0], [546.0, 14158.0], [549.0, 14144.0], [548.0, 14150.0], [551.0, 14117.0], [550.0, 14122.0], [558.0, 14017.0], [557.0, 14055.0], [556.0, 14060.0], [555.0, 14076.0], [554.0, 14097.0], [553.0, 14109.0], [552.0, 14110.0], [567.0, 13949.0], [566.0, 13958.0], [604.0, 13994.0], [607.0, 13940.0], [593.0, 14103.0], [592.0, 14075.0], [595.0, 14048.0], [594.0, 14053.0], [597.0, 14017.0], [596.0, 14079.0], [606.0, 13896.0], [605.0, 13902.0], [603.0, 13934.0], [602.0, 13954.0], [601.0, 14028.0], [600.0, 13984.0], [591.0, 14133.0], [577.0, 13843.0], [576.0, 13874.0], [579.0, 13830.0], [578.0, 13830.0], [581.0, 13803.0], [580.0, 13809.0], [583.0, 13758.0], [582.0, 13761.0], [590.0, 14140.0], [589.0, 14081.0], [588.0, 14172.0], [587.0, 14151.0], [586.0, 13743.0], [585.0, 14167.0], [584.0, 13763.0], [599.0, 13971.0], [598.0, 13991.0], [636.0, 13595.0], [639.0, 13582.0], [625.0, 13647.0], [624.0, 13665.0], [627.0, 13633.0], [626.0, 13640.0], [629.0, 13626.0], [628.0, 13625.0], [638.0, 13582.0], [637.0, 13594.0], [635.0, 13612.0], [634.0, 13615.0], [633.0, 13617.0], [632.0, 13609.0], [623.0, 13664.0], [608.0, 13942.0], [610.0, 13920.0], [609.0, 13930.0], [612.0, 13874.0], [611.0, 13921.0], [614.0, 13853.0], [613.0, 13864.0], [622.0, 13715.0], [621.0, 13679.0], [620.0, 13727.0], [619.0, 13687.0], [618.0, 13699.0], [617.0, 13755.0], [616.0, 13728.5], [631.0, 13620.0], [630.0, 13617.0], [665.0, 13248.0], [670.0, 13148.5], [671.0, 13171.0], [656.0, 13335.0], [658.0, 13329.0], [657.0, 13337.0], [661.0, 13325.0], [659.0, 13327.0], [668.0, 13160.0], [667.0, 13159.0], [666.0, 13320.0], [664.0, 13300.0], [647.0, 13426.0], [646.0, 13401.0], [645.0, 13408.0], [644.0, 13410.0], [643.0, 13420.0], [642.0, 13446.0], [641.0, 13460.0], [640.0, 13576.0], [655.0, 13350.0], [654.0, 13358.0], [653.0, 13390.0], [652.0, 13355.0], [651.0, 13392.0], [650.0, 13357.0], [649.0, 13358.0], [648.0, 13388.0], [663.0, 13313.0], [662.0, 13326.0], [700.0, 12840.0], [703.0, 12787.0], [689.0, 12942.0], [688.0, 12950.0], [691.0, 12929.0], [690.0, 12927.0], [693.0, 12894.0], [692.0, 12924.0], [702.0, 12804.0], [701.0, 12750.0], [699.0, 12852.0], [698.0, 12791.0], [697.0, 12862.0], [696.0, 12795.0], [687.0, 12968.0], [674.0, 13085.0], [673.0, 13118.5], [676.0, 12685.0], [675.0, 13078.0], [678.0, 13062.0], [677.0, 13099.0], [686.0, 13010.0], [685.0, 13021.5], [683.0, 13026.0], [682.0, 13035.0], [681.0, 13037.0], [680.0, 13044.0], [695.0, 12797.0], [694.0, 12883.0], [732.0, 12091.0], [735.0, 12060.0], [721.0, 12487.0], [720.0, 12517.0], [723.0, 12565.0], [722.0, 12587.0], [725.0, 12571.0], [724.0, 12572.0], [734.0, 12061.0], [733.0, 12078.0], [731.0, 12100.0], [730.0, 12115.0], [729.0, 12130.0], [728.0, 12430.0], [719.0, 12558.0], [704.0, 12712.0], [707.0, 12773.5], [705.0, 12710.0], [709.0, 12738.0], [708.0, 12755.0], [711.0, 12718.0], [710.0, 12650.0], [718.0, 12665.0], [717.0, 12595.0], [716.0, 12596.0], [715.0, 12602.0], [714.0, 12682.0], [713.0, 12703.0], [712.0, 12687.0], [727.0, 12158.0], [726.0, 12459.0], [760.0, 11810.0], [766.0, 11764.0], [767.0, 11753.0], [752.0, 11891.0], [755.0, 11879.5], [753.0, 11889.0], [765.0, 11773.0], [764.0, 11787.0], [763.0, 11794.666666666666], [751.0, 11893.0], [736.0, 12050.0], [738.0, 12016.0], [737.0, 12034.0], [740.0, 11993.0], [739.0, 12002.0], [743.0, 11972.0], [742.0, 11990.5], [750.0, 11896.0], [749.0, 11907.0], [748.0, 11917.0], [747.0, 11932.0], [746.0, 11958.0], [745.0, 11961.0], [744.0, 11967.0], [759.0, 11815.0], [758.0, 11826.0], [757.0, 11832.0], [756.0, 11857.0], [796.0, 11428.0], [799.0, 11391.0], [785.0, 11546.0], [787.0, 11517.0], [786.0, 11519.0], [789.0, 11496.0], [788.0, 11504.0], [798.0, 11393.0], [797.0, 11396.0], [795.0, 11441.0], [794.0, 11467.0], [793.0, 11470.0], [792.0, 11477.0], [783.0, 11602.0], [769.0, 11745.0], [768.0, 11754.0], [771.0, 11738.0], [770.0, 11735.0], [773.0, 11697.0], [772.0, 11728.0], [775.0, 11666.0], [774.0, 11679.0], [781.0, 11620.0], [780.0, 11628.0], [779.0, 11636.0], [778.0, 11643.0], [777.0, 11646.0], [776.0, 11653.0], [791.0, 11475.0], [790.0, 11487.0], [828.0, 11112.0], [831.0, 11077.0], [816.0, 11228.0], [818.0, 11218.0], [817.0, 11223.0], [820.0, 11194.0], [819.0, 11199.0], [830.0, 11064.0], [829.0, 11079.0], [827.0, 11126.0], [826.0, 11127.0], [825.0, 11134.0], [824.0, 11149.0], [815.0, 11266.0], [800.0, 11382.0], [802.0, 11375.0], [801.0, 11382.0], [804.0, 11363.0], [803.0, 11373.0], [807.0, 11344.5], [805.0, 11348.0], [814.0, 11269.0], [813.0, 11274.0], [812.0, 11299.0], [811.0, 11304.0], [810.0, 11303.5], [808.0, 11327.0], [823.0, 11165.0], [822.0, 11171.0], [858.0, 10820.0], [862.0, 10781.0], [863.0, 10755.0], [849.0, 10884.0], [848.0, 10918.0], [851.0, 10860.0], [850.0, 10869.0], [853.0, 10841.0], [852.0, 10847.0], [861.0, 10783.0], [860.0, 10792.0], [859.0, 10798.0], [856.0, 10830.0], [839.0, 11007.0], [838.0, 11013.0], [837.0, 11014.0], [836.0, 11017.0], [834.0, 11053.0], [833.0, 11093.0], [832.0, 11066.0], [847.0, 10919.0], [846.0, 10955.0], [845.0, 10973.0], [843.0, 10964.0], [841.0, 10976.0], [840.0, 10988.0], [855.0, 10838.0], [854.0, 10841.0], [892.0, 10428.0], [895.0, 10379.0], [880.0, 10567.0], [883.0, 10526.0], [881.0, 10551.0], [885.0, 10523.0], [884.0, 10526.0], [894.0, 10408.0], [893.0, 10418.0], [891.0, 10430.0], [890.0, 10441.0], [889.0, 10467.0], [888.0, 10487.0], [879.0, 10581.0], [865.0, 10742.0], [864.0, 10740.0], [867.0, 10715.0], [866.0, 10722.0], [869.0, 10677.0], [868.0, 10683.0], [871.0, 10645.0], [870.0, 10664.0], [878.0, 10585.0], [877.0, 10594.0], [876.0, 10617.0], [875.0, 10630.0], [874.0, 10622.0], [873.0, 10646.0], [872.0, 10646.0], [887.0, 10484.0], [886.0, 10518.0], [922.0, 10086.0], [926.0, 10024.0], [927.0, 10018.0], [913.0, 10165.0], [912.0, 10172.0], [915.0, 10141.0], [914.0, 10147.0], [917.0, 10113.0], [916.0, 10135.0], [925.0, 10070.0], [924.0, 10079.0], [923.0, 10081.0], [921.0, 10087.5], [902.0, 10329.333333333334], [899.0, 10334.0], [898.0, 10355.0], [897.0, 10360.0], [896.0, 10366.0], [911.0, 10235.5], [909.0, 10241.0], [908.0, 10257.0], [907.0, 10257.5], [905.0, 10270.0], [904.0, 10282.0], [919.0, 10090.0], [918.0, 10111.0], [953.0, 9772.0], [958.0, 9660.0], [959.0, 9659.0], [945.0, 9842.0], [947.0, 9830.0], [946.0, 9832.0], [957.0, 9666.0], [956.0, 9679.0], [954.0, 9728.0], [952.0, 9791.666666666666], [935.0, 9929.0], [934.0, 9929.0], [933.0, 9928.0], [932.0, 9935.0], [931.0, 9959.0], [930.0, 9964.0], [929.0, 9984.0], [928.0, 9994.0], [942.0, 9843.0], [941.0, 9865.0], [940.0, 9881.0], [939.0, 9890.0], [938.0, 9901.0], [937.0, 9906.0], [936.0, 9917.0], [949.0, 9796.0], [948.0, 9809.0], [984.0, 9389.0], [988.0, 9338.0], [991.0, 9290.0], [976.0, 9521.5], [990.0, 9314.0], [989.0, 9337.0], [987.0, 9352.0], [986.0, 9359.0], [985.0, 9358.0], [974.0, 9523.0], [960.0, 9651.0], [962.0, 9626.0], [961.0, 9639.0], [965.0, 9593.0], [964.0, 9599.0], [967.0, 9573.0], [966.0, 9579.0], [973.0, 9529.0], [971.0, 9530.0], [970.0, 9534.0], [969.0, 9563.0], [968.0, 9565.0], [983.0, 9397.0], [982.0, 9518.0], [1000.0, 9113.0], [999.0, 9136.0], [998.0, 9157.0], [997.0, 9167.0], [996.0, 9549.0], [995.0, 9249.0], [994.0, 9275.0], [993.0, 9273.0], [992.0, 9594.0], [1.0, 56776.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.573000000001, 23862.31700000001]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 690.0, "minX": 1.62332724E12, "maxY": 236628.16666666666, "series": [{"data": [[1.6233273E12, 46180.933333333334], [1.62332724E12, 236628.16666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6233273E12, 690.0], [1.62332724E12, 3060.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6233273E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17192.263480392157, "minX": 1.62332724E12, "maxY": 53442.554347826124, "series": [{"data": [[1.6233273E12, 53442.554347826124], [1.62332724E12, 17192.263480392157]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6233273E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16908.520833333332, "minX": 1.62332724E12, "maxY": 53159.55434782607, "series": [{"data": [[1.6233273E12, 53159.55434782607], [1.62332724E12, 16908.520833333332]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6233273E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4611.744565217395, "minX": 1.62332724E12, "maxY": 8572.212009803932, "series": [{"data": [[1.6233273E12, 4611.744565217395], [1.62332724E12, 8572.212009803932]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6233273E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25219.0, "minX": 1.62332724E12, "maxY": 56776.0, "series": [{"data": [[1.6233273E12, 56776.0], [1.62332724E12, 48928.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6233273E12, 56360.5], [1.62332724E12, 48397.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6233273E12, 56684.2], [1.62332724E12, 48925.45]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6233273E12, 56546.75], [1.62332724E12, 48700.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6233273E12, 49093.0], [1.62332724E12, 25219.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6233273E12, 54087.0], [1.62332724E12, 42460.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6233273E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9521.0, "minX": 1.0, "maxY": 56411.0, "series": [{"data": [[2.0, 26315.0], [8.0, 45280.0], [9.0, 42317.0], [38.0, 55128.5], [10.0, 36534.0], [11.0, 44397.0], [12.0, 37143.5], [14.0, 53257.5], [15.0, 48574.0], [1.0, 32650.0], [4.0, 41472.5], [18.0, 49569.5], [5.0, 43474.0], [22.0, 51584.5], [23.0, 52156.0], [6.0, 46555.0], [7.0, 39317.5], [28.0, 56411.0], [30.0, 54292.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[83.0, 10141.0], [80.0, 13356.0], [82.0, 14867.5], [87.0, 14017.0], [84.0, 15797.0], [44.0, 9521.0], [90.0, 11573.0], [60.0, 16574.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 90.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9200.0, "minX": 1.0, "maxY": 56130.5, "series": [{"data": [[2.0, 26036.0], [8.0, 44996.5], [9.0, 42043.0], [38.0, 54852.0], [10.0, 36257.5], [11.0, 44115.0], [12.0, 36862.5], [14.0, 52974.0], [15.0, 48291.0], [1.0, 32373.0], [4.0, 41187.0], [18.0, 49283.5], [5.0, 43190.0], [22.0, 51298.0], [23.0, 51864.0], [6.0, 46274.0], [7.0, 39038.5], [28.0, 56130.5], [30.0, 54010.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[83.0, 9864.0], [80.0, 13063.0], [82.0, 14584.5], [87.0, 13741.0], [84.0, 15511.0], [44.0, 9200.0], [90.0, 11285.0], [60.0, 16292.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 90.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62332724E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62332724E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62332724E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.9333333333333333, "minX": 1.62332724E12, "maxY": 11.666666666666666, "series": [{"data": [[1.6233273E12, 3.066666666666667], [1.62332724E12, 1.9333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62332724E12, 11.666666666666666]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6233273E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.9333333333333333, "minX": 1.62332724E12, "maxY": 11.666666666666666, "series": [{"data": [[1.62332724E12, 11.666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6233273E12, 3.066666666666667], [1.62332724E12, 1.9333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6233273E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.9333333333333333, "minX": 1.62332724E12, "maxY": 11.666666666666666, "series": [{"data": [[1.6233273E12, 3.066666666666667], [1.62332724E12, 1.9333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62332724E12, 11.666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6233273E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

