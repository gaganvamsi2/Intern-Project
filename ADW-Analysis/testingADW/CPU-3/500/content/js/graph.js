/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8821.0, "minX": 0.0, "maxY": 56514.0, "series": [{"data": [[0.0, 8821.0], [0.1, 8821.0], [0.2, 8882.0], [0.3, 8882.0], [0.4, 8933.0], [0.5, 8933.0], [0.6, 8933.0], [0.7, 9002.0], [0.8, 9017.0], [0.9, 9017.0], [1.0, 9054.0], [1.1, 9054.0], [1.2, 9071.0], [1.3, 9071.0], [1.4, 9084.0], [1.5, 9084.0], [1.6, 9088.0], [1.7, 9088.0], [1.8, 9088.0], [1.9, 9088.0], [2.0, 9098.0], [2.1, 9098.0], [2.2, 9114.0], [2.3, 9114.0], [2.4, 9114.0], [2.5, 9135.0], [2.6, 9135.0], [2.7, 9167.0], [2.8, 9167.0], [2.9, 9208.0], [3.0, 9208.0], [3.1, 9209.0], [3.2, 9209.0], [3.3, 9210.0], [3.4, 9210.0], [3.5, 9215.0], [3.6, 9215.0], [3.7, 9272.0], [3.8, 9272.0], [3.9, 9273.0], [4.0, 9273.0], [4.1, 9275.0], [4.2, 9275.0], [4.3, 9279.0], [4.4, 9279.0], [4.5, 9279.0], [4.6, 9279.0], [4.7, 9283.0], [4.8, 9283.0], [4.9, 9307.0], [5.0, 9307.0], [5.1, 9310.0], [5.2, 9310.0], [5.3, 9311.0], [5.4, 9311.0], [5.5, 9323.0], [5.6, 9323.0], [5.7, 9335.0], [5.8, 9335.0], [5.9, 9335.0], [6.0, 9335.0], [6.1, 9338.0], [6.2, 9338.0], [6.3, 9383.0], [6.4, 9383.0], [6.5, 9409.0], [6.6, 9409.0], [6.7, 9420.0], [6.8, 9420.0], [6.9, 9430.0], [7.0, 9430.0], [7.1, 9435.0], [7.2, 9435.0], [7.3, 9443.0], [7.4, 9443.0], [7.5, 9456.0], [7.6, 9456.0], [7.7, 9464.0], [7.8, 9464.0], [7.9, 9474.0], [8.0, 9474.0], [8.1, 9502.0], [8.2, 9502.0], [8.3, 9502.0], [8.4, 9502.0], [8.5, 9506.0], [8.6, 9506.0], [8.7, 9518.0], [8.8, 9518.0], [8.9, 9520.0], [9.0, 9520.0], [9.1, 9531.0], [9.2, 9531.0], [9.3, 9547.0], [9.4, 9547.0], [9.5, 9551.0], [9.6, 9551.0], [9.7, 9565.0], [9.8, 9570.0], [9.9, 9570.0], [10.0, 9613.0], [10.1, 9613.0], [10.2, 9616.0], [10.3, 9616.0], [10.4, 9633.0], [10.5, 9633.0], [10.6, 9637.0], [10.7, 9637.0], [10.8, 9643.0], [10.9, 9643.0], [11.0, 9661.0], [11.1, 9661.0], [11.2, 9664.0], [11.3, 9664.0], [11.4, 9667.0], [11.5, 9667.0], [11.6, 9680.0], [11.7, 9680.0], [11.8, 9682.0], [11.9, 9682.0], [12.0, 9708.0], [12.1, 9708.0], [12.2, 9719.0], [12.3, 9719.0], [12.4, 9726.0], [12.5, 9726.0], [12.6, 9778.0], [12.7, 9778.0], [12.8, 9801.0], [12.9, 9801.0], [13.0, 9802.0], [13.1, 9802.0], [13.2, 9815.0], [13.3, 9815.0], [13.4, 9823.0], [13.5, 9823.0], [13.6, 9825.0], [13.7, 9825.0], [13.8, 9826.0], [13.9, 9826.0], [14.0, 9828.0], [14.1, 9828.0], [14.2, 9835.0], [14.3, 9835.0], [14.4, 9846.0], [14.5, 9846.0], [14.6, 9858.0], [14.7, 9858.0], [14.8, 9861.0], [14.9, 9861.0], [15.0, 9865.0], [15.1, 9865.0], [15.2, 9868.0], [15.3, 9868.0], [15.4, 9900.0], [15.5, 9900.0], [15.6, 9900.0], [15.7, 9900.0], [15.8, 9928.0], [15.9, 9928.0], [16.0, 9929.0], [16.1, 9929.0], [16.2, 9946.0], [16.3, 9946.0], [16.4, 9954.0], [16.5, 9954.0], [16.6, 9984.0], [16.7, 9984.0], [16.8, 9991.0], [16.9, 9991.0], [17.0, 9998.0], [17.1, 9998.0], [17.2, 10030.0], [17.3, 10030.0], [17.4, 10037.0], [17.5, 10037.0], [17.6, 10052.0], [17.7, 10052.0], [17.8, 10067.0], [17.9, 10067.0], [18.0, 10072.0], [18.1, 10072.0], [18.2, 10081.0], [18.3, 10081.0], [18.4, 10111.0], [18.5, 10111.0], [18.6, 10115.0], [18.7, 10115.0], [18.8, 10118.0], [18.9, 10118.0], [19.0, 10129.0], [19.1, 10129.0], [19.2, 10156.0], [19.3, 10156.0], [19.4, 10197.0], [19.5, 10197.0], [19.6, 10212.0], [19.7, 10212.0], [19.8, 10212.0], [19.9, 10212.0], [20.0, 10218.0], [20.1, 10218.0], [20.2, 10222.0], [20.3, 10222.0], [20.4, 10240.0], [20.5, 10240.0], [20.6, 10276.0], [20.7, 10276.0], [20.8, 10288.0], [20.9, 10288.0], [21.0, 10315.0], [21.1, 10315.0], [21.2, 10315.0], [21.3, 10315.0], [21.4, 10316.0], [21.5, 10316.0], [21.6, 10332.0], [21.7, 10332.0], [21.8, 10365.0], [21.9, 10365.0], [22.0, 10370.0], [22.1, 10370.0], [22.2, 10404.0], [22.3, 10404.0], [22.4, 10428.0], [22.5, 10428.0], [22.6, 10436.0], [22.7, 10436.0], [22.8, 10457.0], [22.9, 10457.0], [23.0, 10457.0], [23.1, 10457.0], [23.2, 10468.0], [23.3, 10468.0], [23.4, 10489.0], [23.5, 10489.0], [23.6, 10510.0], [23.7, 10510.0], [23.8, 10511.0], [23.9, 10511.0], [24.0, 10522.0], [24.1, 10522.0], [24.2, 10525.0], [24.3, 10525.0], [24.4, 10529.0], [24.5, 10529.0], [24.6, 10533.0], [24.7, 10533.0], [24.8, 10538.0], [24.9, 10538.0], [25.0, 10546.0], [25.1, 10546.0], [25.2, 10549.0], [25.3, 10549.0], [25.4, 10551.0], [25.5, 10551.0], [25.6, 10553.0], [25.7, 10553.0], [25.8, 10558.0], [25.9, 10558.0], [26.0, 10563.0], [26.1, 10563.0], [26.2, 10575.0], [26.3, 10575.0], [26.4, 10580.0], [26.5, 10580.0], [26.6, 10596.0], [26.7, 10596.0], [26.8, 10607.0], [26.9, 10607.0], [27.0, 10611.0], [27.1, 10611.0], [27.2, 10614.0], [27.3, 10614.0], [27.4, 10664.0], [27.5, 10664.0], [27.6, 10664.0], [27.7, 10664.0], [27.8, 10681.0], [27.9, 10681.0], [28.0, 10683.0], [28.1, 10683.0], [28.2, 10722.0], [28.3, 10722.0], [28.4, 10723.0], [28.5, 10723.0], [28.6, 10726.0], [28.7, 10726.0], [28.8, 10733.0], [28.9, 10733.0], [29.0, 10761.0], [29.1, 10761.0], [29.2, 10775.0], [29.3, 10775.0], [29.4, 10779.0], [29.5, 10779.0], [29.6, 10780.0], [29.7, 10780.0], [29.8, 10781.0], [29.9, 10781.0], [30.0, 10783.0], [30.1, 10783.0], [30.2, 10828.0], [30.3, 10828.0], [30.4, 10840.0], [30.5, 10840.0], [30.6, 10850.0], [30.7, 10850.0], [30.8, 10861.0], [30.9, 10861.0], [31.0, 10866.0], [31.1, 10866.0], [31.2, 10869.0], [31.3, 10869.0], [31.4, 10896.0], [31.5, 10896.0], [31.6, 10898.0], [31.7, 10898.0], [31.8, 10902.0], [31.9, 10902.0], [32.0, 10929.0], [32.1, 10929.0], [32.2, 10932.0], [32.3, 10932.0], [32.4, 10936.0], [32.5, 10936.0], [32.6, 10942.0], [32.7, 10942.0], [32.8, 10949.0], [32.9, 10949.0], [33.0, 10950.0], [33.1, 10950.0], [33.2, 10956.0], [33.3, 10956.0], [33.4, 10967.0], [33.5, 10967.0], [33.6, 10994.0], [33.7, 10994.0], [33.8, 10996.0], [33.9, 10996.0], [34.0, 11022.0], [34.1, 11022.0], [34.2, 11058.0], [34.3, 11058.0], [34.4, 11059.0], [34.5, 11059.0], [34.6, 11063.0], [34.7, 11063.0], [34.8, 11067.0], [34.9, 11067.0], [35.0, 11069.0], [35.1, 11069.0], [35.2, 11081.0], [35.3, 11081.0], [35.4, 11082.0], [35.5, 11082.0], [35.6, 11084.0], [35.7, 11084.0], [35.8, 11122.0], [35.9, 11122.0], [36.0, 11139.0], [36.1, 11139.0], [36.2, 11144.0], [36.3, 11144.0], [36.4, 11186.0], [36.5, 11186.0], [36.6, 11189.0], [36.7, 11189.0], [36.8, 11196.0], [36.9, 11196.0], [37.0, 11196.0], [37.1, 11196.0], [37.2, 11199.0], [37.3, 11199.0], [37.4, 11205.0], [37.5, 11205.0], [37.6, 11223.0], [37.7, 11223.0], [37.8, 11225.0], [37.9, 11225.0], [38.0, 11231.0], [38.1, 11231.0], [38.2, 11238.0], [38.3, 11238.0], [38.4, 11238.0], [38.5, 11258.0], [38.6, 11258.0], [38.7, 11266.0], [38.8, 11266.0], [38.9, 11278.0], [39.0, 11278.0], [39.1, 11301.0], [39.2, 11301.0], [39.3, 11315.0], [39.4, 11315.0], [39.5, 11317.0], [39.6, 11317.0], [39.7, 11349.0], [39.8, 11349.0], [39.9, 11350.0], [40.0, 11350.0], [40.1, 35534.0], [40.2, 35534.0], [40.3, 36429.0], [40.4, 36429.0], [40.5, 36453.0], [40.6, 36453.0], [40.7, 36646.0], [40.8, 36646.0], [40.9, 36766.0], [41.0, 36766.0], [41.1, 36979.0], [41.2, 36979.0], [41.3, 37100.0], [41.4, 37100.0], [41.5, 37102.0], [41.6, 37102.0], [41.7, 37121.0], [41.8, 37121.0], [41.9, 37308.0], [42.0, 37308.0], [42.1, 37319.0], [42.2, 37319.0], [42.3, 37376.0], [42.4, 37376.0], [42.5, 37388.0], [42.6, 37388.0], [42.7, 37408.0], [42.8, 37408.0], [42.9, 37430.0], [43.0, 37430.0], [43.1, 37809.0], [43.2, 37809.0], [43.3, 37846.0], [43.4, 37846.0], [43.5, 37922.0], [43.6, 37922.0], [43.7, 38003.0], [43.8, 38003.0], [43.9, 38124.0], [44.0, 38124.0], [44.1, 38132.0], [44.2, 38132.0], [44.3, 38532.0], [44.4, 38532.0], [44.5, 38544.0], [44.6, 38544.0], [44.7, 38742.0], [44.8, 38742.0], [44.9, 38837.0], [45.0, 38837.0], [45.1, 39067.0], [45.2, 39067.0], [45.3, 39373.0], [45.4, 39373.0], [45.5, 39387.0], [45.6, 39387.0], [45.7, 39446.0], [45.8, 39446.0], [45.9, 39679.0], [46.0, 39679.0], [46.1, 39784.0], [46.2, 39784.0], [46.3, 39815.0], [46.4, 39815.0], [46.5, 40111.0], [46.6, 40111.0], [46.7, 40213.0], [46.8, 40213.0], [46.9, 40430.0], [47.0, 40430.0], [47.1, 40521.0], [47.2, 40521.0], [47.3, 40845.0], [47.4, 40845.0], [47.5, 40846.0], [47.6, 40846.0], [47.7, 40929.0], [47.8, 40929.0], [47.9, 41013.0], [48.0, 41013.0], [48.1, 41115.0], [48.2, 41115.0], [48.3, 41236.0], [48.4, 41236.0], [48.5, 41276.0], [48.6, 41276.0], [48.7, 41372.0], [48.8, 41372.0], [48.9, 41482.0], [49.0, 41482.0], [49.1, 41554.0], [49.2, 41554.0], [49.3, 41558.0], [49.4, 41558.0], [49.5, 41740.0], [49.6, 41740.0], [49.7, 41985.0], [49.8, 41985.0], [49.9, 42094.0], [50.0, 42094.0], [50.1, 42147.0], [50.2, 42147.0], [50.3, 42204.0], [50.4, 42204.0], [50.5, 42319.0], [50.6, 42319.0], [50.7, 42391.0], [50.8, 42391.0], [50.9, 42397.0], [51.0, 42397.0], [51.1, 42469.0], [51.2, 42469.0], [51.3, 42589.0], [51.4, 42589.0], [51.5, 42595.0], [51.6, 42595.0], [51.7, 42795.0], [51.8, 42795.0], [51.9, 42828.0], [52.0, 42828.0], [52.1, 43002.0], [52.2, 43002.0], [52.3, 43130.0], [52.4, 43130.0], [52.5, 43210.0], [52.6, 43210.0], [52.7, 43224.0], [52.8, 43224.0], [52.9, 43325.0], [53.0, 43325.0], [53.1, 43409.0], [53.2, 43409.0], [53.3, 43431.0], [53.4, 43431.0], [53.5, 43521.0], [53.6, 43521.0], [53.7, 43637.0], [53.8, 43637.0], [53.9, 43826.0], [54.0, 43826.0], [54.1, 43870.0], [54.2, 43870.0], [54.3, 43949.0], [54.4, 43949.0], [54.5, 44039.0], [54.6, 44039.0], [54.7, 44048.0], [54.8, 44048.0], [54.9, 44143.0], [55.0, 44143.0], [55.1, 44245.0], [55.2, 44245.0], [55.3, 44264.0], [55.4, 44264.0], [55.5, 44442.0], [55.6, 44442.0], [55.7, 44470.0], [55.8, 44470.0], [55.9, 44748.0], [56.0, 44748.0], [56.1, 44966.0], [56.2, 44966.0], [56.3, 45305.0], [56.4, 45305.0], [56.5, 45388.0], [56.6, 45388.0], [56.7, 45395.0], [56.8, 45395.0], [56.9, 45518.0], [57.0, 45518.0], [57.1, 45519.0], [57.2, 45519.0], [57.3, 45679.0], [57.4, 45679.0], [57.5, 45789.0], [57.6, 45789.0], [57.7, 45808.0], [57.8, 45808.0], [57.9, 45888.0], [58.0, 45888.0], [58.1, 45900.0], [58.2, 45900.0], [58.3, 45921.0], [58.4, 45921.0], [58.5, 46339.0], [58.6, 46339.0], [58.7, 46555.0], [58.8, 46555.0], [58.9, 46632.0], [59.0, 46632.0], [59.1, 46866.0], [59.2, 46866.0], [59.3, 46879.0], [59.4, 46879.0], [59.5, 46933.0], [59.6, 46933.0], [59.7, 47169.0], [59.8, 47169.0], [59.9, 47270.0], [60.0, 47270.0], [60.1, 47473.0], [60.2, 47473.0], [60.3, 47489.0], [60.4, 47489.0], [60.5, 47493.0], [60.6, 47493.0], [60.7, 47779.0], [60.8, 47779.0], [60.9, 47818.0], [61.0, 47818.0], [61.1, 47872.0], [61.2, 47872.0], [61.3, 47874.0], [61.4, 47874.0], [61.5, 47905.0], [61.6, 47905.0], [61.7, 48014.0], [61.8, 48014.0], [61.9, 48023.0], [62.0, 48023.0], [62.1, 48198.0], [62.2, 48198.0], [62.3, 48314.0], [62.4, 48314.0], [62.5, 48334.0], [62.6, 48334.0], [62.7, 48530.0], [62.8, 48530.0], [62.9, 48531.0], [63.0, 48531.0], [63.1, 48736.0], [63.2, 48736.0], [63.3, 48737.0], [63.4, 48737.0], [63.5, 48748.0], [63.6, 48748.0], [63.7, 48759.0], [63.8, 48759.0], [63.9, 48930.0], [64.0, 48930.0], [64.1, 48952.0], [64.2, 48952.0], [64.3, 49013.0], [64.4, 49013.0], [64.5, 49040.0], [64.6, 49040.0], [64.7, 49067.0], [64.8, 49067.0], [64.9, 49112.0], [65.0, 49112.0], [65.1, 49219.0], [65.2, 49219.0], [65.3, 49273.0], [65.4, 49273.0], [65.5, 49330.0], [65.6, 49330.0], [65.7, 49403.0], [65.8, 49403.0], [65.9, 49438.0], [66.0, 49438.0], [66.1, 49527.0], [66.2, 49527.0], [66.3, 49568.0], [66.4, 49568.0], [66.5, 49731.0], [66.6, 49731.0], [66.7, 49739.0], [66.8, 49739.0], [66.9, 49781.0], [67.0, 49781.0], [67.1, 49798.0], [67.2, 49798.0], [67.3, 49867.0], [67.4, 49867.0], [67.5, 49886.0], [67.6, 49886.0], [67.7, 49957.0], [67.8, 49957.0], [67.9, 50045.0], [68.0, 50045.0], [68.1, 50089.0], [68.2, 50089.0], [68.3, 50097.0], [68.4, 50097.0], [68.5, 50139.0], [68.6, 50139.0], [68.7, 50249.0], [68.8, 50249.0], [68.9, 50454.0], [69.0, 50454.0], [69.1, 50456.0], [69.2, 50456.0], [69.3, 50501.0], [69.4, 50501.0], [69.5, 50677.0], [69.6, 50677.0], [69.7, 50724.0], [69.8, 50724.0], [69.9, 50883.0], [70.0, 50883.0], [70.1, 50919.0], [70.2, 50919.0], [70.3, 50928.0], [70.4, 50928.0], [70.5, 51121.0], [70.6, 51121.0], [70.7, 51237.0], [70.8, 51237.0], [70.9, 51293.0], [71.0, 51293.0], [71.1, 51298.0], [71.2, 51298.0], [71.3, 51302.0], [71.4, 51302.0], [71.5, 51382.0], [71.6, 51382.0], [71.7, 51481.0], [71.8, 51481.0], [71.9, 51590.0], [72.0, 51590.0], [72.1, 51594.0], [72.2, 51594.0], [72.3, 51603.0], [72.4, 51603.0], [72.5, 51613.0], [72.6, 51613.0], [72.7, 51712.0], [72.8, 51712.0], [72.9, 51713.0], [73.0, 51713.0], [73.1, 51804.0], [73.2, 51804.0], [73.3, 51805.0], [73.4, 51805.0], [73.5, 51814.0], [73.6, 51814.0], [73.7, 51818.0], [73.8, 51818.0], [73.9, 51914.0], [74.0, 51914.0], [74.1, 51927.0], [74.2, 51927.0], [74.3, 51942.0], [74.4, 51942.0], [74.5, 51944.0], [74.6, 51944.0], [74.7, 51951.0], [74.8, 51951.0], [74.9, 51985.0], [75.0, 51985.0], [75.1, 52011.0], [75.2, 52011.0], [75.3, 52020.0], [75.4, 52020.0], [75.5, 52115.0], [75.6, 52115.0], [75.7, 52117.0], [75.8, 52117.0], [75.9, 52133.0], [76.0, 52133.0], [76.1, 52215.0], [76.2, 52215.0], [76.3, 52309.0], [76.4, 52309.0], [76.5, 52314.0], [76.6, 52314.0], [76.7, 52415.0], [76.8, 52415.0], [76.9, 52431.0], [77.0, 52431.0], [77.1, 52510.0], [77.2, 52510.0], [77.3, 52540.0], [77.4, 52540.0], [77.5, 52630.0], [77.6, 52630.0], [77.7, 52631.0], [77.8, 52631.0], [77.9, 52640.0], [78.0, 52640.0], [78.1, 52735.0], [78.2, 52735.0], [78.3, 52739.0], [78.4, 52739.0], [78.5, 52743.0], [78.6, 52743.0], [78.7, 52920.0], [78.8, 52920.0], [78.9, 52930.0], [79.0, 52930.0], [79.1, 52935.0], [79.2, 52935.0], [79.3, 53031.0], [79.4, 53031.0], [79.5, 53045.0], [79.6, 53045.0], [79.7, 53142.0], [79.8, 53142.0], [79.9, 53154.0], [80.0, 53154.0], [80.1, 53234.0], [80.2, 53234.0], [80.3, 53247.0], [80.4, 53247.0], [80.5, 53341.0], [80.6, 53341.0], [80.7, 53451.0], [80.8, 53451.0], [80.9, 53556.0], [81.0, 53556.0], [81.1, 53567.0], [81.2, 53567.0], [81.3, 53789.0], [81.4, 53789.0], [81.5, 53852.0], [81.6, 53852.0], [81.7, 53860.0], [81.8, 53860.0], [81.9, 53870.0], [82.0, 53870.0], [82.1, 53871.0], [82.2, 53871.0], [82.3, 53924.0], [82.4, 53924.0], [82.5, 53956.0], [82.6, 53956.0], [82.7, 54157.0], [82.8, 54157.0], [82.9, 54167.0], [83.0, 54167.0], [83.1, 54168.0], [83.2, 54168.0], [83.3, 54260.0], [83.4, 54260.0], [83.5, 54260.0], [83.6, 54260.0], [83.7, 54265.0], [83.8, 54265.0], [83.9, 54272.0], [84.0, 54272.0], [84.1, 54273.0], [84.2, 54273.0], [84.3, 54351.0], [84.4, 54351.0], [84.5, 54351.0], [84.6, 54351.0], [84.7, 54360.0], [84.8, 54360.0], [84.9, 54364.0], [85.0, 54364.0], [85.1, 54376.0], [85.2, 54376.0], [85.3, 54469.0], [85.4, 54469.0], [85.5, 54476.0], [85.6, 54476.0], [85.7, 54479.0], [85.8, 54479.0], [85.9, 54480.0], [86.0, 54480.0], [86.1, 54482.0], [86.2, 54482.0], [86.3, 54489.0], [86.4, 54489.0], [86.5, 54586.0], [86.6, 54586.0], [86.7, 54594.0], [86.8, 54594.0], [86.9, 54606.0], [87.0, 54606.0], [87.1, 54609.0], [87.2, 54609.0], [87.3, 54705.0], [87.4, 54705.0], [87.5, 54713.0], [87.6, 54713.0], [87.7, 54811.0], [87.8, 54811.0], [87.9, 54815.0], [88.0, 54815.0], [88.1, 54821.0], [88.2, 54821.0], [88.3, 54826.0], [88.4, 54826.0], [88.5, 54827.0], [88.6, 54827.0], [88.7, 54832.0], [88.8, 54832.0], [88.9, 54851.0], [89.0, 54851.0], [89.1, 54903.0], [89.2, 54903.0], [89.3, 54914.0], [89.4, 54914.0], [89.5, 54927.0], [89.6, 54927.0], [89.7, 54945.0], [89.8, 54945.0], [89.9, 55009.0], [90.0, 55009.0], [90.1, 55018.0], [90.2, 55018.0], [90.3, 55020.0], [90.4, 55020.0], [90.5, 55020.0], [90.6, 55020.0], [90.7, 55109.0], [90.8, 55109.0], [90.9, 55119.0], [91.0, 55119.0], [91.1, 55129.0], [91.2, 55129.0], [91.3, 55219.0], [91.4, 55219.0], [91.5, 55226.0], [91.6, 55226.0], [91.7, 55318.0], [91.8, 55318.0], [91.9, 55320.0], [92.0, 55320.0], [92.1, 55324.0], [92.2, 55324.0], [92.3, 55442.0], [92.4, 55442.0], [92.5, 55455.0], [92.6, 55455.0], [92.7, 55522.0], [92.8, 55522.0], [92.9, 55532.0], [93.0, 55532.0], [93.1, 55533.0], [93.2, 55533.0], [93.3, 55534.0], [93.4, 55534.0], [93.5, 55545.0], [93.6, 55545.0], [93.7, 55619.0], [93.8, 55619.0], [93.9, 55715.0], [94.0, 55715.0], [94.1, 55721.0], [94.2, 55721.0], [94.3, 55730.0], [94.4, 55730.0], [94.5, 55955.0], [94.6, 55955.0], [94.7, 55958.0], [94.8, 55958.0], [94.9, 55959.0], [95.0, 55959.0], [95.1, 55980.0], [95.2, 55980.0], [95.3, 56077.0], [95.4, 56077.0], [95.5, 56079.0], [95.6, 56079.0], [95.7, 56100.0], [95.8, 56100.0], [95.9, 56146.0], [96.0, 56146.0], [96.1, 56206.0], [96.2, 56206.0], [96.3, 56209.0], [96.4, 56209.0], [96.5, 56264.0], [96.6, 56264.0], [96.7, 56274.0], [96.8, 56274.0], [96.9, 56277.0], [97.0, 56277.0], [97.1, 56279.0], [97.2, 56279.0], [97.3, 56362.0], [97.4, 56362.0], [97.5, 56371.0], [97.6, 56371.0], [97.7, 56382.0], [97.8, 56382.0], [97.9, 56382.0], [98.0, 56382.0], [98.1, 56382.0], [98.2, 56382.0], [98.3, 56384.0], [98.4, 56384.0], [98.5, 56396.0], [98.6, 56396.0], [98.7, 56398.0], [98.8, 56398.0], [98.9, 56399.0], [99.0, 56399.0], [99.1, 56411.0], [99.2, 56411.0], [99.3, 56411.0], [99.4, 56411.0], [99.5, 56490.0], [99.6, 56490.0], [99.7, 56508.0], [99.8, 56508.0], [99.9, 56514.0], [100.0, 56514.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 8800.0, "maxY": 16.0, "series": [{"data": [[35500.0, 1.0], [36700.0, 1.0], [37100.0, 3.0], [38500.0, 2.0], [36900.0, 1.0], [37300.0, 4.0], [37900.0, 1.0], [38100.0, 2.0], [38700.0, 1.0], [39300.0, 2.0], [40500.0, 1.0], [40900.0, 1.0], [39700.0, 1.0], [40100.0, 1.0], [41300.0, 1.0], [41100.0, 1.0], [42500.0, 2.0], [42700.0, 1.0], [41500.0, 2.0], [41700.0, 1.0], [41900.0, 1.0], [42100.0, 1.0], [42300.0, 3.0], [43300.0, 1.0], [43100.0, 1.0], [43500.0, 1.0], [44700.0, 1.0], [44900.0, 1.0], [44100.0, 1.0], [43900.0, 1.0], [45300.0, 3.0], [45500.0, 2.0], [45700.0, 1.0], [45900.0, 2.0], [46300.0, 1.0], [46500.0, 1.0], [46900.0, 1.0], [47100.0, 1.0], [47700.0, 1.0], [47900.0, 1.0], [48100.0, 1.0], [48300.0, 2.0], [48500.0, 2.0], [48700.0, 4.0], [48900.0, 2.0], [49100.0, 1.0], [49300.0, 1.0], [49500.0, 2.0], [49700.0, 4.0], [49900.0, 1.0], [50100.0, 1.0], [50500.0, 1.0], [50700.0, 1.0], [50900.0, 2.0], [51100.0, 1.0], [51500.0, 2.0], [51300.0, 2.0], [51700.0, 2.0], [51900.0, 6.0], [52100.0, 3.0], [52300.0, 2.0], [52500.0, 2.0], [52700.0, 3.0], [52900.0, 3.0], [53100.0, 2.0], [53500.0, 2.0], [53300.0, 1.0], [53700.0, 1.0], [53900.0, 2.0], [54100.0, 3.0], [54300.0, 5.0], [54500.0, 2.0], [54700.0, 2.0], [54900.0, 4.0], [55100.0, 3.0], [55300.0, 3.0], [55500.0, 5.0], [55700.0, 3.0], [55900.0, 4.0], [56100.0, 2.0], [56300.0, 9.0], [56500.0, 2.0], [8800.0, 2.0], [8900.0, 1.0], [9000.0, 8.0], [9100.0, 3.0], [9200.0, 10.0], [9300.0, 8.0], [9400.0, 8.0], [9500.0, 10.0], [9600.0, 10.0], [9700.0, 4.0], [9800.0, 13.0], [9900.0, 9.0], [10000.0, 6.0], [10100.0, 6.0], [10200.0, 7.0], [10300.0, 6.0], [10400.0, 7.0], [10500.0, 16.0], [10600.0, 7.0], [10700.0, 10.0], [10800.0, 8.0], [10900.0, 11.0], [11000.0, 9.0], [11100.0, 8.0], [11200.0, 8.0], [11300.0, 5.0], [36400.0, 2.0], [36600.0, 1.0], [37400.0, 2.0], [37800.0, 2.0], [38000.0, 1.0], [38800.0, 1.0], [39400.0, 1.0], [39000.0, 1.0], [40800.0, 2.0], [39600.0, 1.0], [39800.0, 1.0], [40200.0, 1.0], [40400.0, 1.0], [42800.0, 1.0], [41000.0, 1.0], [41200.0, 2.0], [41400.0, 1.0], [43000.0, 1.0], [42000.0, 1.0], [42200.0, 1.0], [42400.0, 1.0], [43400.0, 2.0], [43200.0, 2.0], [44200.0, 2.0], [44400.0, 2.0], [43600.0, 1.0], [43800.0, 2.0], [44000.0, 2.0], [45600.0, 1.0], [45800.0, 2.0], [46600.0, 1.0], [46800.0, 2.0], [47200.0, 1.0], [47400.0, 3.0], [47800.0, 3.0], [48000.0, 2.0], [49000.0, 3.0], [49200.0, 2.0], [49400.0, 2.0], [49800.0, 2.0], [50000.0, 3.0], [50200.0, 1.0], [50400.0, 2.0], [50600.0, 1.0], [50800.0, 1.0], [51400.0, 1.0], [51200.0, 3.0], [51600.0, 2.0], [51800.0, 4.0], [52000.0, 2.0], [52200.0, 1.0], [52400.0, 2.0], [52600.0, 3.0], [53000.0, 2.0], [53200.0, 2.0], [53400.0, 1.0], [53800.0, 4.0], [54200.0, 5.0], [54400.0, 6.0], [54600.0, 2.0], [54800.0, 7.0], [55000.0, 4.0], [55200.0, 2.0], [55400.0, 2.0], [55600.0, 1.0], [56200.0, 6.0], [56000.0, 2.0], [56400.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 56500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 200.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 300.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 300.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 200.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 250.57200000000032, "minX": 1.62332718E12, "maxY": 250.57200000000032, "series": [{"data": [[1.62332718E12, 250.57200000000032]], "isOverall": false, "label": "testingadw", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62332718E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8821.0, "minX": 2.0, "maxY": 56508.0, "series": [{"data": [[2.0, 56448.0], [3.0, 56384.0], [4.0, 56490.0], [5.0, 56362.0], [6.0, 56411.0], [7.0, 56411.0], [8.0, 56398.0], [9.0, 56274.0], [10.0, 56382.0], [11.0, 56399.0], [12.0, 56396.0], [13.0, 56508.0], [14.0, 56382.0], [15.0, 56371.0], [16.0, 56279.0], [17.0, 56277.0], [18.0, 56146.0], [19.0, 56264.0], [20.0, 56100.0], [21.0, 55959.0], [22.0, 56209.0], [23.0, 56079.0], [24.0, 56077.0], [25.0, 56206.0], [26.0, 55955.0], [27.0, 55958.0], [28.0, 55730.0], [29.0, 55721.0], [30.0, 55980.0], [31.0, 55715.0], [33.0, 55545.0], [32.0, 55619.0], [34.0, 55532.0], [37.0, 55455.0], [36.0, 55533.5], [39.0, 55522.0], [38.0, 55442.0], [41.0, 55320.0], [40.0, 55324.0], [43.0, 55226.0], [42.0, 55318.0], [45.0, 55129.0], [44.0, 55219.0], [47.0, 55109.0], [46.0, 55119.0], [49.0, 55018.0], [48.0, 55020.0], [51.0, 55009.0], [50.0, 55020.0], [52.0, 54945.0], [55.0, 54903.0], [54.0, 54920.5], [57.0, 54832.0], [56.0, 54851.0], [59.0, 54821.0], [58.0, 54826.0], [61.0, 54819.0], [63.0, 54713.0], [62.0, 54815.0], [67.0, 54594.0], [66.0, 54609.0], [65.0, 54606.0], [64.0, 54705.0], [71.0, 54482.0], [70.0, 54479.0], [69.0, 54489.0], [68.0, 54586.0], [75.0, 54376.0], [74.0, 54469.0], [73.0, 54476.0], [72.0, 54480.0], [79.0, 54351.0], [78.0, 54351.0], [77.0, 54364.0], [76.0, 54360.0], [83.0, 54260.0], [82.0, 54265.0], [81.0, 54272.0], [80.0, 54273.0], [87.0, 54157.0], [86.0, 54168.0], [85.0, 54167.0], [84.0, 54260.0], [91.0, 53924.0], [90.0, 53870.0], [89.0, 53871.0], [88.0, 53956.0], [95.0, 53567.0], [94.0, 53789.0], [93.0, 53852.0], [92.0, 53860.0], [99.0, 53247.0], [98.0, 53341.0], [97.0, 53451.0], [96.0, 53556.0], [103.0, 53045.0], [102.0, 53142.0], [101.0, 53154.0], [100.0, 53234.0], [107.0, 52920.0], [106.0, 52930.0], [105.0, 52935.0], [104.0, 53031.0], [111.0, 52640.0], [110.0, 52735.0], [109.0, 52739.0], [108.0, 52743.0], [115.0, 52510.0], [114.0, 52540.0], [113.0, 52630.5], [119.0, 52309.0], [118.0, 52314.0], [117.0, 52415.0], [116.0, 52431.0], [123.0, 52115.0], [122.0, 52117.0], [121.0, 52133.0], [120.0, 52215.0], [127.0, 51951.0], [126.0, 51985.0], [125.0, 52011.0], [124.0, 52020.0], [135.0, 51804.5], [133.0, 51814.0], [132.0, 51818.0], [131.0, 51927.0], [130.0, 51914.0], [129.0, 51942.0], [128.0, 51944.0], [143.0, 51382.0], [142.0, 51481.0], [141.0, 51590.0], [140.0, 51594.0], [139.0, 51603.0], [138.0, 51613.0], [137.0, 51712.0], [136.0, 51713.0], [151.0, 50919.0], [150.0, 50928.0], [149.0, 50883.0], [148.0, 51121.0], [147.0, 51237.0], [146.0, 51293.0], [145.0, 51298.0], [144.0, 51302.0], [159.0, 50097.0], [158.0, 50139.0], [157.0, 50249.0], [156.0, 50501.0], [155.0, 50454.0], [154.0, 50456.0], [153.0, 50724.0], [152.0, 50677.0], [167.0, 49781.0], [166.0, 49739.0], [165.0, 49798.0], [164.0, 49886.0], [163.0, 49867.0], [162.0, 49957.0], [161.0, 50089.0], [160.0, 50045.0], [175.0, 49219.0], [174.0, 49273.0], [173.0, 49330.0], [172.0, 49403.0], [171.0, 49438.0], [170.0, 49568.0], [169.0, 49527.0], [168.0, 49731.0], [183.0, 48748.0], [182.0, 48759.0], [181.0, 48941.0], [179.0, 49026.5], [177.0, 49067.0], [176.0, 49112.0], [191.0, 48023.0], [190.0, 48198.0], [189.0, 48334.0], [188.0, 48314.0], [187.0, 48530.0], [186.0, 48531.0], [185.0, 48737.0], [184.0, 48736.0], [199.0, 47489.0], [198.0, 47473.0], [197.0, 47779.0], [196.0, 47818.0], [195.0, 47889.5], [193.0, 47872.0], [192.0, 48014.0], [207.0, 46555.0], [206.0, 46632.0], [205.0, 46866.0], [204.0, 46879.0], [203.0, 46933.0], [202.0, 47169.0], [201.0, 47270.0], [200.0, 47493.0], [215.0, 45518.0], [214.0, 45519.0], [213.0, 45808.0], [212.0, 45789.0], [211.0, 45900.0], [210.0, 45921.0], [209.0, 45888.0], [208.0, 46339.0], [223.0, 44442.0], [222.0, 44470.0], [221.0, 44748.0], [220.0, 44966.0], [219.0, 45305.0], [218.0, 45388.0], [217.0, 45395.0], [216.0, 45679.0], [231.0, 43826.0], [230.0, 43870.0], [229.0, 43949.0], [228.0, 44048.0], [227.0, 44039.0], [226.0, 44143.0], [225.0, 44264.0], [224.0, 44245.0], [239.0, 43130.0], [238.0, 43210.0], [237.0, 43224.0], [236.0, 43325.0], [235.0, 43409.0], [234.0, 43431.0], [233.0, 43521.0], [232.0, 43637.0], [247.0, 42391.0], [246.0, 42397.0], [245.0, 42469.0], [244.0, 42589.0], [243.0, 42595.0], [242.0, 42795.0], [241.0, 42828.0], [240.0, 43002.0], [255.0, 41558.0], [254.0, 41554.0], [253.0, 41740.0], [252.0, 41985.0], [251.0, 42094.0], [250.0, 42147.0], [249.0, 42204.0], [248.0, 42319.0], [270.0, 39784.0], [271.0, 39679.0], [269.0, 39815.0], [268.0, 40111.0], [267.0, 40213.0], [266.0, 40430.0], [265.0, 40521.0], [264.0, 40845.0], [263.0, 40846.0], [257.0, 41372.0], [256.0, 41482.0], [259.0, 41236.0], [258.0, 41276.0], [262.0, 40929.0], [261.0, 41013.0], [260.0, 41115.0], [286.0, 37430.0], [287.0, 37408.0], [285.0, 37809.0], [284.0, 37846.0], [283.0, 37922.0], [282.0, 38003.0], [281.0, 38132.0], [280.0, 38124.0], [279.0, 38532.0], [273.0, 39387.0], [272.0, 39446.0], [275.0, 39067.0], [274.0, 39373.0], [278.0, 38544.0], [277.0, 38742.0], [276.0, 38837.0], [302.0, 11349.0], [303.0, 11317.0], [301.0, 11350.0], [300.0, 35534.0], [299.0, 36429.0], [298.0, 36453.0], [297.0, 36646.0], [296.0, 36766.0], [295.0, 36979.0], [289.0, 37376.0], [288.0, 37388.0], [291.0, 37308.0], [290.0, 37319.0], [294.0, 37102.0], [293.0, 37100.0], [292.0, 37121.0], [318.0, 11186.0], [319.0, 11144.0], [317.0, 11196.0], [316.0, 11189.0], [315.0, 11205.0], [314.0, 11196.0], [313.0, 11199.0], [312.0, 11225.0], [311.0, 11230.5], [305.0, 11301.0], [304.0, 11315.0], [307.0, 11278.0], [306.0, 11266.0], [309.0, 11231.0], [308.0, 11258.0], [334.0, 10956.0], [335.0, 10942.0], [333.0, 10967.0], [332.0, 10994.0], [331.0, 10996.0], [330.0, 11022.0], [329.0, 11058.0], [328.0, 11059.0], [327.0, 11063.0], [321.0, 11122.0], [320.0, 11139.0], [323.0, 11084.0], [322.0, 11082.0], [326.0, 11067.0], [325.0, 11069.0], [324.0, 11081.0], [350.0, 10783.0], [351.0, 10780.0], [349.0, 10840.0], [348.0, 10828.0], [347.0, 10850.0], [346.0, 10866.0], [345.0, 10869.0], [344.0, 10861.0], [343.0, 10898.0], [336.0, 10936.0], [339.0, 10932.0], [338.0, 10949.5], [342.0, 10902.0], [341.0, 10896.0], [340.0, 10929.0], [366.0, 10607.0], [367.0, 10549.0], [365.0, 10611.0], [364.0, 10614.0], [363.0, 10664.0], [362.0, 10664.0], [361.0, 10681.0], [360.0, 10683.0], [359.0, 10733.0], [353.0, 10775.0], [352.0, 10779.0], [355.0, 10761.0], [354.0, 10781.0], [358.0, 10722.5], [356.0, 10726.0], [382.0, 10522.0], [383.0, 10510.0], [381.0, 10529.0], [380.0, 10489.0], [379.0, 10538.0], [378.0, 10525.0], [377.0, 10533.0], [376.0, 10551.0], [375.0, 10511.0], [369.0, 10575.0], [368.0, 10580.0], [371.0, 10553.0], [370.0, 10596.0], [374.0, 10558.0], [373.0, 10546.0], [372.0, 10563.0], [397.0, 10316.0], [398.0, 10240.0], [396.0, 10315.0], [387.0, 10436.0], [386.0, 10457.0], [385.0, 10457.0], [384.0, 10468.0], [395.0, 10276.0], [394.0, 10332.0], [393.0, 10315.0], [392.0, 10288.0], [391.0, 10370.0], [390.0, 10365.0], [389.0, 10404.0], [388.0, 10428.0], [414.0, 10030.0], [415.0, 9998.0], [413.0, 10037.0], [412.0, 10052.0], [411.0, 10067.0], [410.0, 10072.0], [409.0, 10081.0], [408.0, 10111.0], [407.0, 10115.0], [401.0, 10212.0], [400.0, 10220.0], [403.0, 10197.0], [402.0, 10212.0], [406.0, 10118.0], [405.0, 10129.0], [404.0, 10156.0], [430.0, 9826.0], [431.0, 9828.0], [429.0, 9835.0], [428.0, 9846.0], [427.0, 9858.0], [426.0, 9861.0], [425.0, 9865.0], [424.0, 9868.0], [423.0, 9900.0], [419.0, 9946.0], [418.0, 9954.0], [417.0, 9984.0], [416.0, 9991.0], [421.0, 9928.5], [446.0, 9643.0], [447.0, 9637.0], [445.0, 9661.0], [444.0, 9664.0], [443.0, 9667.0], [442.0, 9680.0], [441.0, 9682.0], [440.0, 9708.0], [439.0, 9719.0], [433.0, 9825.0], [432.0, 9823.0], [435.0, 9801.0], [434.0, 9815.0], [438.0, 9726.0], [437.0, 9778.0], [436.0, 9802.0], [462.0, 9464.0], [463.0, 9456.0], [461.0, 9474.0], [460.0, 9502.0], [459.0, 9502.0], [458.0, 9506.0], [457.0, 9518.0], [456.0, 9520.0], [455.0, 9531.0], [449.0, 9616.0], [448.0, 9633.0], [451.0, 9570.0], [450.0, 9613.0], [454.0, 9547.0], [453.0, 9551.0], [452.0, 9565.0], [476.0, 9308.5], [474.0, 9311.0], [473.0, 9323.0], [472.0, 9335.0], [471.0, 9336.5], [465.0, 9435.0], [464.0, 9443.0], [469.0, 9383.0], [468.0, 9409.0], [467.0, 9420.0], [466.0, 9430.0], [494.0, 9054.0], [495.0, 9017.0], [493.0, 9071.0], [492.0, 9088.0], [491.0, 9088.0], [490.0, 9098.0], [489.0, 9114.0], [488.0, 9135.0], [487.0, 9167.0], [482.0, 9276.4], [480.0, 9279.0], [486.0, 9210.5], [500.0, 8821.0], [499.0, 8882.0], [498.0, 8933.0], [497.0, 9084.0], [496.0, 9002.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[250.57200000000032, 33573.68800000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1875.0, "minX": 1.62332718E12, "maxY": 134584.1, "series": [{"data": [[1.62332718E12, 134584.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62332718E12, 1875.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62332718E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 33573.68800000002, "minX": 1.62332718E12, "maxY": 33573.68800000002, "series": [{"data": [[1.62332718E12, 33573.68800000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62332718E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 33291.34400000001, "minX": 1.62332718E12, "maxY": 33291.34400000001, "series": [{"data": [[1.62332718E12, 33291.34400000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62332718E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4743.556000000009, "minX": 1.62332718E12, "maxY": 4743.556000000009, "series": [{"data": [[1.62332718E12, 4743.556000000009]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62332718E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35534.0, "minX": 1.62332718E12, "maxY": 56514.0, "series": [{"data": [[1.62332718E12, 56514.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62332718E12, 55720.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62332718E12, 56489.21]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62332718E12, 56278.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62332718E12, 35534.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62332718E12, 50901.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62332718E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9167.0, "minX": 1.0, "maxY": 56396.0, "series": [{"data": [[8.0, 39731.5], [10.0, 41649.0], [40.0, 54657.0], [11.0, 45679.0], [12.0, 42695.0], [14.0, 48753.5], [15.0, 56396.0], [1.0, 35534.0], [16.0, 53856.0], [18.0, 49760.0], [5.0, 38742.0], [20.0, 52687.5], [6.0, 44456.0], [26.0, 51809.5], [7.0, 46866.0], [29.0, 55721.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[84.0, 9825.5], [89.0, 10866.0], [27.0, 9167.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8877.0, "minX": 1.0, "maxY": 56110.0, "series": [{"data": [[8.0, 39452.0], [10.0, 41363.5], [40.0, 54374.0], [11.0, 45401.0], [12.0, 42416.5], [14.0, 48464.0], [15.0, 56110.0], [1.0, 35247.0], [16.0, 53578.5], [18.0, 49482.5], [5.0, 38461.0], [20.0, 52408.5], [6.0, 44176.5], [26.0, 51524.5], [7.0, 46578.0], [29.0, 55446.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[84.0, 9540.0], [89.0, 10585.0], [27.0, 8877.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.62332712E12, "maxY": 8.333333333333334, "series": [{"data": [[1.62332712E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62332712E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.62332718E12, "maxY": 5.0, "series": [{"data": [[1.62332718E12, 5.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62332718E12, 3.3333333333333335]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62332718E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.62332718E12, "maxY": 5.0, "series": [{"data": [[1.62332718E12, 3.3333333333333335]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.62332718E12, 5.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62332718E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.62332718E12, "maxY": 5.0, "series": [{"data": [[1.62332718E12, 5.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62332718E12, 3.3333333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62332718E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

