/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8841.0, "minX": 0.0, "maxY": 20099.0, "series": [{"data": [[0.0, 8841.0], [0.1, 8841.0], [0.2, 8885.0], [0.3, 8885.0], [0.4, 8913.0], [0.5, 8913.0], [0.6, 8913.0], [0.7, 8913.0], [0.8, 8920.0], [0.9, 8920.0], [1.0, 9005.0], [1.1, 9005.0], [1.2, 9011.0], [1.3, 9011.0], [1.4, 9019.0], [1.5, 9019.0], [1.6, 9031.0], [1.7, 9031.0], [1.8, 9047.0], [1.9, 9047.0], [2.0, 9050.0], [2.1, 9050.0], [2.2, 9070.0], [2.3, 9070.0], [2.4, 9072.0], [2.5, 9072.0], [2.6, 9076.0], [2.7, 9076.0], [2.8, 9076.0], [2.9, 9099.0], [3.0, 9099.0], [3.1, 9125.0], [3.2, 9125.0], [3.3, 9128.0], [3.4, 9128.0], [3.5, 9131.0], [3.6, 9131.0], [3.7, 9153.0], [3.8, 9153.0], [3.9, 9181.0], [4.0, 9181.0], [4.1, 9225.0], [4.2, 9225.0], [4.3, 9239.0], [4.4, 9239.0], [4.5, 9249.0], [4.6, 9249.0], [4.7, 9258.0], [4.8, 9258.0], [4.9, 9264.0], [5.0, 9264.0], [5.1, 9302.0], [5.2, 9302.0], [5.3, 9314.0], [5.4, 9314.0], [5.5, 9359.0], [5.6, 9359.0], [5.7, 9365.0], [5.8, 9365.0], [5.9, 9369.0], [6.0, 9369.0], [6.1, 9373.0], [6.2, 9373.0], [6.3, 9388.0], [6.4, 9388.0], [6.5, 9399.0], [6.6, 9399.0], [6.7, 9412.0], [6.8, 9412.0], [6.9, 9422.0], [7.0, 9422.0], [7.1, 9475.0], [7.2, 9475.0], [7.3, 9513.0], [7.4, 9513.0], [7.5, 9526.0], [7.6, 9526.0], [7.7, 9529.0], [7.8, 9529.0], [7.9, 9532.0], [8.0, 9532.0], [8.1, 9571.0], [8.2, 9571.0], [8.3, 9580.0], [8.4, 9580.0], [8.5, 9585.0], [8.6, 9585.0], [8.7, 9608.0], [8.8, 9629.0], [8.9, 9629.0], [9.0, 9640.0], [9.1, 9640.0], [9.2, 9641.0], [9.3, 9641.0], [9.4, 9681.0], [9.5, 9681.0], [9.6, 9687.0], [9.7, 9687.0], [9.8, 9694.0], [9.9, 9694.0], [10.0, 9703.0], [10.1, 9703.0], [10.2, 9728.0], [10.3, 9728.0], [10.4, 9732.0], [10.5, 9732.0], [10.6, 9756.0], [10.7, 9756.0], [10.8, 9767.0], [10.9, 9767.0], [11.0, 9779.0], [11.1, 9779.0], [11.2, 9812.0], [11.3, 9812.0], [11.4, 9813.0], [11.5, 9813.0], [11.6, 9814.0], [11.7, 9814.0], [11.8, 9834.0], [11.9, 9834.0], [12.0, 9846.0], [12.1, 9846.0], [12.2, 9861.0], [12.3, 9861.0], [12.4, 9887.0], [12.5, 9887.0], [12.6, 9916.0], [12.7, 9916.0], [12.8, 9927.0], [12.9, 9927.0], [13.0, 9951.0], [13.1, 9951.0], [13.2, 9963.0], [13.3, 9963.0], [13.4, 9983.0], [13.5, 9983.0], [13.6, 9992.0], [13.7, 9992.0], [13.8, 10011.0], [13.9, 10011.0], [14.0, 10030.0], [14.1, 10030.0], [14.2, 10031.0], [14.3, 10031.0], [14.4, 10063.0], [14.5, 10063.0], [14.6, 10079.0], [14.7, 10079.0], [14.8, 10084.0], [14.9, 10084.0], [15.0, 10118.0], [15.1, 10118.0], [15.2, 10126.0], [15.3, 10126.0], [15.4, 10130.0], [15.5, 10130.0], [15.6, 10138.0], [15.7, 10138.0], [15.8, 10163.0], [15.9, 10163.0], [16.0, 10165.0], [16.1, 10165.0], [16.2, 10171.0], [16.3, 10171.0], [16.4, 10197.0], [16.5, 10197.0], [16.6, 10214.0], [16.7, 10214.0], [16.8, 10216.0], [16.9, 10216.0], [17.0, 10232.0], [17.1, 10232.0], [17.2, 10245.0], [17.3, 10245.0], [17.4, 10247.0], [17.5, 10247.0], [17.6, 10250.0], [17.7, 10250.0], [17.8, 10269.0], [17.9, 10269.0], [18.0, 10294.0], [18.1, 10294.0], [18.2, 10314.0], [18.3, 10314.0], [18.4, 10318.0], [18.5, 10318.0], [18.6, 10334.0], [18.7, 10334.0], [18.8, 10349.0], [18.9, 10349.0], [19.0, 10391.0], [19.1, 10391.0], [19.2, 10393.0], [19.3, 10393.0], [19.4, 10426.0], [19.5, 10426.0], [19.6, 10449.0], [19.7, 10449.0], [19.8, 10461.0], [19.9, 10461.0], [20.0, 10462.0], [20.1, 10462.0], [20.2, 10469.0], [20.3, 10469.0], [20.4, 10470.0], [20.5, 10470.0], [20.6, 10502.0], [20.7, 10502.0], [20.8, 10520.0], [20.9, 10520.0], [21.0, 10525.0], [21.1, 10525.0], [21.2, 10526.0], [21.3, 10526.0], [21.4, 10546.0], [21.5, 10546.0], [21.6, 10546.0], [21.7, 10546.0], [21.8, 10573.0], [21.9, 10573.0], [22.0, 10578.0], [22.1, 10578.0], [22.2, 10607.0], [22.3, 10607.0], [22.4, 10643.0], [22.5, 10643.0], [22.6, 10682.0], [22.7, 10682.0], [22.8, 10686.0], [22.9, 10686.0], [23.0, 10690.0], [23.1, 10690.0], [23.2, 10696.0], [23.3, 10696.0], [23.4, 10720.0], [23.5, 10720.0], [23.6, 10738.0], [23.7, 10738.0], [23.8, 10738.0], [23.9, 10738.0], [24.0, 10741.0], [24.1, 10741.0], [24.2, 10744.0], [24.3, 10744.0], [24.4, 10796.0], [24.5, 10796.0], [24.6, 10801.0], [24.7, 10801.0], [24.8, 10824.0], [24.9, 10824.0], [25.0, 10824.0], [25.1, 10824.0], [25.2, 10834.0], [25.3, 10834.0], [25.4, 10837.0], [25.5, 10837.0], [25.6, 10850.0], [25.7, 10850.0], [25.8, 10866.0], [25.9, 10866.0], [26.0, 10887.0], [26.1, 10887.0], [26.2, 10898.0], [26.3, 10898.0], [26.4, 10906.0], [26.5, 10906.0], [26.6, 10939.0], [26.7, 10939.0], [26.8, 10953.0], [26.9, 10953.0], [27.0, 10963.0], [27.1, 10963.0], [27.2, 10990.0], [27.3, 10990.0], [27.4, 11023.0], [27.5, 11023.0], [27.6, 11054.0], [27.7, 11054.0], [27.8, 11061.0], [27.9, 11061.0], [28.0, 11065.0], [28.1, 11065.0], [28.2, 11067.0], [28.3, 11067.0], [28.4, 11080.0], [28.5, 11080.0], [28.6, 11093.0], [28.7, 11093.0], [28.8, 11181.0], [28.9, 11181.0], [29.0, 11182.0], [29.1, 11182.0], [29.2, 11184.0], [29.3, 11184.0], [29.4, 11188.0], [29.5, 11188.0], [29.6, 11189.0], [29.7, 11189.0], [29.8, 11194.0], [29.9, 11194.0], [30.0, 11221.0], [30.1, 11221.0], [30.2, 11248.0], [30.3, 11248.0], [30.4, 11248.0], [30.5, 11248.0], [30.6, 11257.0], [30.7, 11257.0], [30.8, 11258.0], [30.9, 11258.0], [31.0, 11292.0], [31.1, 11292.0], [31.2, 11317.0], [31.3, 11317.0], [31.4, 11329.0], [31.5, 11329.0], [31.6, 11330.0], [31.7, 11330.0], [31.8, 11361.0], [31.9, 11361.0], [32.0, 11365.0], [32.1, 11365.0], [32.2, 11387.0], [32.3, 11387.0], [32.4, 11408.0], [32.5, 11408.0], [32.6, 11417.0], [32.7, 11417.0], [32.8, 11426.0], [32.9, 11426.0], [33.0, 11449.0], [33.1, 11449.0], [33.2, 11450.0], [33.3, 11450.0], [33.4, 11450.0], [33.5, 11450.0], [33.6, 11483.0], [33.7, 11483.0], [33.8, 11500.0], [33.9, 11500.0], [34.0, 11502.0], [34.1, 11502.0], [34.2, 11516.0], [34.3, 11516.0], [34.4, 11544.0], [34.5, 11544.0], [34.6, 11558.0], [34.7, 11558.0], [34.8, 11562.0], [34.9, 11562.0], [35.0, 11579.0], [35.1, 11579.0], [35.2, 11621.0], [35.3, 11621.0], [35.4, 11669.0], [35.5, 11669.0], [35.6, 11671.0], [35.7, 11671.0], [35.8, 11690.0], [35.9, 11690.0], [36.0, 11695.0], [36.1, 11695.0], [36.2, 11706.0], [36.3, 11706.0], [36.4, 11752.0], [36.5, 11752.0], [36.6, 11782.0], [36.7, 11782.0], [36.8, 11784.0], [36.9, 11784.0], [37.0, 11788.0], [37.1, 11788.0], [37.2, 11793.0], [37.3, 11793.0], [37.4, 11800.0], [37.5, 11800.0], [37.6, 11801.0], [37.7, 11801.0], [37.8, 11809.0], [37.9, 11809.0], [38.0, 11817.0], [38.1, 11817.0], [38.2, 11819.0], [38.3, 11819.0], [38.4, 11826.0], [38.5, 11826.0], [38.6, 11828.0], [38.7, 11828.0], [38.8, 11828.0], [38.9, 11836.0], [39.0, 11836.0], [39.1, 11865.0], [39.2, 11865.0], [39.3, 11865.0], [39.4, 11865.0], [39.5, 11871.0], [39.6, 11871.0], [39.7, 11893.0], [39.8, 11893.0], [39.9, 11911.0], [40.0, 11911.0], [40.1, 11921.0], [40.2, 11921.0], [40.3, 11948.0], [40.4, 11948.0], [40.5, 11956.0], [40.6, 11956.0], [40.7, 11960.0], [40.8, 11960.0], [40.9, 11981.0], [41.0, 11981.0], [41.1, 11981.0], [41.2, 11981.0], [41.3, 11987.0], [41.4, 11987.0], [41.5, 11996.0], [41.6, 11996.0], [41.7, 12064.0], [41.8, 12064.0], [41.9, 12074.0], [42.0, 12074.0], [42.1, 12083.0], [42.2, 12083.0], [42.3, 12086.0], [42.4, 12086.0], [42.5, 12090.0], [42.6, 12090.0], [42.7, 12117.0], [42.8, 12117.0], [42.9, 12148.0], [43.0, 12148.0], [43.1, 12153.0], [43.2, 12153.0], [43.3, 12176.0], [43.4, 12176.0], [43.5, 12186.0], [43.6, 12186.0], [43.7, 12187.0], [43.8, 12187.0], [43.9, 12192.0], [44.0, 12192.0], [44.1, 12203.0], [44.2, 12203.0], [44.3, 12237.0], [44.4, 12237.0], [44.5, 12250.0], [44.6, 12250.0], [44.7, 12263.0], [44.8, 12263.0], [44.9, 12272.0], [45.0, 12272.0], [45.1, 12280.0], [45.2, 12280.0], [45.3, 12307.0], [45.4, 12307.0], [45.5, 12308.0], [45.6, 12308.0], [45.7, 12324.0], [45.8, 12324.0], [45.9, 12333.0], [46.0, 12333.0], [46.1, 12350.0], [46.2, 12350.0], [46.3, 12393.0], [46.4, 12393.0], [46.5, 12397.0], [46.6, 12397.0], [46.7, 12413.0], [46.8, 12413.0], [46.9, 12415.0], [47.0, 12415.0], [47.1, 12425.0], [47.2, 12425.0], [47.3, 12438.0], [47.4, 12438.0], [47.5, 12444.0], [47.6, 12444.0], [47.7, 12460.0], [47.8, 12460.0], [47.9, 12493.0], [48.0, 12493.0], [48.1, 12504.0], [48.2, 12504.0], [48.3, 12512.0], [48.4, 12512.0], [48.5, 12521.0], [48.6, 12521.0], [48.7, 12555.0], [48.8, 12555.0], [48.9, 12570.0], [49.0, 12570.0], [49.1, 12589.0], [49.2, 12589.0], [49.3, 12590.0], [49.4, 12590.0], [49.5, 12605.0], [49.6, 12605.0], [49.7, 12617.0], [49.8, 12617.0], [49.9, 12619.0], [50.0, 12619.0], [50.1, 12620.0], [50.2, 12620.0], [50.3, 12643.0], [50.4, 12643.0], [50.5, 12661.0], [50.6, 12661.0], [50.7, 12752.0], [50.8, 12752.0], [50.9, 12776.0], [51.0, 12776.0], [51.1, 12784.0], [51.2, 12784.0], [51.3, 12787.0], [51.4, 12787.0], [51.5, 12844.0], [51.6, 12844.0], [51.7, 12861.0], [51.8, 12861.0], [51.9, 12883.0], [52.0, 12883.0], [52.1, 12888.0], [52.2, 12888.0], [52.3, 12890.0], [52.4, 12890.0], [52.5, 12900.0], [52.6, 12900.0], [52.7, 12929.0], [52.8, 12929.0], [52.9, 12943.0], [53.0, 12943.0], [53.1, 12980.0], [53.2, 12980.0], [53.3, 12988.0], [53.4, 12988.0], [53.5, 13041.0], [53.6, 13041.0], [53.7, 13062.0], [53.8, 13062.0], [53.9, 13066.0], [54.0, 13066.0], [54.1, 13078.0], [54.2, 13078.0], [54.3, 13079.0], [54.4, 13079.0], [54.5, 13094.0], [54.6, 13094.0], [54.7, 13112.0], [54.8, 13112.0], [54.9, 13114.0], [55.0, 13114.0], [55.1, 13119.0], [55.2, 13119.0], [55.3, 13157.0], [55.4, 13157.0], [55.5, 13173.0], [55.6, 13173.0], [55.7, 13181.0], [55.8, 13181.0], [55.9, 13184.0], [56.0, 13184.0], [56.1, 13185.0], [56.2, 13185.0], [56.3, 13211.0], [56.4, 13211.0], [56.5, 13239.0], [56.6, 13239.0], [56.7, 13286.0], [56.8, 13286.0], [56.9, 13350.0], [57.0, 13350.0], [57.1, 13359.0], [57.2, 13359.0], [57.3, 13364.0], [57.4, 13364.0], [57.5, 13411.0], [57.6, 13411.0], [57.7, 13416.0], [57.8, 13416.0], [57.9, 13464.0], [58.0, 13464.0], [58.1, 13481.0], [58.2, 13481.0], [58.3, 13501.0], [58.4, 13501.0], [58.5, 13515.0], [58.6, 13515.0], [58.7, 13520.0], [58.8, 13520.0], [58.9, 13531.0], [59.0, 13531.0], [59.1, 13561.0], [59.2, 13561.0], [59.3, 13570.0], [59.4, 13570.0], [59.5, 13572.0], [59.6, 13572.0], [59.7, 13627.0], [59.8, 13627.0], [59.9, 13676.0], [60.0, 13676.0], [60.1, 13699.0], [60.2, 13699.0], [60.3, 13716.0], [60.4, 13716.0], [60.5, 13753.0], [60.6, 13753.0], [60.7, 13814.0], [60.8, 13814.0], [60.9, 13820.0], [61.0, 13820.0], [61.1, 13858.0], [61.2, 13858.0], [61.3, 13866.0], [61.4, 13866.0], [61.5, 13915.0], [61.6, 13915.0], [61.7, 14012.0], [61.8, 14012.0], [61.9, 14065.0], [62.0, 14065.0], [62.1, 14086.0], [62.2, 14086.0], [62.3, 14095.0], [62.4, 14095.0], [62.5, 14107.0], [62.6, 14107.0], [62.7, 14109.0], [62.8, 14109.0], [62.9, 14112.0], [63.0, 14112.0], [63.1, 14113.0], [63.2, 14113.0], [63.3, 14151.0], [63.4, 14151.0], [63.5, 14248.0], [63.6, 14248.0], [63.7, 14343.0], [63.8, 14343.0], [63.9, 14359.0], [64.0, 14359.0], [64.1, 14367.0], [64.2, 14367.0], [64.3, 14393.0], [64.4, 14393.0], [64.5, 14396.0], [64.6, 14396.0], [64.7, 14415.0], [64.8, 14415.0], [64.9, 14505.0], [65.0, 14505.0], [65.1, 14514.0], [65.2, 14514.0], [65.3, 14558.0], [65.4, 14558.0], [65.5, 14569.0], [65.6, 14569.0], [65.7, 14584.0], [65.8, 14584.0], [65.9, 14661.0], [66.0, 14661.0], [66.1, 14689.0], [66.2, 14689.0], [66.3, 14757.0], [66.4, 14757.0], [66.5, 14789.0], [66.6, 14789.0], [66.7, 14795.0], [66.8, 14795.0], [66.9, 14829.0], [67.0, 14829.0], [67.1, 14863.0], [67.2, 14863.0], [67.3, 14868.0], [67.4, 14868.0], [67.5, 14872.0], [67.6, 14872.0], [67.7, 14921.0], [67.8, 14921.0], [67.9, 14929.0], [68.0, 14929.0], [68.1, 14973.0], [68.2, 14973.0], [68.3, 14974.0], [68.4, 14974.0], [68.5, 15038.0], [68.6, 15038.0], [68.7, 15064.0], [68.8, 15064.0], [68.9, 15157.0], [69.0, 15157.0], [69.1, 15158.0], [69.2, 15158.0], [69.3, 15160.0], [69.4, 15160.0], [69.5, 15191.0], [69.6, 15191.0], [69.7, 15202.0], [69.8, 15202.0], [69.9, 15230.0], [70.0, 15230.0], [70.1, 15265.0], [70.2, 15265.0], [70.3, 15296.0], [70.4, 15296.0], [70.5, 15390.0], [70.6, 15390.0], [70.7, 15403.0], [70.8, 15403.0], [70.9, 15415.0], [71.0, 15415.0], [71.1, 15425.0], [71.2, 15425.0], [71.3, 15458.0], [71.4, 15458.0], [71.5, 15515.0], [71.6, 15515.0], [71.7, 15516.0], [71.8, 15516.0], [71.9, 15533.0], [72.0, 15533.0], [72.1, 15596.0], [72.2, 15596.0], [72.3, 15601.0], [72.4, 15601.0], [72.5, 15609.0], [72.6, 15609.0], [72.7, 15618.0], [72.8, 15618.0], [72.9, 15634.0], [73.0, 15634.0], [73.1, 15687.0], [73.2, 15687.0], [73.3, 15705.0], [73.4, 15705.0], [73.5, 15774.0], [73.6, 15774.0], [73.7, 15781.0], [73.8, 15781.0], [73.9, 15793.0], [74.0, 15793.0], [74.1, 15838.0], [74.2, 15838.0], [74.3, 15848.0], [74.4, 15848.0], [74.5, 16005.0], [74.6, 16005.0], [74.7, 16022.0], [74.8, 16022.0], [74.9, 16086.0], [75.0, 16086.0], [75.1, 16261.0], [75.2, 16261.0], [75.3, 16296.0], [75.4, 16296.0], [75.5, 16298.0], [75.6, 16298.0], [75.7, 16317.0], [75.8, 16317.0], [75.9, 16345.0], [76.0, 16345.0], [76.1, 16455.0], [76.2, 16455.0], [76.3, 16481.0], [76.4, 16481.0], [76.5, 16494.0], [76.6, 16494.0], [76.7, 16692.0], [76.8, 16692.0], [76.9, 16710.0], [77.0, 16710.0], [77.1, 16863.0], [77.2, 16863.0], [77.3, 16865.0], [77.4, 16865.0], [77.5, 16914.0], [77.6, 16914.0], [77.7, 16955.0], [77.8, 16955.0], [77.9, 16980.0], [78.0, 16980.0], [78.1, 17056.0], [78.2, 17056.0], [78.3, 17069.0], [78.4, 17069.0], [78.5, 17086.0], [78.6, 17086.0], [78.7, 17088.0], [78.8, 17088.0], [78.9, 17090.0], [79.0, 17090.0], [79.1, 17094.0], [79.2, 17094.0], [79.3, 17125.0], [79.4, 17125.0], [79.5, 17164.0], [79.6, 17164.0], [79.7, 17173.0], [79.8, 17173.0], [79.9, 17201.0], [80.0, 17201.0], [80.1, 17235.0], [80.2, 17235.0], [80.3, 17240.0], [80.4, 17240.0], [80.5, 17247.0], [80.6, 17247.0], [80.7, 17253.0], [80.8, 17253.0], [80.9, 17261.0], [81.0, 17261.0], [81.1, 17277.0], [81.2, 17277.0], [81.3, 17355.0], [81.4, 17355.0], [81.5, 17364.0], [81.6, 17364.0], [81.7, 17373.0], [81.8, 17373.0], [81.9, 17423.0], [82.0, 17423.0], [82.1, 17475.0], [82.2, 17475.0], [82.3, 17479.0], [82.4, 17479.0], [82.5, 17491.0], [82.6, 17491.0], [82.7, 17494.0], [82.8, 17494.0], [82.9, 17505.0], [83.0, 17505.0], [83.1, 17590.0], [83.2, 17590.0], [83.3, 17607.0], [83.4, 17607.0], [83.5, 17685.0], [83.6, 17685.0], [83.7, 17687.0], [83.8, 17687.0], [83.9, 17720.0], [84.0, 17720.0], [84.1, 17773.0], [84.2, 17773.0], [84.3, 17782.0], [84.4, 17782.0], [84.5, 17798.0], [84.6, 17798.0], [84.7, 17810.0], [84.8, 17810.0], [84.9, 17810.0], [85.0, 17810.0], [85.1, 17951.0], [85.2, 17951.0], [85.3, 17960.0], [85.4, 17960.0], [85.5, 17987.0], [85.6, 17987.0], [85.7, 17996.0], [85.8, 17996.0], [85.9, 18016.0], [86.0, 18016.0], [86.1, 18026.0], [86.2, 18026.0], [86.3, 18027.0], [86.4, 18027.0], [86.5, 18048.0], [86.6, 18048.0], [86.7, 18134.0], [86.8, 18134.0], [86.9, 18205.0], [87.0, 18205.0], [87.1, 18207.0], [87.2, 18207.0], [87.3, 18243.0], [87.4, 18243.0], [87.5, 18506.0], [87.6, 18506.0], [87.7, 18616.0], [87.8, 18616.0], [87.9, 18921.0], [88.0, 18921.0], [88.1, 18928.0], [88.2, 18928.0], [88.3, 18955.0], [88.4, 18955.0], [88.5, 19020.0], [88.6, 19020.0], [88.7, 19079.0], [88.8, 19079.0], [88.9, 19086.0], [89.0, 19086.0], [89.1, 19089.0], [89.2, 19089.0], [89.3, 19092.0], [89.4, 19092.0], [89.5, 19108.0], [89.6, 19108.0], [89.7, 19112.0], [89.8, 19112.0], [89.9, 19114.0], [90.0, 19114.0], [90.1, 19118.0], [90.2, 19118.0], [90.3, 19192.0], [90.4, 19192.0], [90.5, 19214.0], [90.6, 19214.0], [90.7, 19215.0], [90.8, 19215.0], [90.9, 19301.0], [91.0, 19301.0], [91.1, 19310.0], [91.2, 19310.0], [91.3, 19311.0], [91.4, 19311.0], [91.5, 19315.0], [91.6, 19315.0], [91.7, 19316.0], [91.8, 19316.0], [91.9, 19403.0], [92.0, 19403.0], [92.1, 19405.0], [92.2, 19405.0], [92.3, 19417.0], [92.4, 19417.0], [92.5, 19531.0], [92.6, 19531.0], [92.7, 19532.0], [92.8, 19532.0], [92.9, 19536.0], [93.0, 19536.0], [93.1, 19538.0], [93.2, 19538.0], [93.3, 19539.0], [93.4, 19539.0], [93.5, 19542.0], [93.6, 19542.0], [93.7, 19543.0], [93.8, 19543.0], [93.9, 19552.0], [94.0, 19552.0], [94.1, 19556.0], [94.2, 19556.0], [94.3, 19564.0], [94.4, 19564.0], [94.5, 19569.0], [94.6, 19569.0], [94.7, 19573.0], [94.8, 19573.0], [94.9, 19590.0], [95.0, 19590.0], [95.1, 19630.0], [95.2, 19630.0], [95.3, 19637.0], [95.4, 19637.0], [95.5, 19638.0], [95.6, 19638.0], [95.7, 19640.0], [95.8, 19640.0], [95.9, 19640.0], [96.0, 19640.0], [96.1, 19648.0], [96.2, 19648.0], [96.3, 19651.0], [96.4, 19651.0], [96.5, 19660.0], [96.6, 19660.0], [96.7, 19663.0], [96.8, 19663.0], [96.9, 19679.0], [97.0, 19679.0], [97.1, 19689.0], [97.2, 19689.0], [97.3, 19702.0], [97.4, 19702.0], [97.5, 19706.0], [97.6, 19706.0], [97.7, 19713.0], [97.8, 19713.0], [97.9, 19802.0], [98.0, 19802.0], [98.1, 19819.0], [98.2, 19819.0], [98.3, 19824.0], [98.4, 19824.0], [98.5, 19913.0], [98.6, 19913.0], [98.7, 19915.0], [98.8, 19915.0], [98.9, 19916.0], [99.0, 19916.0], [99.1, 19918.0], [99.2, 19918.0], [99.3, 19930.0], [99.4, 19930.0], [99.5, 19931.0], [99.6, 19931.0], [99.7, 19933.0], [99.8, 19933.0], [99.9, 20099.0], [100.0, 20099.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 8800.0, "maxY": 13.0, "series": [{"data": [[8900.0, 3.0], [8800.0, 2.0], [9000.0, 10.0], [9100.0, 5.0], [9200.0, 5.0], [9300.0, 8.0], [9400.0, 3.0], [9500.0, 7.0], [9600.0, 7.0], [9700.0, 6.0], [9800.0, 7.0], [9900.0, 6.0], [10000.0, 6.0], [10100.0, 8.0], [10200.0, 8.0], [10300.0, 6.0], [10400.0, 6.0], [10500.0, 8.0], [10600.0, 6.0], [10700.0, 6.0], [10800.0, 9.0], [10900.0, 5.0], [11000.0, 7.0], [11100.0, 6.0], [11200.0, 6.0], [11300.0, 6.0], [11400.0, 7.0], [11500.0, 7.0], [11600.0, 5.0], [11700.0, 6.0], [11800.0, 12.0], [11900.0, 9.0], [12000.0, 5.0], [12200.0, 6.0], [12100.0, 7.0], [12300.0, 7.0], [12400.0, 7.0], [12600.0, 6.0], [12500.0, 7.0], [12700.0, 4.0], [12800.0, 5.0], [12900.0, 5.0], [13100.0, 8.0], [13200.0, 3.0], [13000.0, 6.0], [13300.0, 3.0], [13400.0, 4.0], [13500.0, 7.0], [13600.0, 3.0], [13700.0, 2.0], [13800.0, 4.0], [13900.0, 1.0], [14000.0, 4.0], [14100.0, 5.0], [14200.0, 1.0], [14300.0, 5.0], [14400.0, 1.0], [14500.0, 5.0], [14600.0, 2.0], [14700.0, 3.0], [14800.0, 4.0], [14900.0, 4.0], [15000.0, 2.0], [15100.0, 4.0], [15200.0, 4.0], [15300.0, 1.0], [15400.0, 4.0], [15500.0, 4.0], [15600.0, 5.0], [15700.0, 4.0], [15800.0, 2.0], [16000.0, 3.0], [16200.0, 3.0], [16300.0, 2.0], [17200.0, 7.0], [16400.0, 3.0], [16600.0, 1.0], [16700.0, 1.0], [16800.0, 2.0], [16900.0, 3.0], [17000.0, 6.0], [17100.0, 3.0], [17300.0, 3.0], [17400.0, 5.0], [17500.0, 2.0], [17600.0, 3.0], [17700.0, 4.0], [17800.0, 2.0], [18000.0, 4.0], [17900.0, 4.0], [18100.0, 1.0], [18200.0, 3.0], [18500.0, 1.0], [18600.0, 1.0], [18900.0, 3.0], [19000.0, 5.0], [19100.0, 5.0], [19200.0, 2.0], [19300.0, 5.0], [19400.0, 3.0], [19500.0, 13.0], [19600.0, 11.0], [19700.0, 3.0], [19900.0, 7.0], [19800.0, 3.0], [20000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 239.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 261.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 261.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 239.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 61.04958677685951, "minX": 1.62248826E12, "maxY": 311.05277044854876, "series": [{"data": [[1.62248826E12, 311.05277044854876], [1.62248832E12, 61.04958677685951]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248832E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8841.0, "minX": 1.0, "maxY": 20099.0, "series": [{"data": [[2.0, 19931.0], [3.0, 19930.0], [4.0, 19918.0], [5.0, 19933.0], [6.0, 19916.0], [7.0, 19915.0], [8.0, 19824.0], [9.0, 19802.0], [10.0, 19819.0], [12.0, 19704.0], [13.0, 19913.0], [14.0, 19679.0], [15.0, 19660.0], [16.0, 19638.0], [17.0, 19630.0], [18.0, 19640.0], [19.0, 19564.0], [20.0, 19556.0], [22.0, 19581.5], [23.0, 19539.0], [24.0, 19713.0], [25.0, 19689.0], [26.0, 19552.0], [27.0, 19532.0], [28.0, 19538.0], [29.0, 19651.0], [30.0, 19648.0], [31.0, 19663.0], [33.0, 19640.0], [32.0, 19637.0], [35.0, 19543.0], [34.0, 19569.0], [37.0, 19536.0], [36.0, 19542.0], [39.0, 19417.0], [38.0, 19531.0], [41.0, 19403.0], [40.0, 19405.0], [43.0, 19315.0], [42.0, 19316.0], [45.0, 19310.0], [44.0, 19311.0], [47.0, 19192.0], [46.0, 19301.0], [49.0, 19214.0], [48.0, 19215.0], [50.0, 19118.0], [53.0, 19112.0], [52.0, 19111.0], [55.0, 19089.0], [54.0, 19092.0], [57.0, 19079.0], [56.0, 19086.0], [59.0, 19020.0], [58.0, 18955.0], [61.0, 18921.0], [60.0, 18928.0], [63.0, 18506.0], [62.0, 18616.0], [67.0, 18134.0], [66.0, 18207.0], [65.0, 18205.0], [64.0, 18243.0], [71.0, 17951.0], [70.0, 18026.0], [69.0, 18048.0], [68.0, 18027.0], [75.0, 18016.0], [74.0, 17987.0], [73.0, 17960.0], [72.0, 17996.0], [79.0, 17720.0], [78.0, 17810.0], [77.0, 17798.0], [76.0, 17782.0], [83.0, 17685.0], [82.0, 17730.0], [80.0, 17810.0], [87.0, 17590.0], [86.0, 17607.0], [85.0, 17505.0], [84.0, 17475.0], [91.0, 17491.0], [90.0, 17451.0], [88.0, 17494.0], [95.0, 17355.0], [94.0, 17364.0], [93.0, 17247.0], [92.0, 17373.0], [99.0, 17277.0], [98.0, 17261.0], [97.0, 17201.0], [96.0, 17253.0], [103.0, 17088.0], [102.0, 17240.0], [101.0, 17235.0], [100.0, 17164.0], [107.0, 17094.0], [106.0, 17086.0], [105.0, 17125.0], [104.0, 17173.0], [111.0, 16955.0], [110.0, 17073.0], [108.0, 17069.0], [115.0, 16863.0], [114.0, 16865.0], [113.0, 16914.0], [112.0, 16980.0], [119.0, 16494.0], [118.0, 16481.0], [117.0, 16692.0], [116.0, 16710.0], [123.0, 16298.0], [122.0, 16345.0], [121.0, 16455.0], [120.0, 16317.0], [127.0, 16022.0], [126.0, 16086.0], [125.0, 16261.0], [124.0, 16296.0], [135.0, 15687.0], [134.0, 15793.0], [133.0, 15781.0], [132.0, 15705.0], [131.0, 15838.0], [130.0, 15774.0], [129.0, 15848.0], [128.0, 16005.0], [142.0, 15533.0], [141.0, 15601.0], [140.0, 15596.0], [139.0, 15613.5], [137.0, 15515.0], [136.0, 15634.0], [151.0, 15296.0], [150.0, 15191.0], [149.0, 15230.0], [148.0, 15425.0], [147.0, 15403.0], [146.0, 15458.0], [145.0, 15390.0], [144.0, 15465.5], [159.0, 14974.0], [158.0, 15064.0], [157.0, 14973.0], [156.0, 15157.0], [155.0, 15160.0], [154.0, 15202.0], [153.0, 15158.0], [152.0, 15265.0], [167.0, 14868.0], [166.0, 14789.0], [165.0, 14829.0], [164.0, 14795.0], [163.0, 14872.0], [162.0, 14921.0], [161.0, 14929.0], [160.0, 15038.0], [175.0, 14558.0], [174.0, 14584.0], [173.0, 14505.0], [172.0, 14514.0], [171.0, 14661.0], [170.0, 14757.0], [169.0, 14689.0], [168.0, 14863.0], [183.0, 14248.0], [182.0, 14359.0], [181.0, 14393.0], [180.0, 14343.0], [179.0, 14396.0], [178.0, 14367.0], [177.0, 14415.0], [176.0, 14569.0], [191.0, 14095.0], [190.0, 14113.0], [189.0, 14109.0], [188.0, 14112.0], [187.0, 14086.0], [186.0, 14151.0], [185.0, 14065.0], [184.0, 14107.0], [199.0, 13753.0], [198.0, 13699.0], [197.0, 13820.0], [196.0, 13866.0], [195.0, 13858.0], [194.0, 13814.0], [193.0, 13915.0], [192.0, 14012.0], [207.0, 13515.0], [206.0, 13561.0], [205.0, 13531.0], [204.0, 13676.0], [203.0, 13464.0], [202.0, 13716.0], [201.0, 13627.0], [200.0, 13481.0], [215.0, 13185.0], [214.0, 13350.0], [213.0, 13239.0], [212.0, 13501.0], [211.0, 13286.0], [210.0, 13572.0], [209.0, 13520.0], [208.0, 13570.0], [223.0, 13112.0], [222.0, 13114.0], [221.0, 13173.0], [220.0, 13364.0], [219.0, 13181.0], [218.0, 13416.0], [217.0, 13385.0], [231.0, 12988.0], [230.0, 13184.0], [229.0, 13041.0], [228.0, 13062.0], [227.0, 13066.0], [226.0, 13078.0], [225.0, 13079.0], [224.0, 13094.0], [239.0, 12883.0], [238.0, 12888.0], [237.0, 13119.0], [236.0, 12900.0], [235.0, 12929.0], [234.0, 13211.0], [233.0, 13068.5], [247.0, 12890.0], [246.0, 12752.0], [245.0, 12776.0], [244.0, 12838.0], [241.0, 12844.0], [240.0, 12861.0], [255.0, 12570.0], [254.0, 12589.0], [253.0, 12590.0], [252.0, 12605.0], [251.0, 12617.0], [250.0, 12619.0], [249.0, 12620.0], [248.0, 12661.0], [270.0, 12333.0], [271.0, 12324.0], [269.0, 12350.0], [268.0, 12397.0], [267.0, 12413.0], [266.0, 12415.0], [265.0, 12425.0], [264.0, 12438.0], [263.0, 12444.0], [257.0, 12521.0], [256.0, 12555.0], [259.0, 12504.0], [258.0, 12512.0], [262.0, 12460.0], [261.0, 12493.0], [260.0, 12643.0], [286.0, 12117.0], [287.0, 12090.0], [285.0, 12148.0], [284.0, 12153.0], [283.0, 12176.0], [282.0, 12187.0], [281.0, 12186.0], [280.0, 12192.0], [279.0, 12393.0], [273.0, 12308.0], [272.0, 12307.0], [275.0, 12272.0], [274.0, 12280.0], [278.0, 12237.0], [277.0, 12250.0], [276.0, 12263.0], [302.0, 11828.0], [303.0, 11819.0], [301.0, 11865.0], [291.0, 12203.0], [290.0, 12064.0], [289.0, 12074.0], [288.0, 12086.0], [299.0, 12083.0], [298.0, 11921.0], [297.0, 11948.0], [296.0, 11956.0], [295.0, 11960.0], [294.0, 11981.0], [293.0, 11987.0], [292.0, 11996.0], [318.0, 11695.0], [319.0, 11752.0], [317.0, 11784.0], [316.0, 11788.0], [315.0, 11793.0], [314.0, 11826.0], [313.0, 11809.0], [312.0, 11836.0], [311.0, 11911.0], [305.0, 11817.0], [304.0, 11981.0], [307.0, 11800.0], [306.0, 11801.0], [310.0, 11871.0], [309.0, 11893.0], [308.0, 11782.0], [334.0, 11450.0], [335.0, 11450.0], [333.0, 11449.0], [332.0, 11500.0], [331.0, 11502.0], [330.0, 11544.0], [329.0, 11558.0], [328.0, 11516.0], [327.0, 11483.0], [321.0, 11706.0], [320.0, 11690.0], [323.0, 11669.0], [322.0, 11671.0], [326.0, 11562.0], [325.0, 11579.0], [324.0, 11621.0], [350.0, 11248.0], [351.0, 11221.0], [349.0, 11257.0], [348.0, 11223.5], [346.0, 11248.0], [345.0, 11330.0], [344.0, 11304.5], [342.0, 11329.0], [337.0, 11417.0], [336.0, 11365.0], [339.0, 11387.0], [338.0, 11426.0], [341.0, 11361.0], [340.0, 11408.0], [366.0, 10837.0], [367.0, 10906.0], [365.0, 10963.0], [364.0, 10990.0], [363.0, 11023.0], [362.0, 11061.0], [361.0, 11065.0], [360.0, 11054.0], [359.0, 11067.0], [353.0, 11181.0], [352.0, 11194.0], [355.0, 11080.0], [354.0, 11188.0], [358.0, 11093.0], [357.0, 11182.0], [356.0, 11184.0], [381.0, 10686.0], [382.0, 10720.0], [380.0, 10744.0], [371.0, 10887.0], [370.0, 10898.0], [369.0, 10939.0], [368.0, 10953.0], [379.0, 10738.0], [378.0, 10801.0], [377.0, 10796.0], [376.0, 10824.0], [375.0, 10824.0], [374.0, 10850.0], [373.0, 10834.0], [372.0, 10866.0], [387.0, 10682.0], [398.0, 10470.0], [397.0, 10523.666666666666], [386.0, 10696.0], [385.0, 10690.0], [384.0, 10739.5], [394.0, 10502.0], [393.0, 10546.0], [392.0, 10546.0], [391.0, 10573.0], [390.0, 10578.0], [389.0, 10607.0], [388.0, 10643.0], [414.0, 10232.0], [415.0, 10214.0], [413.0, 10245.0], [412.0, 10247.0], [411.0, 10269.0], [410.0, 10294.0], [409.0, 10314.0], [408.0, 10318.0], [407.0, 10334.0], [400.0, 10465.0], [403.0, 10420.0], [401.0, 10462.0], [406.0, 10349.0], [405.0, 10393.0], [404.0, 10426.0], [430.0, 9992.0], [431.0, 10063.0], [429.0, 10011.0], [428.0, 10118.0], [427.0, 10031.0], [426.0, 10165.0], [425.0, 10079.0], [424.0, 10171.0], [423.0, 10084.0], [417.0, 10163.0], [416.0, 10216.0], [419.0, 10138.0], [418.0, 10250.0], [422.0, 10130.0], [421.0, 10197.0], [420.0, 10126.0], [446.0, 9812.0], [447.0, 9813.0], [445.0, 9728.0], [444.0, 9732.0], [443.0, 9779.0], [442.0, 9887.0], [441.0, 9814.0], [440.0, 9834.0], [439.0, 9846.0], [433.0, 9927.0], [432.0, 10030.0], [435.0, 9983.0], [434.0, 9916.0], [438.0, 9861.0], [437.0, 9951.0], [436.0, 9963.0], [462.0, 9571.0], [463.0, 9475.0], [461.0, 9585.0], [460.0, 9513.0], [459.0, 9529.0], [458.0, 9640.0], [457.0, 9580.0], [456.0, 9681.0], [455.0, 9687.0], [449.0, 9767.0], [448.0, 9694.0], [451.0, 9641.0], [450.0, 9756.0], [454.0, 9608.0], [453.0, 9703.0], [452.0, 9629.0], [477.0, 9239.0], [478.0, 9314.0], [476.0, 9153.0], [466.0, 9422.0], [465.0, 9532.0], [464.0, 9526.0], [475.0, 9249.0], [474.0, 9359.0], [473.0, 9373.0], [472.0, 9388.0], [471.0, 9412.0], [470.0, 9365.0], [469.0, 9369.0], [468.0, 9350.5], [494.0, 9005.0], [495.0, 9076.0], [493.0, 8920.0], [492.0, 9011.0], [491.0, 9019.0], [490.0, 9099.0], [489.0, 9128.0], [488.0, 9072.0], [487.0, 9181.0], [481.0, 9264.0], [480.0, 9178.0], [483.0, 9070.0], [482.0, 9258.0], [486.0, 9031.0], [485.0, 9125.0], [484.0, 9050.0], [500.0, 8913.0], [498.0, 8841.0], [497.0, 8966.0], [1.0, 20099.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[250.55199999999996, 13554.073999999995]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 459.8, "minX": 1.62248826E12, "maxY": 105989.58333333333, "series": [{"data": [[1.62248826E12, 105989.58333333333], [1.62248832E12, 30368.983333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62248826E12, 1440.2], [1.62248832E12, 459.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248832E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 11981.601583113455, "minX": 1.62248826E12, "maxY": 18479.4214876033, "series": [{"data": [[1.62248826E12, 11981.601583113455], [1.62248832E12, 18479.4214876033]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248832E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 11698.833773087063, "minX": 1.62248826E12, "maxY": 18197.776859504127, "series": [{"data": [[1.62248826E12, 11698.833773087063], [1.62248832E12, 18197.776859504127]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248832E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6195.451187335093, "minX": 1.62248826E12, "maxY": 6469.966942148759, "series": [{"data": [[1.62248826E12, 6195.451187335093], [1.62248832E12, 6469.966942148759]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248832E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10130.0, "minX": 1.62248826E12, "maxY": 20099.0, "series": [{"data": [[1.62248826E12, 16345.0], [1.62248832E12, 20099.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62248826E12, 15681.7], [1.62248832E12, 19711.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62248826E12, 16325.73], [1.62248832E12, 20062.48]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62248826E12, 15997.149999999998], [1.62248832E12, 19915.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62248826E12, 10130.0], [1.62248832E12, 16317.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62248826E12, 14038.5], [1.62248832E12, 18921.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248832E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9112.0, "minX": 22.0, "maxY": 19640.0, "series": [{"data": [[65.0, 10214.0], [64.0, 10850.0], [41.0, 19640.0], [43.0, 13817.0], [22.0, 19110.0], [27.0, 15687.0], [28.0, 17804.0], [58.0, 13031.0], [30.0, 15806.5], [62.0, 11669.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[65.0, 9853.5], [64.0, 10834.0], [43.0, 13239.0], [58.0, 12597.5], [30.0, 9112.0], [62.0, 11828.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 65.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8829.0, "minX": 22.0, "maxY": 19359.0, "series": [{"data": [[65.0, 9934.0], [64.0, 10569.0], [41.0, 19359.0], [43.0, 13540.0], [22.0, 18826.5], [27.0, 15405.0], [28.0, 17517.0], [58.0, 12747.0], [30.0, 15528.0], [62.0, 11392.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[65.0, 9569.0], [64.0, 10550.0], [43.0, 12960.0], [58.0, 12319.0], [30.0, 8829.0], [62.0, 11549.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 65.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.62248826E12, "maxY": 8.333333333333334, "series": [{"data": [[1.62248826E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248826E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.62248826E12, "maxY": 3.9833333333333334, "series": [{"data": [[1.62248826E12, 2.3333333333333335], [1.62248832E12, 2.0166666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62248826E12, 3.9833333333333334]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248832E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.62248826E12, "maxY": 3.9833333333333334, "series": [{"data": [[1.62248826E12, 3.9833333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.62248826E12, 2.3333333333333335], [1.62248832E12, 2.0166666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248832E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.62248826E12, "maxY": 3.9833333333333334, "series": [{"data": [[1.62248826E12, 2.3333333333333335], [1.62248832E12, 2.0166666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62248826E12, 3.9833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248832E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

