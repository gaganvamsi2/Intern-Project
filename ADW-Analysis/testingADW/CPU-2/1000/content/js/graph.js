/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11551.0, "minX": 0.0, "maxY": 64281.0, "series": [{"data": [[0.0, 11551.0], [0.1, 11557.0], [0.2, 11568.0], [0.3, 11568.0], [0.4, 11592.0], [0.5, 11640.0], [0.6, 11643.0], [0.7, 11645.0], [0.8, 11649.0], [0.9, 11661.0], [1.0, 11691.0], [1.1, 11691.0], [1.2, 11703.0], [1.3, 11711.0], [1.4, 11711.0], [1.5, 11751.0], [1.6, 11775.0], [1.7, 11797.0], [1.8, 11802.0], [1.9, 11849.0], [2.0, 11865.0], [2.1, 11891.0], [2.2, 11946.0], [2.3, 11972.0], [2.4, 11973.0], [2.5, 11985.0], [2.6, 12005.0], [2.7, 12037.0], [2.8, 12066.0], [2.9, 12067.0], [3.0, 12099.0], [3.1, 12118.0], [3.2, 12130.0], [3.3, 12178.0], [3.4, 12267.0], [3.5, 12279.0], [3.6, 12299.0], [3.7, 12309.0], [3.8, 12386.0], [3.9, 12391.0], [4.0, 12422.0], [4.1, 12430.0], [4.2, 12430.0], [4.3, 12455.0], [4.4, 12492.0], [4.5, 12502.0], [4.6, 12506.0], [4.7, 12540.0], [4.8, 12541.0], [4.9, 12550.0], [5.0, 12553.0], [5.1, 12584.0], [5.2, 12589.0], [5.3, 12591.0], [5.4, 12600.0], [5.5, 12629.0], [5.6, 12657.0], [5.7, 12659.0], [5.8, 12680.0], [5.9, 12701.0], [6.0, 12721.0], [6.1, 12734.0], [6.2, 12800.0], [6.3, 12800.0], [6.4, 12830.0], [6.5, 12866.0], [6.6, 12868.0], [6.7, 12885.0], [6.8, 12908.0], [6.9, 12922.0], [7.0, 12930.0], [7.1, 12952.0], [7.2, 12954.0], [7.3, 12971.0], [7.4, 12976.0], [7.5, 12982.0], [7.6, 12989.0], [7.7, 12997.0], [7.8, 12999.0], [7.9, 13002.0], [8.0, 13009.0], [8.1, 13030.0], [8.2, 13052.0], [8.3, 13065.0], [8.4, 13073.0], [8.5, 13076.0], [8.6, 13104.0], [8.7, 13116.0], [8.8, 13156.0], [8.9, 13169.0], [9.0, 13181.0], [9.1, 13186.0], [9.2, 13195.0], [9.3, 13224.0], [9.4, 13261.0], [9.5, 13273.0], [9.6, 13287.0], [9.7, 13287.0], [9.8, 13294.0], [9.9, 13311.0], [10.0, 13312.0], [10.1, 13314.0], [10.2, 13326.0], [10.3, 13345.0], [10.4, 13352.0], [10.5, 13367.0], [10.6, 13386.0], [10.7, 13390.0], [10.8, 13418.0], [10.9, 13435.0], [11.0, 13484.0], [11.1, 13493.0], [11.2, 13500.0], [11.3, 13518.0], [11.4, 13547.0], [11.5, 13578.0], [11.6, 13591.0], [11.7, 13594.0], [11.8, 13605.0], [11.9, 13612.0], [12.0, 13637.0], [12.1, 13689.0], [12.2, 13719.0], [12.3, 13754.0], [12.4, 13763.0], [12.5, 13788.0], [12.6, 13796.0], [12.7, 13797.0], [12.8, 13800.0], [12.9, 13802.0], [13.0, 13828.0], [13.1, 13838.0], [13.2, 13876.0], [13.3, 13887.0], [13.4, 13893.0], [13.5, 13907.0], [13.6, 13934.0], [13.7, 13963.0], [13.8, 13975.0], [13.9, 13977.0], [14.0, 13978.0], [14.1, 14014.0], [14.2, 14058.0], [14.3, 14062.0], [14.4, 14066.0], [14.5, 14070.0], [14.6, 14076.0], [14.7, 14085.0], [14.8, 14089.0], [14.9, 14092.0], [15.0, 14110.0], [15.1, 14113.0], [15.2, 14132.0], [15.3, 14149.0], [15.4, 14152.0], [15.5, 14165.0], [15.6, 14204.0], [15.7, 14211.0], [15.8, 14219.0], [15.9, 14261.0], [16.0, 14272.0], [16.1, 14284.0], [16.2, 14298.0], [16.3, 14311.0], [16.4, 14323.0], [16.5, 14342.0], [16.6, 14342.0], [16.7, 14348.0], [16.8, 14362.0], [16.9, 14370.0], [17.0, 14371.0], [17.1, 14374.0], [17.2, 14400.0], [17.3, 14405.0], [17.4, 14417.0], [17.5, 14426.0], [17.6, 14445.0], [17.7, 14468.0], [17.8, 14469.0], [17.9, 14482.0], [18.0, 14487.0], [18.1, 14493.0], [18.2, 14509.0], [18.3, 14511.0], [18.4, 14527.0], [18.5, 14563.0], [18.6, 14579.0], [18.7, 14612.0], [18.8, 14615.0], [18.9, 14626.0], [19.0, 14652.0], [19.1, 14667.0], [19.2, 14667.0], [19.3, 14670.0], [19.4, 14681.0], [19.5, 14685.0], [19.6, 14707.0], [19.7, 14741.0], [19.8, 14760.0], [19.9, 14772.0], [20.0, 14789.0], [20.1, 14806.0], [20.2, 14812.0], [20.3, 14818.0], [20.4, 14834.0], [20.5, 14855.0], [20.6, 14863.0], [20.7, 14882.0], [20.8, 14915.0], [20.9, 14915.0], [21.0, 14922.0], [21.1, 14923.0], [21.2, 14971.0], [21.3, 14981.0], [21.4, 14984.0], [21.5, 15003.0], [21.6, 15037.0], [21.7, 15037.0], [21.8, 15047.0], [21.9, 15064.0], [22.0, 15066.0], [22.1, 15109.0], [22.2, 15130.0], [22.3, 15132.0], [22.4, 15148.0], [22.5, 15170.0], [22.6, 15171.0], [22.7, 15192.0], [22.8, 15209.0], [22.9, 15210.0], [23.0, 15243.0], [23.1, 15256.0], [23.2, 15262.0], [23.3, 15274.0], [23.4, 15300.0], [23.5, 15320.0], [23.6, 15321.0], [23.7, 15334.0], [23.8, 15346.0], [23.9, 15403.0], [24.0, 15411.0], [24.1, 15424.0], [24.2, 15427.0], [24.3, 15428.0], [24.4, 15431.0], [24.5, 15473.0], [24.6, 15487.0], [24.7, 15504.0], [24.8, 15507.0], [24.9, 15532.0], [25.0, 15550.0], [25.1, 15569.0], [25.2, 15573.0], [25.3, 15595.0], [25.4, 15606.0], [25.5, 15628.0], [25.6, 15644.0], [25.7, 15653.0], [25.8, 15672.0], [25.9, 15699.0], [26.0, 15701.0], [26.1, 15718.0], [26.2, 15719.0], [26.3, 15736.0], [26.4, 15771.0], [26.5, 15778.0], [26.6, 15785.0], [26.7, 15804.0], [26.8, 15820.0], [26.9, 15830.0], [27.0, 15841.0], [27.1, 15846.0], [27.2, 15847.0], [27.3, 15907.0], [27.4, 15917.0], [27.5, 15934.0], [27.6, 15942.0], [27.7, 15944.0], [27.8, 15960.0], [27.9, 15964.0], [28.0, 15983.0], [28.1, 15992.0], [28.2, 16012.0], [28.3, 16021.0], [28.4, 16055.0], [28.5, 16078.0], [28.6, 16081.0], [28.7, 16092.0], [28.8, 16093.0], [28.9, 16100.0], [29.0, 16111.0], [29.1, 16133.0], [29.2, 16169.0], [29.3, 16169.0], [29.4, 16209.0], [29.5, 16210.0], [29.6, 16220.0], [29.7, 16250.0], [29.8, 16255.0], [29.9, 16289.0], [30.0, 16294.0], [30.1, 16335.0], [30.2, 16349.0], [30.3, 16354.0], [30.4, 16384.0], [30.5, 16394.0], [30.6, 16423.0], [30.7, 16454.0], [30.8, 16459.0], [30.9, 16468.0], [31.0, 16482.0], [31.1, 16491.0], [31.2, 16494.0], [31.3, 16533.0], [31.4, 16534.0], [31.5, 16549.0], [31.6, 16557.0], [31.7, 16569.0], [31.8, 16571.0], [31.9, 16595.0], [32.0, 16597.0], [32.1, 16611.0], [32.2, 16617.0], [32.3, 16619.0], [32.4, 16620.0], [32.5, 16622.0], [32.6, 16644.0], [32.7, 16646.0], [32.8, 16654.0], [32.9, 16655.0], [33.0, 16656.0], [33.1, 16657.0], [33.2, 16672.0], [33.3, 16674.0], [33.4, 16691.0], [33.5, 16693.0], [33.6, 16710.0], [33.7, 16731.0], [33.8, 16733.0], [33.9, 16737.0], [34.0, 16756.0], [34.1, 16763.0], [34.2, 16771.0], [34.3, 16782.0], [34.4, 16789.0], [34.5, 16808.0], [34.6, 16818.0], [34.7, 16833.0], [34.8, 16848.0], [34.9, 16858.0], [35.0, 16869.0], [35.1, 16872.0], [35.2, 16890.0], [35.3, 16927.0], [35.4, 16936.0], [35.5, 16943.0], [35.6, 16946.0], [35.7, 16949.0], [35.8, 16979.0], [35.9, 17000.0], [36.0, 17006.0], [36.1, 17030.0], [36.2, 17042.0], [36.3, 17067.0], [36.4, 17070.0], [36.5, 17088.0], [36.6, 17094.0], [36.7, 17094.0], [36.8, 17122.0], [36.9, 17152.0], [37.0, 17153.0], [37.1, 17168.0], [37.2, 17174.0], [37.3, 17214.0], [37.4, 17225.0], [37.5, 17230.0], [37.6, 17250.0], [37.7, 17292.0], [37.8, 17293.0], [37.9, 17294.0], [38.0, 17313.0], [38.1, 17341.0], [38.2, 17342.0], [38.3, 17349.0], [38.4, 17373.0], [38.5, 17376.0], [38.6, 17379.0], [38.7, 17403.0], [38.8, 17425.0], [38.9, 17494.0], [39.0, 17518.0], [39.1, 17534.0], [39.2, 17534.0], [39.3, 17541.0], [39.4, 17543.0], [39.5, 17547.0], [39.6, 17554.0], [39.7, 17569.0], [39.8, 17572.0], [39.9, 17598.0], [40.0, 17600.0], [40.1, 17605.0], [40.2, 17654.0], [40.3, 17655.0], [40.4, 17655.0], [40.5, 17704.0], [40.6, 17705.0], [40.7, 17710.0], [40.8, 17745.0], [40.9, 17746.0], [41.0, 17747.0], [41.1, 17801.0], [41.2, 17817.0], [41.3, 17817.0], [41.4, 17837.0], [41.5, 17863.0], [41.6, 17870.0], [41.7, 17872.0], [41.8, 17876.0], [41.9, 17880.0], [42.0, 17909.0], [42.1, 17914.0], [42.2, 17923.0], [42.3, 17939.0], [42.4, 17954.0], [42.5, 17968.0], [42.6, 17970.0], [42.7, 17973.0], [42.8, 17983.0], [42.9, 17993.0], [43.0, 17996.0], [43.1, 18003.0], [43.2, 18011.0], [43.3, 18025.0], [43.4, 18036.0], [43.5, 18055.0], [43.6, 18056.0], [43.7, 18078.0], [43.8, 18096.0], [43.9, 18101.0], [44.0, 18118.0], [44.1, 18162.0], [44.2, 18178.0], [44.3, 18187.0], [44.4, 18192.0], [44.5, 18202.0], [44.6, 18204.0], [44.7, 18225.0], [44.8, 18249.0], [44.9, 18258.0], [45.0, 18267.0], [45.1, 18278.0], [45.2, 18342.0], [45.3, 18364.0], [45.4, 18368.0], [45.5, 18377.0], [45.6, 18383.0], [45.7, 18403.0], [45.8, 18404.0], [45.9, 18413.0], [46.0, 18456.0], [46.1, 18476.0], [46.2, 18491.0], [46.3, 18492.0], [46.4, 18504.0], [46.5, 18526.0], [46.6, 18527.0], [46.7, 18540.0], [46.8, 18576.0], [46.9, 18577.0], [47.0, 18591.0], [47.1, 18605.0], [47.2, 18636.0], [47.3, 18637.0], [47.4, 18660.0], [47.5, 18683.0], [47.6, 18690.0], [47.7, 18692.0], [47.8, 18700.0], [47.9, 18707.0], [48.0, 18721.0], [48.1, 18729.0], [48.2, 18748.0], [48.3, 18748.0], [48.4, 18754.0], [48.5, 18755.0], [48.6, 18759.0], [48.7, 18773.0], [48.8, 18782.0], [48.9, 18787.0], [49.0, 18787.0], [49.1, 18836.0], [49.2, 18839.0], [49.3, 18857.0], [49.4, 18862.0], [49.5, 18870.0], [49.6, 18886.0], [49.7, 18909.0], [49.8, 18914.0], [49.9, 18934.0], [50.0, 18940.0], [50.1, 18941.0], [50.2, 18970.0], [50.3, 18987.0], [50.4, 18996.0], [50.5, 19024.0], [50.6, 19056.0], [50.7, 19081.0], [50.8, 19092.0], [50.9, 19109.0], [51.0, 19118.0], [51.1, 19127.0], [51.2, 19134.0], [51.3, 19149.0], [51.4, 19163.0], [51.5, 19169.0], [51.6, 19208.0], [51.7, 19232.0], [51.8, 19240.0], [51.9, 19255.0], [52.0, 19272.0], [52.1, 19277.0], [52.2, 19288.0], [52.3, 19310.0], [52.4, 19311.0], [52.5, 19336.0], [52.6, 19341.0], [52.7, 19399.0], [52.8, 19407.0], [52.9, 19408.0], [53.0, 19411.0], [53.1, 19427.0], [53.2, 19462.0], [53.3, 19478.0], [53.4, 19500.0], [53.5, 19514.0], [53.6, 19516.0], [53.7, 19534.0], [53.8, 19539.0], [53.9, 19559.0], [54.0, 19578.0], [54.1, 19593.0], [54.2, 19596.0], [54.3, 19613.0], [54.4, 19626.0], [54.5, 19626.0], [54.6, 19636.0], [54.7, 19669.0], [54.8, 19674.0], [54.9, 19688.0], [55.0, 19698.0], [55.1, 19717.0], [55.2, 19742.0], [55.3, 19744.0], [55.4, 19776.0], [55.5, 19798.0], [55.6, 19808.0], [55.7, 19821.0], [55.8, 19840.0], [55.9, 19847.0], [56.0, 19847.0], [56.1, 19859.0], [56.2, 19874.0], [56.3, 19887.0], [56.4, 19915.0], [56.5, 19950.0], [56.6, 19953.0], [56.7, 19957.0], [56.8, 19976.0], [56.9, 19977.0], [57.0, 20002.0], [57.1, 20010.0], [57.2, 20022.0], [57.3, 20026.0], [57.4, 20068.0], [57.5, 20083.0], [57.6, 20094.0], [57.7, 20117.0], [57.8, 20117.0], [57.9, 20153.0], [58.0, 20153.0], [58.1, 20170.0], [58.2, 20179.0], [58.3, 20181.0], [58.4, 20184.0], [58.5, 20203.0], [58.6, 20235.0], [58.7, 20242.0], [58.8, 20846.0], [58.9, 20860.0], [59.0, 20863.0], [59.1, 20880.0], [59.2, 20898.0], [59.3, 20899.0], [59.4, 20912.0], [59.5, 20926.0], [59.6, 20959.0], [59.7, 20987.0], [59.8, 20992.0], [59.9, 21005.0], [60.0, 21011.0], [60.1, 21017.0], [60.2, 21031.0], [60.3, 21054.0], [60.4, 21067.0], [60.5, 21100.0], [60.6, 21102.0], [60.7, 21111.0], [60.8, 21139.0], [60.9, 21160.0], [61.0, 21169.0], [61.1, 21189.0], [61.2, 21190.0], [61.3, 21192.0], [61.4, 21216.0], [61.5, 21218.0], [61.6, 21229.0], [61.7, 21243.0], [61.8, 21278.0], [61.9, 21288.0], [62.0, 21311.0], [62.1, 21331.0], [62.2, 21343.0], [62.3, 21367.0], [62.4, 21383.0], [62.5, 21392.0], [62.6, 21395.0], [62.7, 21405.0], [62.8, 21414.0], [62.9, 21435.0], [63.0, 21450.0], [63.1, 21451.0], [63.2, 21454.0], [63.3, 21471.0], [63.4, 21502.0], [63.5, 21507.0], [63.6, 21511.0], [63.7, 21529.0], [63.8, 21573.0], [63.9, 21578.0], [64.0, 21595.0], [64.1, 21615.0], [64.2, 21620.0], [64.3, 21638.0], [64.4, 21655.0], [64.5, 21655.0], [64.6, 21664.0], [64.7, 21686.0], [64.8, 21709.0], [64.9, 21710.0], [65.0, 21711.0], [65.1, 21762.0], [65.2, 21775.0], [65.3, 21778.0], [65.4, 21781.0], [65.5, 21787.0], [65.6, 21859.0], [65.7, 21868.0], [65.8, 21874.0], [65.9, 21875.0], [66.0, 21879.0], [66.1, 21894.0], [66.2, 21902.0], [66.3, 21914.0], [66.4, 21924.0], [66.5, 21946.0], [66.6, 21980.0], [66.7, 21984.0], [66.8, 21997.0], [66.9, 22010.0], [67.0, 22017.0], [67.1, 22050.0], [67.2, 22069.0], [67.3, 22077.0], [67.4, 22078.0], [67.5, 22114.0], [67.6, 22118.0], [67.7, 22142.0], [67.8, 22157.0], [67.9, 22171.0], [68.0, 22184.0], [68.1, 22192.0], [68.2, 22201.0], [68.3, 22215.0], [68.4, 22218.0], [68.5, 22224.0], [68.6, 22231.0], [68.7, 22242.0], [68.8, 22244.0], [68.9, 22273.0], [69.0, 22274.0], [69.1, 22280.0], [69.2, 22323.0], [69.3, 22325.0], [69.4, 22335.0], [69.5, 22355.0], [69.6, 22402.0], [69.7, 22403.0], [69.8, 22405.0], [69.9, 22405.0], [70.0, 22459.0], [70.1, 37264.0], [70.2, 39411.0], [70.3, 39835.0], [70.4, 40051.0], [70.5, 40057.0], [70.6, 40522.0], [70.7, 40780.0], [70.8, 40975.0], [70.9, 41137.0], [71.0, 41229.0], [71.1, 41260.0], [71.2, 41352.0], [71.3, 41469.0], [71.4, 41545.0], [71.5, 41650.0], [71.6, 41735.0], [71.7, 41811.0], [71.8, 42099.0], [71.9, 42197.0], [72.0, 42296.0], [72.1, 42419.0], [72.2, 42583.0], [72.3, 42637.0], [72.4, 42792.0], [72.5, 42994.0], [72.6, 43122.0], [72.7, 43351.0], [72.8, 43371.0], [72.9, 43418.0], [73.0, 43746.0], [73.1, 43747.0], [73.2, 43836.0], [73.3, 44079.0], [73.4, 44117.0], [73.5, 44231.0], [73.6, 44279.0], [73.7, 44413.0], [73.8, 44441.0], [73.9, 44475.0], [74.0, 44579.0], [74.1, 44604.0], [74.2, 44831.0], [74.3, 44852.0], [74.4, 44951.0], [74.5, 44988.0], [74.6, 45064.0], [74.7, 45262.0], [74.8, 45290.0], [74.9, 45387.0], [75.0, 45555.0], [75.1, 45606.0], [75.2, 45661.0], [75.3, 45730.0], [75.4, 45847.0], [75.5, 46083.0], [75.6, 46195.0], [75.7, 46229.0], [75.8, 46290.0], [75.9, 46310.0], [76.0, 46318.0], [76.1, 46430.0], [76.2, 46538.0], [76.3, 46741.0], [76.4, 46943.0], [76.5, 46962.0], [76.6, 46964.0], [76.7, 46976.0], [76.8, 46981.0], [76.9, 47243.0], [77.0, 47267.0], [77.1, 47346.0], [77.2, 47349.0], [77.3, 47419.0], [77.4, 47423.0], [77.5, 47448.0], [77.6, 47471.0], [77.7, 47724.0], [77.8, 47753.0], [77.9, 47809.0], [78.0, 47862.0], [78.1, 47957.0], [78.2, 48042.0], [78.3, 48142.0], [78.4, 48252.0], [78.5, 48266.0], [78.6, 48453.0], [78.7, 48591.0], [78.8, 48756.0], [78.9, 48792.0], [79.0, 48794.0], [79.1, 48890.0], [79.2, 48948.0], [79.3, 49049.0], [79.4, 49094.0], [79.5, 49208.0], [79.6, 49284.0], [79.7, 49423.0], [79.8, 49524.0], [79.9, 49715.0], [80.0, 49717.0], [80.1, 49844.0], [80.2, 50245.0], [80.3, 50329.0], [80.4, 50351.0], [80.5, 50358.0], [80.6, 50548.0], [80.7, 50569.0], [80.8, 50777.0], [80.9, 50807.0], [81.0, 50917.0], [81.1, 50951.0], [81.2, 50960.0], [81.3, 50965.0], [81.4, 51149.0], [81.5, 51161.0], [81.6, 51480.0], [81.7, 51647.0], [81.8, 51652.0], [81.9, 51801.0], [82.0, 51887.0], [82.1, 51893.0], [82.2, 51966.0], [82.3, 52072.0], [82.4, 52220.0], [82.5, 52282.0], [82.6, 52438.0], [82.7, 52648.0], [82.8, 52792.0], [82.9, 52798.0], [83.0, 52871.0], [83.1, 53014.0], [83.2, 53210.0], [83.3, 53248.0], [83.4, 53486.0], [83.5, 53537.0], [83.6, 53642.0], [83.7, 53645.0], [83.8, 53650.0], [83.9, 53749.0], [84.0, 53841.0], [84.1, 54079.0], [84.2, 54095.0], [84.3, 54186.0], [84.4, 54243.0], [84.5, 54337.0], [84.6, 54348.0], [84.7, 54466.0], [84.8, 54495.0], [84.9, 54669.0], [85.0, 54683.0], [85.1, 54688.0], [85.2, 54759.0], [85.3, 54841.0], [85.4, 54957.0], [85.5, 55052.0], [85.6, 55172.0], [85.7, 55179.0], [85.8, 55187.0], [85.9, 55396.0], [86.0, 55399.0], [86.1, 55407.0], [86.2, 55493.0], [86.3, 55607.0], [86.4, 55693.0], [86.5, 55721.0], [86.6, 55900.0], [86.7, 55902.0], [86.8, 56083.0], [86.9, 56119.0], [87.0, 56128.0], [87.1, 56165.0], [87.2, 56222.0], [87.3, 56356.0], [87.4, 56525.0], [87.5, 56580.0], [87.6, 56631.0], [87.7, 56714.0], [87.8, 56751.0], [87.9, 56766.0], [88.0, 56815.0], [88.1, 56966.0], [88.2, 56984.0], [88.3, 57040.0], [88.4, 57101.0], [88.5, 57155.0], [88.6, 57219.0], [88.7, 57330.0], [88.8, 57340.0], [88.9, 57344.0], [89.0, 57449.0], [89.1, 57456.0], [89.2, 57546.0], [89.3, 57556.0], [89.4, 57641.0], [89.5, 57807.0], [89.6, 57854.0], [89.7, 57875.0], [89.8, 57894.0], [89.9, 58061.0], [90.0, 58067.0], [90.1, 58072.0], [90.2, 58151.0], [90.3, 58244.0], [90.4, 58269.0], [90.5, 58334.0], [90.6, 58361.0], [90.7, 58450.0], [90.8, 58559.0], [90.9, 58576.0], [91.0, 58673.0], [91.1, 58694.0], [91.2, 58802.0], [91.3, 58822.0], [91.4, 58909.0], [91.5, 59010.0], [91.6, 59103.0], [91.7, 59118.0], [91.8, 59130.0], [91.9, 59190.0], [92.0, 59301.0], [92.1, 59302.0], [92.2, 59386.0], [92.3, 59517.0], [92.4, 59517.0], [92.5, 59619.0], [92.6, 59654.0], [92.7, 59705.0], [92.8, 59741.0], [92.9, 59785.0], [93.0, 59789.0], [93.1, 60008.0], [93.2, 60019.0], [93.3, 60061.0], [93.4, 60098.0], [93.5, 60138.0], [93.6, 60235.0], [93.7, 60271.0], [93.8, 60291.0], [93.9, 60408.0], [94.0, 60423.0], [94.1, 60439.0], [94.2, 60575.0], [94.3, 60636.0], [94.4, 60719.0], [94.5, 60742.0], [94.6, 60770.0], [94.7, 60839.0], [94.8, 60867.0], [94.9, 61150.0], [95.0, 61150.0], [95.1, 61188.0], [95.2, 61258.0], [95.3, 61291.0], [95.4, 61470.0], [95.5, 61584.0], [95.6, 61595.0], [95.7, 61608.0], [95.8, 61641.0], [95.9, 61700.0], [96.0, 61883.0], [96.1, 61934.0], [96.2, 61952.0], [96.3, 62012.0], [96.4, 62050.0], [96.5, 62177.0], [96.6, 62254.0], [96.7, 62376.0], [96.8, 62379.0], [96.9, 62393.0], [97.0, 62395.0], [97.1, 62478.0], [97.2, 62682.0], [97.3, 62726.0], [97.4, 62759.0], [97.5, 62875.0], [97.6, 63111.0], [97.7, 63125.0], [97.8, 63183.0], [97.9, 63195.0], [98.0, 63217.0], [98.1, 63350.0], [98.2, 63434.0], [98.3, 63509.0], [98.4, 63511.0], [98.5, 63554.0], [98.6, 63586.0], [98.7, 63629.0], [98.8, 63685.0], [98.9, 63704.0], [99.0, 63734.0], [99.1, 63828.0], [99.2, 63861.0], [99.3, 63880.0], [99.4, 63904.0], [99.5, 64002.0], [99.6, 64065.0], [99.7, 64167.0], [99.8, 64167.0], [99.9, 64281.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 11500.0, "maxY": 15.0, "series": [{"data": [[40500.0, 1.0], [40900.0, 1.0], [41300.0, 1.0], [41700.0, 1.0], [42100.0, 1.0], [42500.0, 1.0], [42900.0, 1.0], [43300.0, 2.0], [43700.0, 2.0], [44100.0, 1.0], [44500.0, 1.0], [44900.0, 2.0], [45300.0, 1.0], [45700.0, 2.0], [46100.0, 1.0], [46500.0, 1.0], [46900.0, 5.0], [47300.0, 2.0], [47700.0, 2.0], [48100.0, 1.0], [48500.0, 1.0], [48900.0, 1.0], [49700.0, 2.0], [50500.0, 2.0], [50900.0, 4.0], [53700.0, 1.0], [54100.0, 1.0], [54900.0, 1.0], [55300.0, 2.0], [55700.0, 1.0], [56100.0, 3.0], [56500.0, 2.0], [56900.0, 2.0], [57300.0, 3.0], [58100.0, 1.0], [58500.0, 2.0], [58900.0, 1.0], [59300.0, 3.0], [59700.0, 4.0], [60100.0, 1.0], [60500.0, 1.0], [61700.0, 1.0], [62100.0, 1.0], [63300.0, 1.0], [63700.0, 2.0], [64100.0, 2.0], [11500.0, 5.0], [11600.0, 7.0], [11700.0, 5.0], [11800.0, 4.0], [12100.0, 3.0], [11900.0, 4.0], [12200.0, 3.0], [12000.0, 5.0], [12300.0, 3.0], [12400.0, 5.0], [12500.0, 10.0], [12600.0, 5.0], [12700.0, 3.0], [12800.0, 6.0], [12900.0, 11.0], [13000.0, 7.0], [13100.0, 7.0], [13200.0, 6.0], [13300.0, 9.0], [13400.0, 4.0], [13500.0, 6.0], [13600.0, 4.0], [13700.0, 6.0], [13800.0, 7.0], [13900.0, 6.0], [14000.0, 9.0], [14100.0, 6.0], [14200.0, 7.0], [14300.0, 9.0], [14400.0, 10.0], [14500.0, 5.0], [14600.0, 8.0], [14700.0, 5.0], [14800.0, 7.0], [14900.0, 7.0], [15000.0, 6.0], [15100.0, 7.0], [15200.0, 6.0], [15300.0, 5.0], [15400.0, 8.0], [15500.0, 7.0], [15600.0, 6.0], [15700.0, 7.0], [15800.0, 6.0], [15900.0, 9.0], [16000.0, 7.0], [16100.0, 5.0], [16200.0, 7.0], [16300.0, 5.0], [17200.0, 7.0], [16400.0, 7.0], [16600.0, 15.0], [16800.0, 8.0], [17000.0, 9.0], [17400.0, 3.0], [18200.0, 7.0], [17600.0, 5.0], [17800.0, 9.0], [18000.0, 8.0], [18400.0, 7.0], [19200.0, 7.0], [18600.0, 7.0], [18800.0, 6.0], [19000.0, 4.0], [19400.0, 6.0], [19600.0, 8.0], [19800.0, 8.0], [20000.0, 7.0], [20200.0, 3.0], [20800.0, 6.0], [21000.0, 6.0], [21200.0, 6.0], [21400.0, 7.0], [21600.0, 7.0], [21800.0, 6.0], [22000.0, 6.0], [22200.0, 10.0], [22400.0, 5.0], [37200.0, 1.0], [40000.0, 2.0], [41200.0, 2.0], [41600.0, 1.0], [42000.0, 1.0], [42400.0, 1.0], [44000.0, 1.0], [44400.0, 3.0], [44800.0, 2.0], [45200.0, 2.0], [45600.0, 2.0], [46000.0, 1.0], [46400.0, 1.0], [47200.0, 2.0], [48000.0, 1.0], [48400.0, 1.0], [48800.0, 1.0], [49200.0, 2.0], [50800.0, 1.0], [51600.0, 2.0], [52000.0, 1.0], [52400.0, 1.0], [52800.0, 1.0], [53200.0, 2.0], [53600.0, 3.0], [54000.0, 2.0], [54400.0, 2.0], [54800.0, 1.0], [55600.0, 2.0], [56000.0, 1.0], [56800.0, 1.0], [57200.0, 1.0], [57600.0, 1.0], [58000.0, 3.0], [58400.0, 1.0], [58800.0, 2.0], [59600.0, 2.0], [60000.0, 4.0], [60400.0, 3.0], [60800.0, 2.0], [61200.0, 2.0], [61600.0, 2.0], [62000.0, 2.0], [62400.0, 1.0], [62800.0, 1.0], [63200.0, 1.0], [63600.0, 2.0], [64000.0, 2.0], [40700.0, 1.0], [41100.0, 1.0], [41500.0, 1.0], [42700.0, 1.0], [43100.0, 1.0], [45500.0, 1.0], [46300.0, 2.0], [46700.0, 1.0], [47900.0, 1.0], [48700.0, 3.0], [49500.0, 1.0], [50300.0, 3.0], [50700.0, 1.0], [51100.0, 2.0], [51900.0, 1.0], [52700.0, 2.0], [53500.0, 1.0], [54300.0, 2.0], [54700.0, 1.0], [55100.0, 3.0], [55900.0, 2.0], [56300.0, 1.0], [56700.0, 3.0], [57100.0, 2.0], [57500.0, 2.0], [58300.0, 2.0], [59100.0, 4.0], [59500.0, 2.0], [60700.0, 3.0], [61100.0, 3.0], [61500.0, 2.0], [61900.0, 2.0], [62300.0, 4.0], [62700.0, 2.0], [63100.0, 4.0], [63500.0, 4.0], [63900.0, 1.0], [16500.0, 8.0], [16700.0, 9.0], [16900.0, 6.0], [17100.0, 5.0], [17300.0, 7.0], [17500.0, 10.0], [17700.0, 6.0], [17900.0, 11.0], [18100.0, 6.0], [18300.0, 5.0], [18500.0, 7.0], [18700.0, 13.0], [18900.0, 8.0], [19100.0, 7.0], [19300.0, 5.0], [19500.0, 9.0], [19700.0, 5.0], [19900.0, 6.0], [20100.0, 8.0], [20900.0, 5.0], [21100.0, 9.0], [21300.0, 7.0], [21500.0, 7.0], [21700.0, 8.0], [21900.0, 7.0], [22100.0, 7.0], [22300.0, 4.0], [39400.0, 1.0], [39800.0, 1.0], [41400.0, 1.0], [41800.0, 1.0], [42200.0, 1.0], [42600.0, 1.0], [43400.0, 1.0], [43800.0, 1.0], [44200.0, 2.0], [44600.0, 1.0], [45000.0, 1.0], [45800.0, 1.0], [46200.0, 2.0], [47400.0, 4.0], [47800.0, 2.0], [48200.0, 2.0], [49000.0, 2.0], [49400.0, 1.0], [49800.0, 1.0], [50200.0, 1.0], [51400.0, 1.0], [51800.0, 3.0], [52200.0, 2.0], [52600.0, 1.0], [53000.0, 1.0], [53400.0, 1.0], [53800.0, 1.0], [54200.0, 1.0], [54600.0, 3.0], [55000.0, 1.0], [55400.0, 2.0], [56200.0, 1.0], [56600.0, 1.0], [57000.0, 1.0], [57400.0, 2.0], [57800.0, 4.0], [58200.0, 2.0], [58600.0, 2.0], [59000.0, 1.0], [60200.0, 3.0], [60600.0, 1.0], [61400.0, 1.0], [61800.0, 1.0], [62200.0, 1.0], [62600.0, 1.0], [63400.0, 1.0], [63800.0, 3.0], [64200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 64200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 300.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 700.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 300.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 700.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 119.02109704641364, "minX": 1.62248766E12, "maxY": 619.0340760157272, "series": [{"data": [[1.62248766E12, 619.0340760157272], [1.62248772E12, 119.02109704641364]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248772E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11551.0, "minX": 1.0, "maxY": 64281.0, "series": [{"data": [[2.0, 64167.0], [3.0, 64167.0], [4.0, 64065.0], [5.0, 64002.0], [6.0, 63904.0], [7.0, 63880.0], [8.0, 63828.0], [9.0, 63861.0], [10.0, 63734.0], [11.0, 63704.0], [12.0, 63685.0], [13.0, 63629.0], [14.0, 63586.0], [15.0, 63554.0], [16.0, 63511.0], [17.0, 63509.0], [18.0, 63434.0], [19.0, 63350.0], [20.0, 63125.0], [21.0, 63217.0], [22.0, 63183.0], [23.0, 63195.0], [24.0, 63111.0], [25.0, 62875.0], [26.0, 62759.0], [27.0, 62682.0], [28.0, 62726.0], [29.0, 62379.0], [30.0, 62478.0], [31.0, 62395.0], [33.0, 62393.0], [32.0, 62376.0], [35.0, 62254.0], [34.0, 62177.0], [37.0, 62012.0], [36.0, 62050.0], [39.0, 61934.0], [38.0, 61952.0], [41.0, 61700.0], [40.0, 61883.0], [43.0, 61584.0], [42.0, 61595.0], [45.0, 61608.0], [44.0, 61641.0], [47.0, 61258.0], [46.0, 61470.0], [49.0, 61150.0], [48.0, 61291.0], [51.0, 61188.0], [50.0, 61150.0], [53.0, 60839.0], [52.0, 60867.0], [55.0, 60770.0], [54.0, 60742.0], [57.0, 60636.0], [56.0, 60719.0], [59.0, 60439.0], [58.0, 60575.0], [61.0, 60415.5], [63.0, 60271.0], [62.0, 60291.0], [67.0, 60061.0], [66.0, 60098.0], [65.0, 60138.0], [64.0, 60235.0], [71.0, 59785.0], [70.0, 59789.0], [69.0, 60008.0], [68.0, 60019.0], [75.0, 59619.0], [74.0, 59517.0], [73.0, 59705.0], [72.0, 59741.0], [78.0, 59386.0], [77.0, 59517.0], [76.0, 59654.0], [83.0, 59130.0], [82.0, 59118.0], [81.0, 59190.0], [80.0, 59301.5], [87.0, 58802.0], [86.0, 59010.0], [85.0, 58909.0], [84.0, 59103.0], [91.0, 58576.0], [90.0, 58673.0], [89.0, 58694.0], [88.0, 58822.0], [95.0, 58334.0], [94.0, 58361.0], [93.0, 58450.0], [92.0, 58559.0], [99.0, 58067.0], [98.0, 58151.0], [97.0, 58244.0], [96.0, 58269.0], [103.0, 57854.0], [102.0, 57894.0], [101.0, 58072.0], [100.0, 58061.0], [107.0, 57546.0], [106.0, 57641.0], [105.0, 57807.0], [104.0, 57875.0], [110.0, 57456.0], [109.0, 57449.0], [108.0, 57556.0], [115.0, 57219.0], [114.0, 57330.0], [113.0, 57101.0], [112.0, 57342.0], [119.0, 56966.0], [118.0, 57040.0], [117.0, 56984.0], [116.0, 57155.0], [123.0, 56751.0], [122.0, 56714.0], [121.0, 56815.0], [120.0, 56766.0], [127.0, 56356.0], [126.0, 56580.0], [125.0, 56631.0], [124.0, 56525.0], [135.0, 55693.0], [134.0, 55900.0], [133.0, 55902.0], [132.0, 56083.0], [131.0, 56128.0], [130.0, 56119.0], [129.0, 56165.0], [128.0, 56222.0], [143.0, 55187.0], [142.0, 55179.0], [141.0, 55399.0], [140.0, 55396.0], [139.0, 55407.0], [138.0, 55550.0], [136.0, 55721.0], [151.0, 54683.0], [150.0, 54669.0], [149.0, 54759.0], [148.0, 54688.0], [147.0, 54841.0], [146.0, 54957.0], [145.0, 55052.0], [144.0, 55172.0], [159.0, 54186.0], [158.0, 54243.0], [157.0, 54095.0], [156.0, 54079.0], [155.0, 54348.0], [154.0, 54337.0], [153.0, 54466.0], [152.0, 54495.0], [167.0, 53248.0], [166.0, 53537.0], [165.0, 53650.0], [164.0, 53645.0], [163.0, 53486.0], [162.0, 53642.0], [161.0, 53749.0], [160.0, 53841.0], [175.0, 52282.0], [174.0, 52438.0], [173.0, 52648.0], [172.0, 52792.0], [171.0, 52798.0], [170.0, 53014.0], [169.0, 52871.0], [168.0, 53210.0], [183.0, 51647.0], [182.0, 51652.0], [181.0, 51887.0], [180.0, 51801.0], [179.0, 52072.0], [178.0, 51893.0], [177.0, 51966.0], [176.0, 52220.0], [191.0, 50917.0], [190.0, 50807.0], [189.0, 50965.0], [188.0, 50960.0], [187.0, 50951.0], [186.0, 51161.0], [185.0, 51149.0], [184.0, 51480.0], [199.0, 49844.0], [198.0, 50245.0], [197.0, 50358.0], [196.0, 50329.0], [195.0, 50351.0], [194.0, 50548.0], [193.0, 50569.0], [192.0, 50777.0], [207.0, 48890.0], [206.0, 49094.0], [205.0, 49284.0], [204.0, 49208.0], [203.0, 49423.0], [202.0, 49524.0], [201.0, 49715.0], [200.0, 49717.0], [215.0, 48252.0], [214.0, 48453.0], [213.0, 48591.0], [212.0, 48756.0], [211.0, 48794.0], [210.0, 48948.0], [209.0, 48792.0], [208.0, 49049.0], [223.0, 47753.0], [222.0, 47809.0], [221.0, 47724.0], [220.0, 47862.0], [219.0, 48042.0], [218.0, 48142.0], [217.0, 47957.0], [216.0, 48266.0], [231.0, 47243.0], [230.0, 47267.0], [229.0, 47346.0], [228.0, 47349.0], [227.0, 47423.0], [226.0, 47448.0], [225.0, 47471.0], [224.0, 47419.0], [239.0, 46290.0], [238.0, 46538.0], [237.0, 46741.0], [236.0, 46943.0], [235.0, 46962.0], [234.0, 46976.0], [233.0, 46972.5], [247.0, 45730.0], [246.0, 45789.0], [245.0, 46139.0], [243.0, 46229.0], [242.0, 46318.0], [241.0, 46310.0], [240.0, 46430.0], [255.0, 45064.0], [254.0, 45262.0], [253.0, 45290.0], [252.0, 45387.0], [251.0, 45555.0], [250.0, 45633.5], [248.0, 45847.0], [270.0, 43747.0], [271.0, 43746.0], [269.0, 43836.0], [268.0, 44117.0], [267.0, 44079.0], [266.0, 44231.0], [265.0, 44279.0], [264.0, 44441.0], [263.0, 44475.0], [257.0, 44988.0], [256.0, 44831.0], [259.0, 44951.0], [258.0, 44852.0], [262.0, 44413.0], [261.0, 44604.0], [260.0, 44579.0], [286.0, 41735.0], [287.0, 41545.0], [285.0, 41650.0], [284.0, 41811.0], [283.0, 42197.0], [282.0, 42296.0], [281.0, 42099.0], [280.0, 42419.0], [279.0, 42583.0], [273.0, 43418.0], [272.0, 43351.0], [275.0, 43122.0], [274.0, 43371.0], [278.0, 42637.0], [277.0, 42792.0], [276.0, 42994.0], [302.0, 22405.0], [303.0, 22402.0], [301.0, 22459.0], [300.0, 37264.0], [299.0, 39411.0], [298.0, 39835.0], [297.0, 40051.0], [296.0, 40057.0], [295.0, 40522.0], [289.0, 41229.0], [288.0, 41469.0], [291.0, 41260.0], [290.0, 41352.0], [294.0, 40780.0], [293.0, 40975.0], [292.0, 41137.0], [318.0, 22215.0], [319.0, 22201.0], [317.0, 22218.0], [316.0, 22224.0], [315.0, 22231.0], [314.0, 22244.0], [313.0, 22242.0], [312.0, 22273.0], [311.0, 22274.0], [305.0, 22405.0], [304.0, 22403.0], [307.0, 22335.0], [306.0, 22355.0], [310.0, 22280.0], [309.0, 22323.0], [308.0, 22325.0], [334.0, 21984.0], [335.0, 21980.0], [333.0, 21997.0], [332.0, 22010.0], [331.0, 22017.0], [330.0, 22050.0], [329.0, 22069.0], [328.0, 22078.0], [327.0, 22077.0], [321.0, 22184.0], [320.0, 22192.0], [323.0, 22157.0], [322.0, 22171.0], [326.0, 22114.0], [325.0, 22118.0], [324.0, 22142.0], [350.0, 21762.0], [351.0, 21711.0], [349.0, 21778.0], [348.0, 21775.0], [347.0, 21781.0], [346.0, 21787.0], [345.0, 21859.0], [344.0, 21868.0], [343.0, 21874.0], [337.0, 21924.0], [336.0, 21946.0], [339.0, 21902.0], [338.0, 21914.0], [342.0, 21879.0], [341.0, 21875.0], [340.0, 21894.0], [366.0, 21507.0], [367.0, 21502.0], [365.0, 21511.0], [364.0, 21529.0], [363.0, 21573.0], [362.0, 21578.0], [361.0, 21595.0], [360.0, 21615.0], [359.0, 21620.0], [353.0, 21710.0], [352.0, 21709.0], [355.0, 21664.0], [354.0, 21686.0], [358.0, 21638.0], [357.0, 21655.0], [356.0, 21655.0], [382.0, 21288.0], [383.0, 21278.0], [381.0, 21311.0], [380.0, 21331.0], [379.0, 21343.0], [378.0, 21367.0], [377.0, 21383.0], [376.0, 21392.0], [375.0, 21395.0], [371.0, 21451.666666666668], [368.0, 21471.0], [374.0, 21405.0], [373.0, 21414.0], [372.0, 21435.0], [398.0, 21054.0], [399.0, 21031.0], [397.0, 21067.0], [396.0, 21101.0], [394.0, 21111.0], [393.0, 21139.0], [392.0, 21160.0], [391.0, 21169.0], [385.0, 21229.0], [384.0, 21243.0], [387.0, 21216.0], [386.0, 21218.0], [390.0, 21192.0], [389.0, 21189.5], [414.0, 20242.0], [415.0, 20235.0], [413.0, 20846.0], [412.0, 20860.0], [411.0, 20863.0], [410.0, 20880.0], [409.0, 20898.0], [408.0, 20899.0], [407.0, 20912.0], [401.0, 21011.0], [400.0, 21017.0], [403.0, 20992.0], [402.0, 21005.0], [406.0, 20926.0], [405.0, 20959.0], [404.0, 20987.0], [430.0, 20010.0], [431.0, 20002.0], [429.0, 20022.0], [428.0, 20026.0], [427.0, 20068.0], [426.0, 20083.0], [425.0, 20094.0], [424.0, 20117.0], [423.0, 20117.0], [416.0, 20203.0], [419.0, 20179.0], [418.0, 20182.5], [422.0, 20153.0], [421.0, 20153.0], [420.0, 20170.0], [446.0, 19798.0], [447.0, 19776.0], [445.0, 19808.0], [444.0, 19821.0], [443.0, 19840.0], [442.0, 19847.0], [440.0, 19859.0], [439.0, 19874.0], [432.0, 19977.0], [434.0, 19957.0], [433.0, 19976.0], [438.0, 19887.0], [437.0, 19915.0], [436.0, 19951.5], [462.0, 19559.0], [463.0, 19539.0], [461.0, 19578.0], [460.0, 19596.0], [459.0, 19593.0], [458.0, 19613.0], [457.0, 19626.0], [456.0, 19636.0], [455.0, 19626.0], [449.0, 19742.0], [448.0, 19744.0], [451.0, 19698.0], [450.0, 19717.0], [454.0, 19688.0], [453.0, 19669.0], [452.0, 19674.0], [478.0, 19310.0], [479.0, 19288.0], [477.0, 19311.0], [476.0, 19336.0], [475.0, 19341.0], [474.0, 19399.0], [473.0, 19408.0], [472.0, 19407.0], [471.0, 19411.0], [465.0, 19516.0], [464.0, 19534.0], [467.0, 19500.0], [466.0, 19514.0], [470.0, 19427.0], [469.0, 19462.0], [468.0, 19478.0], [494.0, 19081.0], [495.0, 19056.0], [493.0, 19092.0], [492.0, 19109.0], [491.0, 19118.0], [490.0, 19127.0], [489.0, 19134.0], [488.0, 19149.0], [487.0, 19163.0], [481.0, 19272.0], [480.0, 19277.0], [483.0, 19240.0], [482.0, 19255.0], [486.0, 19169.0], [485.0, 19208.0], [484.0, 19232.0], [510.0, 18839.0], [511.0, 18782.0], [509.0, 18836.0], [508.0, 18870.0], [507.0, 18857.0], [506.0, 18862.0], [505.0, 18886.0], [504.0, 18909.0], [503.0, 18914.0], [497.0, 18996.0], [496.0, 19024.0], [499.0, 18970.0], [498.0, 18987.0], [502.0, 18941.0], [501.0, 18934.0], [500.0, 18940.0], [536.0, 18526.5], [540.0, 18476.0], [543.0, 18404.0], [530.0, 18605.0], [529.0, 18636.5], [532.0, 18577.0], [531.0, 18591.0], [542.0, 18413.0], [541.0, 18456.0], [539.0, 18492.0], [538.0, 18491.0], [537.0, 18504.0], [527.0, 18660.0], [513.0, 18773.0], [512.0, 18787.0], [515.0, 18759.0], [514.0, 18787.0], [517.0, 18748.0], [516.0, 18754.0], [519.0, 18748.0], [518.0, 18755.0], [526.0, 18683.0], [525.0, 18690.0], [524.0, 18692.0], [523.0, 18700.0], [522.0, 18707.0], [521.0, 18729.0], [520.0, 18721.0], [534.0, 18540.0], [533.0, 18576.0], [572.0, 17954.0], [575.0, 18025.0], [561.0, 18118.0], [560.0, 18162.0], [563.0, 18096.0], [562.0, 18101.0], [565.0, 18056.0], [564.0, 18078.0], [574.0, 17923.0], [573.0, 17939.0], [571.0, 17970.0], [570.0, 17973.0], [569.0, 17993.0], [568.0, 18003.0], [559.0, 18178.0], [545.0, 18383.0], [544.0, 18403.0], [547.0, 18368.0], [546.0, 18377.0], [549.0, 18342.0], [548.0, 18364.0], [551.0, 18267.0], [550.0, 18278.0], [558.0, 18192.0], [557.0, 18187.0], [556.0, 18202.0], [555.0, 18204.0], [554.0, 18225.0], [553.0, 18249.0], [552.0, 18258.0], [567.0, 18036.0], [566.0, 18055.0], [604.0, 17569.0], [607.0, 17547.0], [593.0, 17745.5], [595.0, 17705.0], [594.0, 17710.0], [597.0, 17655.0], [596.0, 17704.0], [606.0, 17543.0], [605.0, 17554.0], [603.0, 17572.0], [602.0, 17598.0], [601.0, 17600.0], [600.0, 17605.0], [591.0, 17747.0], [577.0, 17996.0], [576.0, 18011.0], [579.0, 17968.0], [578.0, 17983.0], [581.0, 17909.0], [580.0, 17914.0], [583.0, 17876.0], [582.0, 17880.0], [590.0, 17801.0], [589.0, 17817.0], [588.0, 17817.0], [587.0, 17837.0], [586.0, 17863.0], [585.0, 17870.0], [584.0, 17872.0], [599.0, 17654.0], [598.0, 17655.0], [636.0, 17088.0], [639.0, 17042.0], [625.0, 17250.0], [624.0, 17293.0], [627.0, 17225.0], [626.0, 17230.0], [629.0, 17174.0], [628.0, 17214.0], [638.0, 17070.0], [637.0, 17067.0], [635.0, 17094.0], [634.0, 17094.0], [633.0, 17122.0], [632.0, 17152.0], [623.0, 17294.0], [609.0, 17534.0], [608.0, 17541.0], [611.0, 17518.0], [610.0, 17534.0], [613.0, 17425.0], [612.0, 17494.0], [615.0, 17379.0], [614.0, 17403.0], [622.0, 17292.0], [621.0, 17313.0], [620.0, 17342.0], [619.0, 17341.0], [618.0, 17349.0], [617.0, 17373.0], [616.0, 17376.0], [631.0, 17153.0], [630.0, 17168.0], [665.0, 16691.0], [669.0, 16646.0], [670.0, 16644.0], [656.0, 16808.0], [658.0, 16789.0], [657.0, 16782.0], [660.0, 16763.0], [659.0, 16771.0], [668.0, 16655.0], [667.0, 16657.0], [666.0, 16674.0], [664.0, 16731.0], [647.0, 16936.0], [646.0, 16946.0], [645.0, 16943.0], [644.0, 16949.0], [643.0, 16979.0], [642.0, 17000.0], [641.0, 17006.0], [640.0, 17030.0], [655.0, 16818.0], [654.0, 16833.0], [653.0, 16848.0], [652.0, 16858.0], [651.0, 16869.0], [650.0, 16872.0], [649.0, 16890.0], [648.0, 16927.0], [663.0, 16735.0], [661.0, 16756.0], [700.0, 16335.0], [703.0, 16255.0], [689.0, 16491.0], [688.0, 16533.0], [691.0, 16482.0], [690.0, 16494.0], [693.0, 16454.0], [692.0, 16468.0], [702.0, 16289.0], [701.0, 16294.0], [699.0, 16349.0], [698.0, 16354.0], [697.0, 16459.0], [696.0, 16384.0], [687.0, 16557.0], [672.0, 16619.5], [674.0, 16549.0], [673.0, 16571.0], [676.0, 16710.0], [675.0, 16534.0], [678.0, 16672.0], [677.0, 16693.0], [686.0, 16569.0], [685.0, 16595.0], [684.0, 16597.0], [683.0, 16614.0], [681.0, 16622.0], [680.0, 16655.0], [695.0, 16394.0], [694.0, 16423.0], [732.0, 15830.0], [735.0, 15778.0], [721.0, 15983.0], [720.0, 15992.0], [723.0, 15960.0], [722.0, 15964.0], [725.0, 15942.0], [724.0, 15944.0], [734.0, 15804.0], [733.0, 15820.0], [731.0, 15846.0], [730.0, 15841.0], [729.0, 15847.0], [728.0, 15917.0], [719.0, 16012.0], [705.0, 16220.0], [704.0, 16250.0], [707.0, 16210.0], [706.0, 16209.0], [709.0, 16169.0], [708.0, 16169.0], [711.0, 16111.0], [710.0, 16133.0], [718.0, 16021.0], [717.0, 16055.0], [716.0, 16079.5], [714.0, 16093.0], [713.0, 16092.0], [712.0, 16100.0], [727.0, 15907.0], [726.0, 15934.0], [764.0, 15334.0], [767.0, 15300.0], [753.0, 15507.0], [752.0, 15532.0], [755.0, 15487.0], [754.0, 15504.0], [757.0, 15428.0], [756.0, 15473.0], [766.0, 15320.0], [765.0, 15321.0], [763.0, 15346.0], [762.0, 15403.0], [761.0, 15411.0], [760.0, 15424.0], [751.0, 15569.0], [737.0, 15771.0], [736.0, 15785.0], [739.0, 15719.0], [738.0, 15736.0], [741.0, 15701.0], [740.0, 15699.0], [743.0, 15672.0], [742.0, 15718.0], [750.0, 15550.0], [749.0, 15573.0], [748.0, 15600.5], [746.0, 15628.0], [745.0, 15644.0], [744.0, 15653.0], [759.0, 15427.0], [758.0, 15431.0], [794.0, 14882.0], [798.0, 14818.0], [799.0, 14812.0], [785.0, 15037.0], [784.0, 15037.0], [787.0, 14984.0], [786.0, 15003.0], [789.0, 14971.0], [788.0, 14981.0], [797.0, 14834.0], [796.0, 14855.0], [795.0, 14863.0], [793.0, 14915.0], [774.0, 15192.0], [773.0, 15209.0], [772.0, 15210.0], [771.0, 15243.0], [770.0, 15256.0], [769.0, 15262.0], [768.0, 15274.0], [783.0, 15047.0], [782.0, 15064.0], [781.0, 15066.0], [780.0, 15109.0], [779.0, 15130.0], [778.0, 15132.0], [777.0, 15148.0], [776.0, 15170.5], [791.0, 14922.0], [790.0, 14923.0], [828.0, 14400.0], [831.0, 14370.0], [816.0, 14511.0], [818.0, 14527.0], [817.0, 14509.0], [820.0, 14493.0], [819.0, 14487.0], [830.0, 14371.0], [829.0, 14374.0], [827.0, 14405.0], [826.0, 14417.0], [825.0, 14426.0], [824.0, 14445.0], [815.0, 14563.0], [801.0, 14789.0], [800.0, 14806.0], [803.0, 14760.0], [802.0, 14772.0], [805.0, 14707.0], [804.0, 14741.0], [807.0, 14681.0], [806.0, 14685.0], [814.0, 14579.0], [813.0, 14612.0], [812.0, 14615.0], [811.0, 14626.0], [810.0, 14652.0], [809.0, 14668.5], [823.0, 14468.5], [821.0, 14482.0], [860.0, 13978.0], [863.0, 13975.0], [849.0, 14113.0], [848.0, 14132.0], [851.0, 14092.0], [850.0, 14110.0], [853.0, 14066.0], [852.0, 14070.0], [862.0, 13977.0], [861.0, 13963.0], [859.0, 14014.0], [858.0, 14062.0], [857.0, 14058.0], [856.0, 14076.0], [847.0, 14149.0], [833.0, 14342.0], [832.0, 14362.0], [835.0, 14342.0], [834.0, 14348.0], [837.0, 14311.0], [836.0, 14323.0], [839.0, 14284.0], [838.0, 14298.0], [846.0, 14152.0], [845.0, 14165.0], [844.0, 14204.0], [843.0, 14211.0], [842.0, 14219.0], [841.0, 14261.0], [840.0, 14272.0], [855.0, 14089.0], [854.0, 14085.0], [892.0, 13418.0], [895.0, 13367.0], [881.0, 13605.0], [880.0, 13637.0], [883.0, 13591.0], [882.0, 13612.0], [885.0, 13578.0], [884.0, 13594.0], [894.0, 13386.0], [893.0, 13390.0], [891.0, 13435.0], [890.0, 13484.0], [889.0, 13493.0], [888.0, 13500.0], [879.0, 13689.0], [865.0, 13907.0], [864.0, 13934.0], [867.0, 13887.0], [866.0, 13893.0], [869.0, 13838.0], [868.0, 13876.0], [871.0, 13800.0], [870.0, 13828.0], [878.0, 13719.0], [877.0, 13754.0], [876.0, 13763.0], [875.0, 13788.0], [874.0, 13797.0], [873.0, 13796.0], [872.0, 13802.0], [887.0, 13518.0], [886.0, 13547.0], [924.0, 12930.0], [927.0, 12885.0], [913.0, 13116.0], [912.0, 13156.0], [915.0, 13076.0], [914.0, 13104.0], [917.0, 13052.0], [916.0, 13065.0], [926.0, 12908.0], [925.0, 12922.0], [923.0, 12954.0], [922.0, 12971.0], [921.0, 12976.0], [920.0, 12982.0], [911.0, 13169.0], [897.0, 13348.5], [899.0, 13314.0], [898.0, 13326.0], [901.0, 13311.0], [900.0, 13312.0], [903.0, 13287.0], [902.0, 13287.0], [910.0, 13181.0], [909.0, 13186.0], [908.0, 13195.0], [907.0, 13224.0], [906.0, 13261.0], [905.0, 13273.0], [904.0, 13294.0], [919.0, 13009.0], [918.0, 13030.0], [956.0, 12589.0], [959.0, 12299.0], [945.0, 12531.0], [944.0, 12540.0], [947.0, 12506.0], [946.0, 12800.0], [949.0, 12701.0], [948.0, 12492.0], [958.0, 12309.0], [957.0, 12584.0], [955.0, 12502.0], [954.0, 12680.0], [953.0, 12391.0], [952.0, 12430.0], [943.0, 12541.0], [928.0, 12866.0], [931.0, 13002.0], [930.0, 12951.5], [933.0, 12800.0], [932.0, 12999.0], [935.0, 12989.0], [934.0, 12997.0], [942.0, 12550.0], [941.0, 12600.0], [940.0, 12629.0], [939.0, 12868.0], [938.0, 12657.0], [937.0, 12952.0], [936.0, 12721.0], [951.0, 12659.0], [950.0, 12734.0], [988.0, 11711.0], [991.0, 11645.0], [977.0, 11972.0], [976.0, 11973.0], [979.0, 12178.0], [978.0, 11946.0], [981.0, 11865.0], [980.0, 11891.0], [990.0, 11649.0], [989.0, 11691.0], [987.0, 11703.0], [986.0, 11751.0], [985.0, 11775.0], [984.0, 11797.0], [975.0, 12267.0], [961.0, 12279.0], [960.0, 12591.0], [963.0, 12422.0], [962.0, 12553.0], [965.0, 12430.0], [964.0, 12455.0], [967.0, 12386.0], [966.0, 12130.0], [974.0, 11985.0], [973.0, 12005.0], [972.0, 12037.0], [971.0, 12067.0], [970.0, 12066.0], [969.0, 12099.0], [968.0, 12118.0], [983.0, 11802.0], [982.0, 11849.0], [1000.0, 11551.0], [999.0, 11584.0], [998.0, 11661.0], [997.0, 11624.0], [995.0, 11568.0], [994.0, 11592.0], [993.0, 11640.0], [992.0, 11643.0], [1.0, 64281.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.53100000000023, 27961.192999999996]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 900.6, "minX": 1.62248766E12, "maxY": 223325.78333333333, "series": [{"data": [[1.62248766E12, 223325.78333333333], [1.62248772E12, 59483.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62248766E12, 2899.4], [1.62248772E12, 900.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248772E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19173.993446920053, "minX": 1.62248766E12, "maxY": 56250.784810126606, "series": [{"data": [[1.62248766E12, 19173.993446920053], [1.62248772E12, 56250.784810126606]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248772E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18890.8269986894, "minX": 1.62248766E12, "maxY": 55968.89873417722, "series": [{"data": [[1.62248766E12, 18890.8269986894], [1.62248772E12, 55968.89873417722]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248772E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6132.924050632909, "minX": 1.62248766E12, "maxY": 12729.532110091757, "series": [{"data": [[1.62248766E12, 12729.532110091757], [1.62248772E12, 6132.924050632909]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248772E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 37264.0, "minX": 1.62248766E12, "maxY": 64281.0, "series": [{"data": [[1.62248766E12, 46538.0], [1.62248772E12, 64281.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62248766E12, 46215.4], [1.62248772E12, 63113.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62248766E12, 46538.0], [1.62248772E12, 64167.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62248766E12, 46316.4], [1.62248772E12, 63686.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62248766E12, 37264.0], [1.62248772E12, 46741.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62248766E12, 43836.0], [1.62248772E12, 56966.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248772E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11567.5, "minX": 1.0, "maxY": 62161.5, "series": [{"data": [[8.0, 45631.0], [9.0, 47219.0], [10.0, 53229.0], [11.0, 47131.0], [12.0, 49071.5], [13.0, 60130.0], [14.0, 55175.5], [15.0, 62161.5], [1.0, 38337.5], [4.0, 40054.0], [16.0, 58624.5], [17.0, 58536.5], [6.0, 43236.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 11567.5], [65.0, 15628.0], [33.0, 21067.0], [71.0, 21859.0], [9.0, 22402.0], [48.0, 12021.0], [55.0, 12997.0], [54.0, 13857.0], [56.0, 19847.0], [60.0, 17734.5], [61.0, 18162.0], [63.0, 15989.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 71.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11294.5, "minX": 1.0, "maxY": 61880.5, "series": [{"data": [[8.0, 45356.0], [9.0, 46936.5], [10.0, 52951.0], [11.0, 46850.0], [12.0, 48789.0], [13.0, 59849.0], [14.0, 54896.0], [15.0, 61880.5], [1.0, 38058.0], [4.0, 39775.0], [16.0, 58346.5], [17.0, 58257.0], [6.0, 42957.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 11294.5], [65.0, 15348.0], [33.0, 20786.0], [71.0, 21569.0], [9.0, 22118.0], [48.0, 11741.0], [55.0, 12709.0], [54.0, 13577.0], [56.0, 19564.0], [60.0, 17449.5], [61.0, 17881.0], [63.0, 15704.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 71.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62248766E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62248766E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248766E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.62248766E12, "maxY": 11.666666666666666, "series": [{"data": [[1.62248766E12, 1.05], [1.62248772E12, 3.95]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62248766E12, 11.666666666666666]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248772E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.62248766E12, "maxY": 11.666666666666666, "series": [{"data": [[1.62248766E12, 11.666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.62248766E12, 1.05], [1.62248772E12, 3.95]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248772E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.62248766E12, "maxY": 11.666666666666666, "series": [{"data": [[1.62248766E12, 1.05], [1.62248772E12, 3.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62248766E12, 11.666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248772E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

