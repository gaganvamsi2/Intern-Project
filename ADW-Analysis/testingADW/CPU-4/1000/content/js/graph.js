/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10093.0, "minX": 0.0, "maxY": 34670.0, "series": [{"data": [[0.0, 10093.0], [0.1, 10216.0], [0.2, 10245.0], [0.3, 10245.0], [0.4, 10296.0], [0.5, 10333.0], [0.6, 10358.0], [0.7, 10405.0], [0.8, 10418.0], [0.9, 10445.0], [1.0, 10500.0], [1.1, 10507.0], [1.2, 10511.0], [1.3, 10520.0], [1.4, 10520.0], [1.5, 10567.0], [1.6, 10576.0], [1.7, 10593.0], [1.8, 10607.0], [1.9, 10613.0], [2.0, 10628.0], [2.1, 10651.0], [2.2, 10661.0], [2.3, 10698.0], [2.4, 10701.0], [2.5, 10745.0], [2.6, 10750.0], [2.7, 10754.0], [2.8, 10772.0], [2.9, 10785.0], [3.0, 10786.0], [3.1, 10798.0], [3.2, 10822.0], [3.3, 10851.0], [3.4, 10854.0], [3.5, 10877.0], [3.6, 10937.0], [3.7, 10945.0], [3.8, 10951.0], [3.9, 10964.0], [4.0, 10978.0], [4.1, 11005.0], [4.2, 11016.0], [4.3, 11031.0], [4.4, 11039.0], [4.5, 11061.0], [4.6, 11070.0], [4.7, 11098.0], [4.8, 11120.0], [4.9, 11133.0], [5.0, 11137.0], [5.1, 11141.0], [5.2, 11185.0], [5.3, 11185.0], [5.4, 11229.0], [5.5, 11231.0], [5.6, 11255.0], [5.7, 11257.0], [5.8, 11265.0], [5.9, 11280.0], [6.0, 11286.0], [6.1, 11344.0], [6.2, 11345.0], [6.3, 11356.0], [6.4, 11360.0], [6.5, 11365.0], [6.6, 11412.0], [6.7, 11439.0], [6.8, 11441.0], [6.9, 11448.0], [7.0, 11450.0], [7.1, 11452.0], [7.2, 11471.0], [7.3, 11472.0], [7.4, 11489.0], [7.5, 11490.0], [7.6, 11500.0], [7.7, 11502.0], [7.8, 11509.0], [7.9, 11509.0], [8.0, 11509.0], [8.1, 11523.0], [8.2, 11550.0], [8.3, 11568.0], [8.4, 11585.0], [8.5, 11593.0], [8.6, 11621.0], [8.7, 11622.0], [8.8, 11625.0], [8.9, 11674.0], [9.0, 11684.0], [9.1, 11689.0], [9.2, 11689.0], [9.3, 11709.0], [9.4, 11745.0], [9.5, 11772.0], [9.6, 11785.0], [9.7, 11798.0], [9.8, 11798.0], [9.9, 11807.0], [10.0, 11808.0], [10.1, 11814.0], [10.2, 11839.0], [10.3, 11864.0], [10.4, 11867.0], [10.5, 11896.0], [10.6, 11900.0], [10.7, 11903.0], [10.8, 11928.0], [10.9, 11935.0], [11.0, 11945.0], [11.1, 11988.0], [11.2, 12000.0], [11.3, 12026.0], [11.4, 12057.0], [11.5, 12080.0], [11.6, 12087.0], [11.7, 12109.0], [11.8, 12123.0], [11.9, 12124.0], [12.0, 12142.0], [12.1, 12158.0], [12.2, 12227.0], [12.3, 12236.0], [12.4, 12238.0], [12.5, 12255.0], [12.6, 12256.0], [12.7, 12259.0], [12.8, 12298.0], [12.9, 12316.0], [13.0, 12324.0], [13.1, 12327.0], [13.2, 12331.0], [13.3, 12357.0], [13.4, 12369.0], [13.5, 12390.0], [13.6, 12422.0], [13.7, 12425.0], [13.8, 12444.0], [13.9, 12445.0], [14.0, 12456.0], [14.1, 12484.0], [14.2, 12511.0], [14.3, 12531.0], [14.4, 12550.0], [14.5, 12560.0], [14.6, 12590.0], [14.7, 12600.0], [14.8, 12607.0], [14.9, 12624.0], [15.0, 12635.0], [15.1, 12675.0], [15.2, 12683.0], [15.3, 12683.0], [15.4, 12700.0], [15.5, 12734.0], [15.6, 12735.0], [15.7, 12737.0], [15.8, 12751.0], [15.9, 12769.0], [16.0, 12822.0], [16.1, 12833.0], [16.2, 12839.0], [16.3, 12864.0], [16.4, 12871.0], [16.5, 12880.0], [16.6, 12881.0], [16.7, 12911.0], [16.8, 12934.0], [16.9, 12947.0], [17.0, 12969.0], [17.1, 12982.0], [17.2, 13000.0], [17.3, 13004.0], [17.4, 13013.0], [17.5, 13073.0], [17.6, 13084.0], [17.7, 13094.0], [17.8, 13108.0], [17.9, 13110.0], [18.0, 13111.0], [18.1, 13116.0], [18.2, 13122.0], [18.3, 13130.0], [18.4, 13148.0], [18.5, 13158.0], [18.6, 13193.0], [18.7, 13267.0], [18.8, 13277.0], [18.9, 13277.0], [19.0, 13284.0], [19.1, 13295.0], [19.2, 13295.0], [19.3, 13306.0], [19.4, 13315.0], [19.5, 13351.0], [19.6, 13364.0], [19.7, 13367.0], [19.8, 13387.0], [19.9, 13424.0], [20.0, 13436.0], [20.1, 13448.0], [20.2, 13465.0], [20.3, 13469.0], [20.4, 13485.0], [20.5, 13485.0], [20.6, 13502.0], [20.7, 13516.0], [20.8, 13521.0], [20.9, 13536.0], [21.0, 13552.0], [21.1, 13562.0], [21.2, 13568.0], [21.3, 13579.0], [21.4, 13594.0], [21.5, 13604.0], [21.6, 13624.0], [21.7, 13637.0], [21.8, 13647.0], [21.9, 13662.0], [22.0, 13670.0], [22.1, 13705.0], [22.2, 13722.0], [22.3, 13782.0], [22.4, 13785.0], [22.5, 13789.0], [22.6, 13812.0], [22.7, 13818.0], [22.8, 13826.0], [22.9, 13829.0], [23.0, 13839.0], [23.1, 13846.0], [23.2, 13874.0], [23.3, 13887.0], [23.4, 13890.0], [23.5, 13961.0], [23.6, 13990.0], [23.7, 13993.0], [23.8, 13997.0], [23.9, 14010.0], [24.0, 14012.0], [24.1, 14024.0], [24.2, 14040.0], [24.3, 14091.0], [24.4, 14091.0], [24.5, 14092.0], [24.6, 14101.0], [24.7, 14118.0], [24.8, 14131.0], [24.9, 14133.0], [25.0, 14145.0], [25.1, 14150.0], [25.2, 14153.0], [25.3, 14215.0], [25.4, 14229.0], [25.5, 14244.0], [25.6, 14273.0], [25.7, 14274.0], [25.8, 14287.0], [25.9, 14300.0], [26.0, 14327.0], [26.1, 14345.0], [26.2, 14375.0], [26.3, 14386.0], [26.4, 14387.0], [26.5, 14390.0], [26.6, 14402.0], [26.7, 14426.0], [26.8, 14430.0], [26.9, 14471.0], [27.0, 14485.0], [27.1, 14488.0], [27.2, 14493.0], [27.3, 14507.0], [27.4, 14517.0], [27.5, 14519.0], [27.6, 14530.0], [27.7, 14556.0], [27.8, 14576.0], [27.9, 14596.0], [28.0, 14607.0], [28.1, 14610.0], [28.2, 14648.0], [28.3, 14649.0], [28.4, 14682.0], [28.5, 14685.0], [28.6, 14693.0], [28.7, 14701.0], [28.8, 14726.0], [28.9, 14755.0], [29.0, 14801.0], [29.1, 14813.0], [29.2, 14815.0], [29.3, 14816.0], [29.4, 14836.0], [29.5, 14842.0], [29.6, 14875.0], [29.7, 14880.0], [29.8, 14891.0], [29.9, 14911.0], [30.0, 14928.0], [30.1, 14936.0], [30.2, 14944.0], [30.3, 14949.0], [30.4, 15028.0], [30.5, 15030.0], [30.6, 15038.0], [30.7, 15039.0], [30.8, 15039.0], [30.9, 15049.0], [31.0, 15088.0], [31.1, 15101.0], [31.2, 15125.0], [31.3, 15138.0], [31.4, 15151.0], [31.5, 15153.0], [31.6, 15155.0], [31.7, 15162.0], [31.8, 15179.0], [31.9, 15187.0], [32.0, 15208.0], [32.1, 15211.0], [32.2, 15251.0], [32.3, 15265.0], [32.4, 15303.0], [32.5, 15303.0], [32.6, 15359.0], [32.7, 15359.0], [32.8, 15375.0], [32.9, 15393.0], [33.0, 15398.0], [33.1, 15415.0], [33.2, 15427.0], [33.3, 15429.0], [33.4, 15441.0], [33.5, 15444.0], [33.6, 15463.0], [33.7, 15498.0], [33.8, 15500.0], [33.9, 15513.0], [34.0, 15536.0], [34.1, 15541.0], [34.2, 15560.0], [34.3, 15581.0], [34.4, 15600.0], [34.5, 15607.0], [34.6, 15609.0], [34.7, 15611.0], [34.8, 15613.0], [34.9, 15658.0], [35.0, 15665.0], [35.1, 15671.0], [35.2, 15687.0], [35.3, 15696.0], [35.4, 15724.0], [35.5, 15747.0], [35.6, 15750.0], [35.7, 15754.0], [35.8, 15771.0], [35.9, 15808.0], [36.0, 15811.0], [36.1, 15823.0], [36.2, 15829.0], [36.3, 15844.0], [36.4, 15858.0], [36.5, 15872.0], [36.6, 15879.0], [36.7, 15932.0], [36.8, 15941.0], [36.9, 15941.0], [37.0, 15962.0], [37.1, 15982.0], [37.2, 15989.0], [37.3, 16018.0], [37.4, 16019.0], [37.5, 16037.0], [37.6, 16037.0], [37.7, 16038.0], [37.8, 16083.0], [37.9, 16107.0], [38.0, 16109.0], [38.1, 16123.0], [38.2, 16138.0], [38.3, 16144.0], [38.4, 16153.0], [38.5, 16161.0], [38.6, 16181.0], [38.7, 16209.0], [38.8, 16219.0], [38.9, 16229.0], [39.0, 16246.0], [39.1, 16266.0], [39.2, 16301.0], [39.3, 16317.0], [39.4, 16339.0], [39.5, 16375.0], [39.6, 16394.0], [39.7, 16400.0], [39.8, 16402.0], [39.9, 16409.0], [40.0, 16413.0], [40.1, 16421.0], [40.2, 16425.0], [40.3, 16456.0], [40.4, 16483.0], [40.5, 16505.0], [40.6, 16573.0], [40.7, 16589.0], [40.8, 16604.0], [40.9, 16617.0], [41.0, 16631.0], [41.1, 16637.0], [41.2, 16640.0], [41.3, 16644.0], [41.4, 16665.0], [41.5, 16677.0], [41.6, 16677.0], [41.7, 16687.0], [41.8, 16696.0], [41.9, 16704.0], [42.0, 16712.0], [42.1, 16762.0], [42.2, 16780.0], [42.3, 16784.0], [42.4, 16788.0], [42.5, 16788.0], [42.6, 16794.0], [42.7, 16805.0], [42.8, 16807.0], [42.9, 16813.0], [43.0, 16858.0], [43.1, 16869.0], [43.2, 16885.0], [43.3, 16898.0], [43.4, 16939.0], [43.5, 16945.0], [43.6, 16950.0], [43.7, 16976.0], [43.8, 16983.0], [43.9, 16999.0], [44.0, 17086.0], [44.1, 17087.0], [44.2, 17088.0], [44.3, 17105.0], [44.4, 17113.0], [44.5, 17118.0], [44.6, 17124.0], [44.7, 17152.0], [44.8, 17183.0], [44.9, 17209.0], [45.0, 17218.0], [45.1, 17223.0], [45.2, 17306.0], [45.3, 17316.0], [45.4, 17321.0], [45.5, 17337.0], [45.6, 17343.0], [45.7, 17364.0], [45.8, 17381.0], [45.9, 17393.0], [46.0, 17417.0], [46.1, 17421.0], [46.2, 17436.0], [46.3, 17500.0], [46.4, 17522.0], [46.5, 17592.0], [46.6, 17597.0], [46.7, 17599.0], [46.8, 17621.0], [46.9, 17622.0], [47.0, 17631.0], [47.1, 17645.0], [47.2, 17645.0], [47.3, 17646.0], [47.4, 17666.0], [47.5, 17667.0], [47.6, 17702.0], [47.7, 17711.0], [47.8, 17728.0], [47.9, 17740.0], [48.0, 17841.0], [48.1, 17850.0], [48.2, 17852.0], [48.3, 17853.0], [48.4, 17868.0], [48.5, 17870.0], [48.6, 17896.0], [48.7, 17917.0], [48.8, 17921.0], [48.9, 17940.0], [49.0, 17942.0], [49.1, 17953.0], [49.2, 17959.0], [49.3, 17969.0], [49.4, 17970.0], [49.5, 18013.0], [49.6, 18031.0], [49.7, 18046.0], [49.8, 18060.0], [49.9, 18066.0], [50.0, 18087.0], [50.1, 18115.0], [50.2, 18123.0], [50.3, 18145.0], [50.4, 18151.0], [50.5, 18156.0], [50.6, 18163.0], [50.7, 18163.0], [50.8, 18174.0], [50.9, 18186.0], [51.0, 18247.0], [51.1, 18257.0], [51.2, 18261.0], [51.3, 18262.0], [51.4, 18263.0], [51.5, 18270.0], [51.6, 18276.0], [51.7, 18279.0], [51.8, 18285.0], [51.9, 18288.0], [52.0, 18358.0], [52.1, 18396.0], [52.2, 18397.0], [52.3, 18422.0], [52.4, 18438.0], [52.5, 18454.0], [52.6, 18461.0], [52.7, 18481.0], [52.8, 18481.0], [52.9, 18504.0], [53.0, 18521.0], [53.1, 18528.0], [53.2, 18574.0], [53.3, 18579.0], [53.4, 18582.0], [53.5, 18583.0], [53.6, 18599.0], [53.7, 18614.0], [53.8, 18653.0], [53.9, 18664.0], [54.0, 18685.0], [54.1, 18686.0], [54.2, 18687.0], [54.3, 18690.0], [54.4, 18692.0], [54.5, 18696.0], [54.6, 18716.0], [54.7, 18738.0], [54.8, 18745.0], [54.9, 18753.0], [55.0, 18763.0], [55.1, 18781.0], [55.2, 18791.0], [55.3, 18800.0], [55.4, 18851.0], [55.5, 18855.0], [55.6, 18900.0], [55.7, 18916.0], [55.8, 18956.0], [55.9, 18956.0], [56.0, 18968.0], [56.1, 18991.0], [56.2, 18992.0], [56.3, 19040.0], [56.4, 19063.0], [56.5, 19072.0], [56.6, 19073.0], [56.7, 19073.0], [56.8, 19086.0], [56.9, 19092.0], [57.0, 19148.0], [57.1, 19161.0], [57.2, 19170.0], [57.3, 19183.0], [57.4, 19184.0], [57.5, 19187.0], [57.6, 19191.0], [57.7, 19209.0], [57.8, 19213.0], [57.9, 19270.0], [58.0, 19395.0], [58.1, 19396.0], [58.2, 19399.0], [58.3, 19412.0], [58.4, 19422.0], [58.5, 19425.0], [58.6, 19430.0], [58.7, 19435.0], [58.8, 19447.0], [58.9, 19467.0], [59.0, 19473.0], [59.1, 19481.0], [59.2, 19500.0], [59.3, 19506.0], [59.4, 19510.0], [59.5, 19549.0], [59.6, 19567.0], [59.7, 19590.0], [59.8, 19595.0], [59.9, 19618.0], [60.0, 19644.0], [60.1, 19646.0], [60.2, 19659.0], [60.3, 19673.0], [60.4, 19710.0], [60.5, 19775.0], [60.6, 19799.0], [60.7, 19804.0], [60.8, 19809.0], [60.9, 19814.0], [61.0, 19819.0], [61.1, 19823.0], [61.2, 19836.0], [61.3, 19836.0], [61.4, 19859.0], [61.5, 19862.0], [61.6, 19863.0], [61.7, 19873.0], [61.8, 19882.0], [61.9, 19882.0], [62.0, 19926.0], [62.1, 19928.0], [62.2, 19937.0], [62.3, 19954.0], [62.4, 19957.0], [62.5, 19970.0], [62.6, 19982.0], [62.7, 19983.0], [62.8, 19991.0], [62.9, 20022.0], [63.0, 20033.0], [63.1, 20035.0], [63.2, 20058.0], [63.3, 20066.0], [63.4, 20067.0], [63.5, 20070.0], [63.6, 20089.0], [63.7, 20148.0], [63.8, 20161.0], [63.9, 20171.0], [64.0, 20198.0], [64.1, 20203.0], [64.2, 20207.0], [64.3, 20211.0], [64.4, 20236.0], [64.5, 20257.0], [64.6, 20291.0], [64.7, 20326.0], [64.8, 20328.0], [64.9, 20345.0], [65.0, 20356.0], [65.1, 20361.0], [65.2, 20377.0], [65.3, 20387.0], [65.4, 20412.0], [65.5, 20415.0], [65.6, 20416.0], [65.7, 20418.0], [65.8, 20428.0], [65.9, 20465.0], [66.0, 20467.0], [66.1, 20468.0], [66.2, 20481.0], [66.3, 20486.0], [66.4, 20491.0], [66.5, 20557.0], [66.6, 20563.0], [66.7, 20574.0], [66.8, 20574.0], [66.9, 20578.0], [67.0, 20630.0], [67.1, 20632.0], [67.2, 20644.0], [67.3, 20655.0], [67.4, 20663.0], [67.5, 20726.0], [67.6, 20751.0], [67.7, 20775.0], [67.8, 20781.0], [67.9, 20781.0], [68.0, 20803.0], [68.1, 20842.0], [68.2, 20858.0], [68.3, 20861.0], [68.4, 20881.0], [68.5, 20882.0], [68.6, 20888.0], [68.7, 20888.0], [68.8, 20889.0], [68.9, 20912.0], [69.0, 20936.0], [69.1, 20941.0], [69.2, 20942.0], [69.3, 20962.0], [69.4, 20964.0], [69.5, 20984.0], [69.6, 20997.0], [69.7, 21013.0], [69.8, 21018.0], [69.9, 21020.0], [70.0, 21027.0], [70.1, 21036.0], [70.2, 21066.0], [70.3, 21096.0], [70.4, 21118.0], [70.5, 21129.0], [70.6, 21146.0], [70.7, 21157.0], [70.8, 21186.0], [70.9, 21215.0], [71.0, 21245.0], [71.1, 21266.0], [71.2, 21271.0], [71.3, 21275.0], [71.4, 21279.0], [71.5, 21280.0], [71.6, 21294.0], [71.7, 21296.0], [71.8, 21315.0], [71.9, 21319.0], [72.0, 21339.0], [72.1, 21379.0], [72.2, 21385.0], [72.3, 21386.0], [72.4, 21394.0], [72.5, 21405.0], [72.6, 21445.0], [72.7, 21446.0], [72.8, 21455.0], [72.9, 21477.0], [73.0, 21480.0], [73.1, 21508.0], [73.2, 21515.0], [73.3, 21602.0], [73.4, 21612.0], [73.5, 21616.0], [73.6, 21644.0], [73.7, 21648.0], [73.8, 21652.0], [73.9, 21678.0], [74.0, 21692.0], [74.1, 21697.0], [74.2, 21767.0], [74.3, 21792.0], [74.4, 21798.0], [74.5, 21801.0], [74.6, 21823.0], [74.7, 21858.0], [74.8, 21865.0], [74.9, 21867.0], [75.0, 21877.0], [75.1, 21900.0], [75.2, 21934.0], [75.3, 21967.0], [75.4, 22011.0], [75.5, 22034.0], [75.6, 22035.0], [75.7, 22035.0], [75.8, 22045.0], [75.9, 22064.0], [76.0, 22099.0], [76.1, 22102.0], [76.2, 22106.0], [76.3, 22110.0], [76.4, 22115.0], [76.5, 22122.0], [76.6, 22159.0], [76.7, 22161.0], [76.8, 22171.0], [76.9, 22184.0], [77.0, 22221.0], [77.1, 22231.0], [77.2, 22263.0], [77.3, 22267.0], [77.4, 22273.0], [77.5, 22297.0], [77.6, 22311.0], [77.7, 22319.0], [77.8, 22320.0], [77.9, 22347.0], [78.0, 22347.0], [78.1, 22350.0], [78.2, 22350.0], [78.3, 22353.0], [78.4, 22497.0], [78.5, 22542.0], [78.6, 22568.0], [78.7, 22631.0], [78.8, 22637.0], [78.9, 22653.0], [79.0, 22701.0], [79.1, 22708.0], [79.2, 22717.0], [79.3, 22837.0], [79.4, 23020.0], [79.5, 23020.0], [79.6, 23098.0], [79.7, 23111.0], [79.8, 23120.0], [79.9, 23137.0], [80.0, 23141.0], [80.1, 23152.0], [80.2, 23196.0], [80.3, 23252.0], [80.4, 23322.0], [80.5, 23340.0], [80.6, 23349.0], [80.7, 23373.0], [80.8, 23440.0], [80.9, 23558.0], [81.0, 23565.0], [81.1, 23589.0], [81.2, 23712.0], [81.3, 23743.0], [81.4, 23748.0], [81.5, 23784.0], [81.6, 23823.0], [81.7, 23941.0], [81.8, 23944.0], [81.9, 23945.0], [82.0, 24068.0], [82.1, 24069.0], [82.2, 24075.0], [82.3, 24176.0], [82.4, 24204.0], [82.5, 24265.0], [82.6, 24268.0], [82.7, 24284.0], [82.8, 24367.0], [82.9, 24368.0], [83.0, 24387.0], [83.1, 24464.0], [83.2, 24492.0], [83.3, 24557.0], [83.4, 24565.0], [83.5, 24587.0], [83.6, 24595.0], [83.7, 24694.0], [83.8, 24739.0], [83.9, 24765.0], [84.0, 24784.0], [84.1, 24805.0], [84.2, 24888.0], [84.3, 24910.0], [84.4, 24997.0], [84.5, 25016.0], [84.6, 25107.0], [84.7, 25118.0], [84.8, 25206.0], [84.9, 25216.0], [85.0, 25222.0], [85.1, 25225.0], [85.2, 25226.0], [85.3, 25308.0], [85.4, 25309.0], [85.5, 25328.0], [85.6, 25437.0], [85.7, 25441.0], [85.8, 25515.0], [85.9, 25525.0], [86.0, 25678.0], [86.1, 25680.0], [86.2, 25688.0], [86.3, 25697.0], [86.4, 25815.0], [86.5, 25893.0], [86.6, 25894.0], [86.7, 26007.0], [86.8, 26103.0], [86.9, 26113.0], [87.0, 26349.0], [87.1, 26395.0], [87.2, 26651.0], [87.3, 30715.0], [87.4, 30718.0], [87.5, 30789.0], [87.6, 30819.0], [87.7, 30845.0], [87.8, 30881.0], [87.9, 30963.0], [88.0, 31026.0], [88.1, 31035.0], [88.2, 31067.0], [88.3, 31093.0], [88.4, 31156.0], [88.5, 31167.0], [88.6, 31173.0], [88.7, 31194.0], [88.8, 31246.0], [88.9, 31302.0], [89.0, 31365.0], [89.1, 31457.0], [89.2, 31461.0], [89.3, 31468.0], [89.4, 31498.0], [89.5, 31512.0], [89.6, 31529.0], [89.7, 31615.0], [89.8, 31718.0], [89.9, 31790.0], [90.0, 31794.0], [90.1, 31796.0], [90.2, 31807.0], [90.3, 31808.0], [90.4, 31911.0], [90.5, 31934.0], [90.6, 31961.0], [90.7, 31985.0], [90.8, 32043.0], [90.9, 32107.0], [91.0, 32124.0], [91.1, 32143.0], [91.2, 32145.0], [91.3, 32146.0], [91.4, 32150.0], [91.5, 32349.0], [91.6, 32391.0], [91.7, 32406.0], [91.8, 32428.0], [91.9, 32445.0], [92.0, 32449.0], [92.1, 32458.0], [92.2, 32460.0], [92.3, 32537.0], [92.4, 32592.0], [92.5, 32645.0], [92.6, 32650.0], [92.7, 32654.0], [92.8, 32747.0], [92.9, 32749.0], [93.0, 32858.0], [93.1, 32871.0], [93.2, 32873.0], [93.3, 32877.0], [93.4, 32878.0], [93.5, 32936.0], [93.6, 32944.0], [93.7, 32978.0], [93.8, 33047.0], [93.9, 33052.0], [94.0, 33061.0], [94.1, 33141.0], [94.2, 33148.0], [94.3, 33158.0], [94.4, 33178.0], [94.5, 33184.0], [94.6, 33260.0], [94.7, 33269.0], [94.8, 33274.0], [94.9, 33287.0], [95.0, 33370.0], [95.1, 33435.0], [95.2, 33442.0], [95.3, 33458.0], [95.4, 33542.0], [95.5, 33550.0], [95.6, 33558.0], [95.7, 33570.0], [95.8, 33675.0], [95.9, 33719.0], [96.0, 33725.0], [96.1, 33735.0], [96.2, 33736.0], [96.3, 33753.0], [96.4, 33757.0], [96.5, 33770.0], [96.6, 33793.0], [96.7, 33853.0], [96.8, 33873.0], [96.9, 33925.0], [97.0, 33930.0], [97.1, 33942.0], [97.2, 33949.0], [97.3, 33979.0], [97.4, 33984.0], [97.5, 33992.0], [97.6, 34064.0], [97.7, 34087.0], [97.8, 34116.0], [97.9, 34120.0], [98.0, 34233.0], [98.1, 34274.0], [98.2, 34292.0], [98.3, 34401.0], [98.4, 34404.0], [98.5, 34426.0], [98.6, 34429.0], [98.7, 34489.0], [98.8, 34494.0], [98.9, 34499.0], [99.0, 34502.0], [99.1, 34506.0], [99.2, 34509.0], [99.3, 34516.0], [99.4, 34528.0], [99.5, 34568.0], [99.6, 34608.0], [99.7, 34631.0], [99.8, 34658.0], [99.9, 34670.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 10000.0, "maxY": 13.0, "series": [{"data": [[32900.0, 3.0], [33300.0, 1.0], [33700.0, 8.0], [34100.0, 2.0], [34500.0, 6.0], [10000.0, 1.0], [10200.0, 4.0], [10300.0, 2.0], [10400.0, 3.0], [10500.0, 7.0], [10600.0, 6.0], [10700.0, 8.0], [10800.0, 4.0], [10900.0, 5.0], [11000.0, 8.0], [11100.0, 6.0], [11200.0, 7.0], [11300.0, 5.0], [11400.0, 10.0], [11500.0, 10.0], [11600.0, 7.0], [11700.0, 6.0], [11800.0, 7.0], [11900.0, 6.0], [12000.0, 5.0], [12100.0, 5.0], [12200.0, 7.0], [12300.0, 7.0], [12400.0, 6.0], [12500.0, 5.0], [12600.0, 7.0], [12700.0, 6.0], [12800.0, 7.0], [12900.0, 5.0], [13000.0, 6.0], [13100.0, 9.0], [13200.0, 5.0], [13300.0, 6.0], [13400.0, 7.0], [13500.0, 9.0], [13600.0, 6.0], [13700.0, 5.0], [13800.0, 9.0], [13900.0, 4.0], [14000.0, 7.0], [14100.0, 7.0], [14200.0, 6.0], [14300.0, 7.0], [14400.0, 7.0], [14500.0, 7.0], [14600.0, 7.0], [14700.0, 3.0], [14800.0, 9.0], [14900.0, 5.0], [15000.0, 7.0], [15100.0, 9.0], [15200.0, 4.0], [15300.0, 7.0], [15400.0, 7.0], [15500.0, 6.0], [15600.0, 10.0], [15700.0, 5.0], [15800.0, 8.0], [15900.0, 6.0], [16000.0, 6.0], [16100.0, 8.0], [16200.0, 5.0], [16300.0, 5.0], [16600.0, 11.0], [16400.0, 8.0], [16800.0, 7.0], [17200.0, 3.0], [17400.0, 3.0], [17000.0, 3.0], [17600.0, 8.0], [17800.0, 7.0], [18000.0, 6.0], [18200.0, 10.0], [18400.0, 6.0], [19200.0, 3.0], [18600.0, 9.0], [18800.0, 3.0], [19000.0, 7.0], [19400.0, 9.0], [19600.0, 5.0], [19800.0, 13.0], [20000.0, 8.0], [20200.0, 6.0], [20400.0, 11.0], [20800.0, 9.0], [21000.0, 7.0], [21200.0, 9.0], [20600.0, 5.0], [21400.0, 6.0], [21600.0, 9.0], [21800.0, 6.0], [22000.0, 8.0], [22200.0, 6.0], [22400.0, 1.0], [22600.0, 3.0], [22800.0, 1.0], [23000.0, 3.0], [23200.0, 1.0], [23400.0, 1.0], [23800.0, 1.0], [24000.0, 3.0], [24200.0, 4.0], [24400.0, 2.0], [24600.0, 1.0], [24800.0, 2.0], [25000.0, 1.0], [25200.0, 5.0], [25400.0, 2.0], [25600.0, 4.0], [25800.0, 3.0], [26000.0, 1.0], [26600.0, 1.0], [30800.0, 3.0], [31000.0, 4.0], [31200.0, 1.0], [31400.0, 4.0], [31600.0, 1.0], [31800.0, 2.0], [32000.0, 1.0], [32400.0, 6.0], [32600.0, 3.0], [32800.0, 5.0], [33200.0, 4.0], [33600.0, 1.0], [34000.0, 2.0], [34400.0, 7.0], [33100.0, 5.0], [33500.0, 4.0], [33900.0, 7.0], [16500.0, 3.0], [16700.0, 8.0], [16900.0, 6.0], [17300.0, 8.0], [17100.0, 6.0], [17500.0, 5.0], [17700.0, 4.0], [17900.0, 8.0], [18100.0, 9.0], [18300.0, 3.0], [18500.0, 8.0], [18700.0, 7.0], [18900.0, 7.0], [19100.0, 7.0], [19300.0, 3.0], [19700.0, 3.0], [19500.0, 7.0], [19900.0, 9.0], [20100.0, 4.0], [20300.0, 7.0], [20700.0, 5.0], [20500.0, 5.0], [20900.0, 8.0], [21100.0, 5.0], [21300.0, 7.0], [21500.0, 2.0], [22300.0, 8.0], [21700.0, 3.0], [21900.0, 3.0], [22100.0, 9.0], [22500.0, 2.0], [23300.0, 4.0], [22700.0, 3.0], [23100.0, 6.0], [23500.0, 3.0], [23700.0, 4.0], [23900.0, 3.0], [24100.0, 1.0], [24300.0, 3.0], [24500.0, 4.0], [24700.0, 3.0], [24900.0, 2.0], [25100.0, 2.0], [25300.0, 3.0], [25500.0, 2.0], [26100.0, 2.0], [26300.0, 2.0], [30700.0, 3.0], [31500.0, 2.0], [30900.0, 1.0], [31100.0, 4.0], [31300.0, 2.0], [31700.0, 4.0], [31900.0, 4.0], [32100.0, 6.0], [32300.0, 2.0], [32500.0, 2.0], [32700.0, 2.0], [33000.0, 3.0], [33400.0, 3.0], [33800.0, 2.0], [34200.0, 3.0], [34600.0, 4.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 327.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 673.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 327.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 673.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.5509999999993, "minX": 1.62248802E12, "maxY": 500.5509999999993, "series": [{"data": [[1.62248802E12, 500.5509999999993]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248802E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10093.0, "minX": 1.0, "maxY": 34670.0, "series": [{"data": [[2.0, 34670.0], [3.0, 34631.0], [4.0, 34608.0], [5.0, 34568.0], [6.0, 34516.0], [7.0, 34506.0], [8.0, 34509.0], [9.0, 34502.0], [10.0, 34499.0], [11.0, 34489.0], [12.0, 34426.0], [13.0, 34429.0], [14.0, 34528.0], [15.0, 34494.0], [16.0, 34404.0], [17.0, 34401.0], [18.0, 34274.0], [19.0, 34292.0], [20.0, 34116.0], [21.0, 34120.0], [22.0, 34233.0], [23.0, 34087.0], [24.0, 33992.0], [25.0, 34064.0], [26.0, 33949.0], [27.0, 33942.0], [28.0, 33925.0], [29.0, 33930.0], [30.0, 33984.0], [31.0, 33979.0], [33.0, 33853.0], [32.0, 33873.0], [35.0, 33735.0], [34.0, 33793.0], [36.0, 33770.0], [39.0, 33757.0], [38.0, 33744.5], [41.0, 33675.0], [40.0, 33719.0], [43.0, 33570.0], [42.0, 33725.0], [45.0, 33558.0], [44.0, 33542.0], [47.0, 33442.0], [46.0, 33550.0], [49.0, 33458.0], [48.0, 33435.0], [51.0, 33184.0], [50.0, 33370.0], [53.0, 33274.0], [52.0, 33287.0], [55.0, 33158.0], [54.0, 33269.0], [57.0, 33178.0], [56.0, 33260.0], [59.0, 33141.0], [58.0, 33148.0], [61.0, 33052.0], [60.0, 33061.0], [63.0, 32978.0], [62.0, 33047.0], [66.0, 32877.0], [65.0, 32936.0], [64.0, 32944.0], [70.0, 32871.0], [69.0, 32858.0], [68.0, 32875.5], [75.0, 32645.0], [74.0, 32654.0], [73.0, 32650.0], [72.0, 32748.0], [79.0, 32460.0], [78.0, 32458.0], [77.0, 32537.0], [76.0, 32592.0], [83.0, 32449.0], [82.0, 32428.0], [81.0, 32349.0], [80.0, 32445.0], [87.0, 32150.0], [86.0, 32146.0], [85.0, 32391.0], [84.0, 32406.0], [91.0, 32107.0], [90.0, 32124.0], [89.0, 32145.0], [88.0, 32143.0], [95.0, 31934.0], [94.0, 31961.0], [93.0, 31985.0], [92.0, 32043.0], [99.0, 31790.0], [98.0, 31807.0], [97.0, 31808.0], [96.0, 31911.0], [103.0, 31615.0], [102.0, 31718.0], [101.0, 31794.0], [100.0, 31796.0], [107.0, 31468.0], [106.0, 31498.0], [105.0, 31512.0], [104.0, 31529.0], [111.0, 31302.0], [110.0, 31365.0], [109.0, 31457.0], [108.0, 31461.0], [115.0, 31156.0], [114.0, 31194.0], [113.0, 31093.0], [112.0, 31246.0], [119.0, 30718.0], [118.0, 31067.0], [117.0, 31173.0], [116.0, 31167.0], [123.0, 31035.0], [122.0, 30963.0], [121.0, 30767.0], [127.0, 30845.0], [126.0, 30881.0], [125.0, 30789.0], [124.0, 31026.0], [135.0, 25894.0], [134.0, 25815.0], [133.0, 26007.0], [132.0, 26103.0], [131.0, 26113.0], [130.0, 26395.0], [129.0, 26349.0], [128.0, 26651.0], [143.0, 25441.0], [142.0, 25515.0], [141.0, 25525.0], [140.0, 25678.0], [139.0, 25680.0], [138.0, 25688.0], [137.0, 25697.0], [136.0, 25893.0], [151.0, 25222.0], [150.0, 25216.0], [149.0, 25225.0], [148.0, 25226.0], [147.0, 25308.0], [146.0, 25309.0], [145.0, 25328.0], [144.0, 25437.0], [159.0, 24805.0], [158.0, 24888.0], [157.0, 24910.0], [156.0, 24997.0], [155.0, 25016.0], [154.0, 25107.0], [153.0, 25118.0], [152.0, 25206.0], [167.0, 24587.0], [166.0, 24576.0], [165.0, 24565.0], [163.0, 24694.0], [162.0, 24765.0], [161.0, 24784.0], [160.0, 24739.0], [175.0, 24268.0], [174.0, 24204.0], [173.0, 24284.0], [172.0, 24368.0], [171.0, 24387.0], [170.0, 24367.0], [169.0, 24464.0], [168.0, 24492.0], [183.0, 23941.0], [182.0, 23945.0], [181.0, 23944.0], [180.0, 24068.0], [179.0, 24075.0], [178.0, 24069.0], [177.0, 24176.0], [176.0, 24265.0], [191.0, 23558.0], [190.0, 23565.0], [189.0, 23589.0], [188.0, 23743.0], [187.0, 23748.0], [186.0, 23712.0], [185.0, 23784.0], [184.0, 23823.0], [199.0, 22347.0], [198.0, 23196.0], [197.0, 23252.0], [196.0, 23349.0], [195.0, 23340.0], [194.0, 23347.5], [192.0, 23440.0], [207.0, 23098.0], [206.0, 23111.0], [205.0, 23137.0], [204.0, 23120.0], [203.0, 22297.0], [202.0, 23152.0], [201.0, 22319.0], [200.0, 22350.0], [215.0, 22161.0], [214.0, 22171.0], [213.0, 23020.0], [212.0, 22221.0], [211.0, 22263.0], [210.0, 22267.0], [209.0, 23141.0], [208.0, 22273.0], [223.0, 22047.0], [222.0, 22064.0], [221.0, 22106.0], [220.0, 22110.0], [219.0, 22115.0], [218.0, 22122.0], [217.0, 22159.0], [216.0, 23020.0], [231.0, 21900.0], [230.0, 21934.0], [229.0, 21967.0], [228.0, 22837.0], [227.0, 22011.0], [226.0, 22035.0], [225.0, 22035.0], [224.0, 22045.0], [239.0, 22637.0], [238.0, 22653.0], [237.0, 22631.0], [236.0, 21823.0], [235.0, 21867.0], [234.0, 22708.0], [233.0, 22701.0], [232.0, 22717.0], [247.0, 21644.0], [246.0, 21648.0], [245.0, 21652.0], [244.0, 22497.0], [243.0, 21697.0], [242.0, 22568.0], [241.0, 22542.0], [240.0, 21767.0], [255.0, 22311.0], [254.0, 22353.0], [253.0, 21515.0], [252.0, 22347.0], [251.0, 22350.0], [250.0, 21602.0], [249.0, 21612.0], [248.0, 21616.0], [270.0, 21279.0], [271.0, 21271.0], [269.0, 21280.0], [268.0, 22102.0], [267.0, 21296.0], [266.0, 22099.0], [265.0, 21339.0], [264.0, 22184.0], [263.0, 22231.0], [257.0, 21477.0], [256.0, 22320.0], [259.0, 21446.0], [258.0, 21455.0], [262.0, 21394.0], [261.0, 21405.0], [260.0, 21445.0], [286.0, 21801.0], [287.0, 21798.0], [285.0, 21066.0], [284.0, 21096.0], [283.0, 21118.0], [282.0, 21858.0], [281.0, 21865.0], [280.0, 21129.0], [279.0, 21877.0], [273.0, 21275.0], [272.0, 21294.0], [275.0, 22034.0], [274.0, 21266.0], [278.0, 21146.0], [277.0, 21215.0], [276.0, 21245.0], [302.0, 20888.0], [303.0, 20882.0], [301.0, 20889.0], [300.0, 20912.0], [299.0, 20936.0], [298.0, 21692.0], [297.0, 20941.0], [296.0, 20942.0], [295.0, 20962.0], [289.0, 21036.0], [288.0, 21792.0], [291.0, 21018.0], [290.0, 21027.0], [294.0, 21678.0], [293.0, 20964.0], [292.0, 20984.0], [318.0, 20632.0], [319.0, 20630.0], [317.0, 20644.0], [316.0, 20655.0], [315.0, 21379.0], [314.0, 21385.5], [312.0, 20663.0], [311.0, 20726.0], [305.0, 20858.0], [304.0, 20881.0], [307.0, 20781.0], [306.0, 20842.0], [310.0, 20751.0], [309.0, 21508.0], [308.0, 21480.0], [334.0, 20416.0], [335.0, 20415.0], [333.0, 20418.0], [332.0, 20428.0], [331.0, 20465.0], [330.0, 20481.0], [329.0, 20467.0], [328.0, 20486.0], [327.0, 21157.0], [321.0, 21319.0], [320.0, 21315.0], [323.0, 20574.0], [322.0, 20578.0], [326.0, 20491.0], [325.0, 21186.0], [324.0, 20563.0], [350.0, 20171.0], [351.0, 20148.0], [349.0, 20861.0], [348.0, 20198.0], [347.0, 20888.0], [346.0, 20207.0], [345.0, 20211.0], [344.0, 20236.0], [343.0, 20257.0], [337.0, 20387.0], [336.0, 20412.0], [339.0, 21013.0], [338.0, 20356.0], [342.0, 20291.0], [341.0, 21008.5], [366.0, 20242.5], [367.0, 19926.0], [364.0, 19937.0], [355.0, 20089.0], [354.0, 20781.0], [353.0, 20775.0], [352.0, 20803.0], [363.0, 19970.0], [362.0, 19983.0], [361.0, 19991.0], [360.0, 20022.0], [359.0, 20033.0], [358.0, 20035.0], [357.0, 20058.0], [356.0, 20066.0], [382.0, 20361.0], [383.0, 20326.0], [381.0, 20328.0], [380.0, 20345.0], [379.0, 19710.0], [378.0, 20377.0], [377.0, 19775.0], [376.0, 19799.0], [375.0, 19804.0], [368.0, 20574.0], [371.0, 20468.0], [370.0, 19882.0], [374.0, 19809.0], [373.0, 19823.0], [372.0, 19814.0], [398.0, 19425.0], [399.0, 20070.0], [397.0, 19435.0], [396.0, 19467.0], [395.0, 19473.0], [394.0, 19481.0], [393.0, 19500.0], [392.0, 19506.0], [391.0, 20161.0], [385.0, 19659.0], [384.0, 19673.0], [387.0, 19595.0], [386.0, 19646.0], [390.0, 19567.0], [389.0, 20203.0], [388.0, 19590.0], [414.0, 19187.0], [415.0, 19184.0], [413.0, 19819.0], [412.0, 19863.0], [411.0, 19862.0], [410.0, 19213.0], [409.0, 19836.0], [408.0, 19836.0], [407.0, 19859.0], [401.0, 19395.0], [400.0, 20067.0], [403.0, 19954.0], [402.0, 19982.0], [406.0, 19873.0], [405.0, 19270.0], [404.0, 19957.0], [428.0, 18968.0], [430.0, 18956.0], [431.0, 19549.0], [429.0, 18956.0], [427.0, 19318.0], [425.0, 19304.5], [423.0, 19040.0], [417.0, 19170.0], [416.0, 19183.0], [419.0, 19148.0], [418.0, 19161.0], [422.0, 19063.0], [421.0, 19072.0], [420.0, 19086.0], [446.0, 18685.0], [447.0, 18664.0], [445.0, 18690.0], [444.0, 18696.0], [443.0, 18716.0], [442.0, 18753.0], [441.0, 18763.0], [440.0, 19396.0], [439.0, 19422.0], [433.0, 19447.0], [432.0, 19510.0], [435.0, 19399.0], [434.0, 18800.0], [438.0, 19412.0], [437.0, 18791.0], [436.0, 19430.0], [462.0, 18481.0], [463.0, 18461.0], [461.0, 18504.0], [460.0, 19073.0], [459.0, 18521.0], [458.0, 19073.0], [457.0, 19092.0], [456.0, 18528.0], [455.0, 18582.0], [448.0, 18653.0], [451.0, 18614.0], [450.0, 18904.0], [454.0, 18579.0], [453.0, 19191.0], [452.0, 18574.0], [477.0, 18257.0], [478.0, 18745.0], [476.0, 18270.0], [467.0, 18397.0], [466.0, 18422.0], [465.0, 18438.0], [464.0, 18454.0], [475.0, 18276.0], [474.0, 18279.0], [473.0, 18569.5], [471.0, 18855.0], [470.0, 18916.0], [469.0, 18358.0], [468.0, 18900.0], [494.0, 18583.0], [495.0, 18031.0], [493.0, 18046.0], [492.0, 18060.0], [491.0, 18066.0], [490.0, 18087.0], [489.0, 18115.0], [488.0, 18123.0], [487.0, 18692.0], [481.0, 18186.0], [480.0, 18759.5], [483.0, 18686.0], [482.0, 18174.0], [486.0, 18687.0], [485.0, 18145.0], [484.0, 18151.0], [510.0, 17740.0], [511.0, 18263.0], [509.0, 18285.0], [508.0, 18247.0], [507.0, 18262.0], [506.0, 17851.0], [504.0, 18396.0], [503.0, 17868.0], [497.0, 17969.0], [496.0, 18013.0], [499.0, 18481.0], [498.0, 17970.0], [502.0, 17870.0], [501.0, 17896.0], [500.0, 17942.0], [537.0, 17364.0], [542.0, 17306.0], [543.0, 17728.0], [528.0, 17940.0], [531.0, 17436.0], [530.0, 17919.0], [533.0, 17417.0], [532.0, 17421.0], [541.0, 17318.5], [539.0, 17337.0], [538.0, 17343.0], [536.0, 17841.0], [519.0, 17599.0], [518.0, 18163.0], [517.0, 17911.0], [515.0, 18163.0], [514.0, 17702.0], [513.0, 17711.0], [512.0, 18261.0], [527.0, 17953.0], [526.0, 17959.0], [525.0, 17500.0], [524.0, 17522.0], [523.0, 17597.0], [522.0, 17621.0], [521.0, 17631.0], [520.0, 17592.0], [535.0, 17853.0], [534.0, 17393.0], [569.0, 17223.0], [573.0, 16788.0], [574.0, 16788.0], [561.0, 16976.0], [560.0, 16983.0], [563.0, 16950.0], [562.0, 17381.0], [565.0, 16939.0], [564.0, 16945.0], [572.0, 17218.0], [571.0, 16794.0], [570.0, 16805.0], [568.0, 16858.0], [551.0, 17152.0], [550.0, 17183.0], [549.0, 17646.0], [548.0, 17645.0], [547.0, 17622.0], [546.0, 17645.0], [545.0, 17209.0], [544.0, 17667.0], [559.0, 16999.0], [558.0, 17087.0], [557.0, 17088.0], [556.0, 17086.0], [555.0, 17105.0], [554.0, 17118.0], [553.0, 17113.0], [552.0, 17124.0], [567.0, 16869.0], [566.0, 16885.0], [604.0, 16400.0], [607.0, 16339.0], [592.0, 16589.0], [594.0, 16898.0], [593.0, 16573.0], [596.0, 16483.0], [595.0, 16505.0], [606.0, 16375.0], [605.0, 16394.0], [603.0, 16402.0], [602.0, 16409.0], [601.0, 16413.0], [600.0, 16421.0], [591.0, 16604.0], [577.0, 16784.0], [576.0, 16793.5], [579.0, 16696.0], [578.0, 16762.0], [581.0, 16704.0], [580.0, 16712.0], [583.0, 16677.0], [582.0, 16687.0], [590.0, 16617.0], [589.0, 16631.0], [588.0, 16640.0], [587.0, 16637.0], [586.0, 16644.0], [585.0, 16665.0], [584.0, 16677.0], [599.0, 16425.0], [598.0, 16634.5], [636.0, 15872.0], [639.0, 15829.0], [624.0, 16037.0], [627.0, 16019.0], [626.0, 16037.5], [629.0, 15989.0], [628.0, 16018.0], [638.0, 15844.0], [637.0, 15858.0], [635.0, 15879.0], [634.0, 15941.0], [633.0, 15932.0], [632.0, 15941.0], [623.0, 16083.0], [608.0, 16317.0], [610.0, 16266.0], [609.0, 16301.0], [612.0, 16229.0], [611.0, 16246.0], [615.0, 16181.0], [614.0, 16214.0], [622.0, 16108.0], [620.0, 16123.0], [619.0, 16138.0], [618.0, 16144.0], [617.0, 16153.0], [616.0, 16161.0], [631.0, 15962.0], [630.0, 15982.0], [668.0, 15429.0], [671.0, 15398.0], [657.0, 15609.0], [656.0, 15600.0], [659.0, 15560.0], [658.0, 15581.0], [661.0, 15536.0], [660.0, 15541.0], [670.0, 15415.0], [669.0, 15427.0], [667.0, 15441.0], [666.0, 15444.0], [665.0, 15463.0], [664.0, 15498.0], [655.0, 15610.333333333334], [640.0, 15823.0], [642.0, 15808.0], [641.0, 15811.0], [644.0, 15750.0], [643.0, 15771.0], [647.0, 15724.0], [646.0, 15750.5], [652.0, 15658.0], [651.0, 15665.0], [650.0, 15671.0], [649.0, 15687.0], [648.0, 15696.0], [663.0, 15500.0], [662.0, 15513.0], [698.0, 14949.0], [702.0, 14911.0], [703.0, 14891.0], [688.0, 15138.0], [690.0, 15101.0], [689.0, 15125.0], [692.0, 15049.0], [691.0, 15088.0], [701.0, 14928.0], [700.0, 14936.0], [699.0, 14944.0], [697.0, 15029.0], [679.0, 15251.0], [678.0, 15265.0], [677.0, 15303.0], [676.0, 15303.0], [675.0, 15359.0], [674.0, 15359.0], [673.0, 15375.0], [672.0, 15393.0], [687.0, 15151.0], [686.0, 15155.0], [685.0, 15153.0], [684.0, 15162.0], [683.0, 15179.0], [682.0, 15187.0], [681.0, 15208.0], [680.0, 15211.0], [695.0, 15038.5], [693.0, 15039.0], [732.0, 14471.0], [735.0, 14402.0], [721.0, 14607.0], [720.0, 14610.0], [723.0, 14576.0], [722.0, 14596.0], [725.0, 14530.0], [724.0, 14556.0], [734.0, 14426.0], [733.0, 14430.0], [731.0, 14485.0], [730.0, 14488.0], [729.0, 14493.0], [728.0, 14507.0], [719.0, 14648.5], [704.0, 14880.0], [706.0, 14842.0], [705.0, 14875.0], [709.0, 14815.5], [707.0, 14836.0], [711.0, 14813.0], [710.0, 14801.0], [717.0, 14682.0], [716.0, 14685.0], [715.0, 14693.0], [714.0, 14701.0], [713.0, 14726.0], [712.0, 14755.0], [727.0, 14517.0], [726.0, 14519.0], [761.0, 14010.0], [766.0, 13961.0], [767.0, 13890.0], [752.0, 14133.0], [754.0, 14118.0], [753.0, 14131.0], [757.0, 14091.5], [755.0, 14101.0], [765.0, 13991.5], [763.0, 13997.0], [762.0, 14012.0], [760.0, 14024.0], [743.0, 14287.0], [742.0, 14300.0], [741.0, 14327.0], [740.0, 14345.0], [739.0, 14375.0], [738.0, 14386.0], [737.0, 14387.0], [736.0, 14390.0], [751.0, 14145.0], [750.0, 14153.0], [749.0, 14150.0], [748.0, 14215.0], [747.0, 14229.0], [746.0, 14244.0], [745.0, 14273.0], [744.0, 14274.0], [759.0, 14040.0], [758.0, 14091.0], [796.0, 13485.0], [799.0, 13465.0], [785.0, 13624.0], [784.0, 13637.0], [787.0, 13579.0], [786.0, 13594.0], [789.0, 13562.0], [788.0, 13568.0], [798.0, 13469.0], [797.0, 13485.0], [795.0, 13502.0], [794.0, 13516.0], [793.0, 13521.0], [792.0, 13536.0], [783.0, 13647.0], [768.0, 13887.0], [770.0, 13846.0], [769.0, 13874.0], [773.0, 13827.5], [771.0, 13839.0], [775.0, 13812.0], [774.0, 13818.0], [782.0, 13662.0], [781.0, 13670.0], [780.0, 13705.0], [779.0, 13722.0], [778.0, 13782.0], [777.0, 13785.0], [776.0, 13789.0], [791.0, 13604.0], [790.0, 13552.0], [824.0, 13084.0], [828.0, 13000.0], [831.0, 12947.0], [817.0, 13130.0], [816.0, 13148.0], [821.0, 13112.333333333334], [818.0, 13122.0], [830.0, 12969.0], [829.0, 12982.0], [827.0, 13004.0], [826.0, 13013.0], [825.0, 13073.0], [815.0, 13158.0], [801.0, 13436.0], [800.0, 13448.0], [803.0, 13387.0], [802.0, 13424.0], [805.0, 13364.0], [804.0, 13367.0], [807.0, 13315.0], [806.0, 13351.0], [814.0, 13193.0], [813.0, 13267.0], [812.0, 13277.0], [811.0, 13277.0], [810.0, 13284.0], [809.0, 13295.0], [808.0, 13306.0], [823.0, 13094.0], [822.0, 13108.0], [860.0, 12456.0], [863.0, 12425.0], [849.0, 12675.0], [848.0, 12683.0], [851.0, 12624.0], [850.0, 12635.0], [853.0, 12600.0], [852.0, 12607.0], [862.0, 12444.0], [861.0, 12445.0], [859.0, 12484.0], [858.0, 12511.0], [857.0, 12531.0], [856.0, 12550.0], [847.0, 12683.0], [832.0, 12934.0], [835.0, 12880.5], [833.0, 12911.0], [837.0, 12864.0], [836.0, 12871.0], [839.0, 12833.0], [838.0, 12839.0], [846.0, 12700.0], [845.0, 12735.0], [844.0, 12734.0], [843.0, 12737.0], [842.0, 12751.0], [841.0, 12769.0], [840.0, 12822.0], [855.0, 12560.0], [854.0, 12590.0], [892.0, 11928.0], [895.0, 11900.0], [881.0, 12124.0], [880.0, 12142.0], [883.0, 12109.0], [882.0, 12123.0], [885.0, 12080.0], [884.0, 12087.0], [894.0, 11896.0], [893.0, 11903.0], [891.0, 11935.0], [890.0, 11945.0], [889.0, 11988.0], [888.0, 12000.0], [879.0, 12158.0], [864.0, 12422.0], [866.0, 12369.0], [865.0, 12390.0], [868.0, 12331.0], [867.0, 12357.0], [871.0, 12320.0], [869.0, 12327.0], [878.0, 12227.0], [877.0, 12236.0], [876.0, 12238.0], [875.0, 12255.0], [874.0, 12256.0], [873.0, 12259.0], [872.0, 12298.0], [887.0, 12026.0], [886.0, 12057.0], [924.0, 11452.0], [927.0, 11412.0], [912.0, 11625.0], [915.0, 11593.0], [914.0, 11621.5], [917.0, 11568.0], [916.0, 11585.0], [926.0, 11439.0], [925.0, 11448.0], [923.0, 11490.0], [922.0, 11500.0], [921.0, 11502.0], [920.0, 11509.0], [911.0, 11674.0], [896.0, 11867.0], [898.0, 11839.0], [897.0, 11864.0], [901.0, 11807.0], [900.0, 11811.0], [903.0, 11798.0], [902.0, 11798.0], [910.0, 11684.0], [909.0, 11689.0], [908.0, 11689.0], [907.0, 11709.0], [906.0, 11745.0], [905.0, 11772.0], [904.0, 11785.0], [919.0, 11523.0], [918.0, 11550.0], [952.0, 11120.0], [956.0, 11039.0], [959.0, 11016.0], [946.0, 11230.0], [944.0, 11255.0], [949.0, 11141.0], [948.0, 11185.0], [958.0, 11031.0], [957.0, 11036.0], [955.0, 11070.0], [954.0, 11098.0], [953.0, 11061.0], [943.0, 11257.0], [929.0, 11509.0], [933.0, 11434.333333333334], [930.0, 11489.0], [935.0, 11441.0], [934.0, 11450.0], [942.0, 11265.0], [941.0, 11280.0], [940.0, 11286.0], [939.0, 11344.5], [937.0, 11356.0], [936.0, 11365.0], [951.0, 11133.0], [950.0, 11137.0], [988.0, 10511.0], [991.0, 10445.0], [977.0, 10701.0], [976.0, 10745.0], [979.0, 10661.0], [978.0, 10698.0], [981.0, 10628.0], [980.0, 10651.0], [990.0, 10500.0], [989.0, 10507.0], [987.0, 10520.0], [986.0, 10567.0], [985.0, 10576.0], [984.0, 10593.0], [975.0, 10750.0], [961.0, 10978.0], [960.0, 11005.0], [963.0, 10951.0], [962.0, 10964.0], [965.0, 10937.0], [964.0, 10945.0], [967.0, 10877.0], [966.0, 10772.0], [974.0, 10754.0], [973.0, 10785.5], [971.0, 10798.0], [970.0, 10822.0], [969.0, 10851.0], [968.0, 10854.0], [983.0, 10607.0], [982.0, 10613.0], [1000.0, 10093.0], [999.0, 10216.0], [998.0, 10245.0], [997.0, 10246.0], [996.0, 10296.0], [995.0, 10333.0], [994.0, 10358.0], [993.0, 10405.0], [992.0, 10418.0], [1.0, 34658.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.5509999999993, 19168.605999999985]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3800.0, "minX": 1.62248802E12, "maxY": 281584.8, "series": [{"data": [[1.62248802E12, 281584.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62248802E12, 3800.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248802E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19168.605999999985, "minX": 1.62248802E12, "maxY": 19168.605999999985, "series": [{"data": [[1.62248802E12, 19168.605999999985]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248802E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18885.199, "minX": 1.62248802E12, "maxY": 18885.199, "series": [{"data": [[1.62248802E12, 18885.199]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248802E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11375.50400000001, "minX": 1.62248802E12, "maxY": 11375.50400000001, "series": [{"data": [[1.62248802E12, 11375.50400000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248802E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 16813.0, "minX": 1.62248802E12, "maxY": 34670.0, "series": [{"data": [[1.62248802E12, 34670.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62248802E12, 33857.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62248802E12, 34624.56]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62248802E12, 34402.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62248802E12, 16813.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62248802E12, 24595.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248802E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10701.0, "minX": 5.0, "maxY": 34502.0, "series": [{"data": [[33.0, 23440.0], [61.0, 18583.0], [60.0, 22542.0], [62.0, 20070.0], [63.0, 19583.5], [65.0, 21593.0], [19.0, 34502.0], [5.0, 26349.0], [22.0, 25439.0], [23.0, 31156.0], [24.0, 32014.0], [25.0, 24557.0], [30.0, 33781.5], [31.0, 32936.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 15231.0], [65.0, 20858.0], [33.0, 22285.0], [47.0, 10701.0], [56.0, 12434.5], [61.0, 13637.0], [60.0, 21697.0], [63.0, 11791.5], [62.0, 16400.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 65.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10419.0, "minX": 5.0, "maxY": 34222.0, "series": [{"data": [[33.0, 23161.0], [61.0, 18301.0], [60.0, 22244.0], [62.0, 19797.0], [63.0, 19302.0], [65.0, 21308.5], [19.0, 34222.0], [5.0, 26072.0], [22.0, 25164.5], [23.0, 30880.0], [24.0, 31735.5], [25.0, 24274.0], [30.0, 33498.5], [31.0, 32659.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 14953.0], [65.0, 20557.0], [33.0, 22001.0], [47.0, 10419.0], [56.0, 12151.0], [61.0, 13357.0], [60.0, 21416.0], [63.0, 11507.0], [62.0, 16121.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 65.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62248802E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62248802E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248802E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.45, "minX": 1.62248802E12, "maxY": 11.216666666666667, "series": [{"data": [[1.62248802E12, 5.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62248802E12, 11.216666666666667]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62248802E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.45, "minX": 1.62248802E12, "maxY": 11.216666666666667, "series": [{"data": [[1.62248802E12, 11.216666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.62248802E12, 5.45]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248802E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.45, "minX": 1.62248802E12, "maxY": 11.216666666666667, "series": [{"data": [[1.62248802E12, 5.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62248802E12, 11.216666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62248802E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

