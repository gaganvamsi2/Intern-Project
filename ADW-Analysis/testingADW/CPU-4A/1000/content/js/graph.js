/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10101.0, "minX": 0.0, "maxY": 27816.0, "series": [{"data": [[0.0, 10101.0], [0.1, 10280.0], [0.2, 10448.0], [0.3, 10448.0], [0.4, 10774.0], [0.5, 10785.0], [0.6, 11288.0], [0.7, 11346.0], [0.8, 11448.0], [0.9, 11508.0], [1.0, 11526.0], [1.1, 11534.0], [1.2, 11823.0], [1.3, 11861.0], [1.4, 11861.0], [1.5, 11866.0], [1.6, 11923.0], [1.7, 11948.0], [1.8, 11956.0], [1.9, 11979.0], [2.0, 11979.0], [2.1, 11999.0], [2.2, 12035.0], [2.3, 12043.0], [2.4, 12079.0], [2.5, 12080.0], [2.6, 12138.0], [2.7, 12150.0], [2.8, 12227.0], [2.9, 12232.0], [3.0, 12237.0], [3.1, 12242.0], [3.2, 12253.0], [3.3, 12254.0], [3.4, 12317.0], [3.5, 12320.0], [3.6, 12340.0], [3.7, 12365.0], [3.8, 12376.0], [3.9, 12380.0], [4.0, 12382.0], [4.1, 12416.0], [4.2, 12426.0], [4.3, 12436.0], [4.4, 12461.0], [4.5, 12483.0], [4.6, 12496.0], [4.7, 12553.0], [4.8, 12554.0], [4.9, 12560.0], [5.0, 12581.0], [5.1, 12587.0], [5.2, 12603.0], [5.3, 12606.0], [5.4, 12609.0], [5.5, 12615.0], [5.6, 12628.0], [5.7, 12629.0], [5.8, 12652.0], [5.9, 12664.0], [6.0, 12665.0], [6.1, 12666.0], [6.2, 12690.0], [6.3, 12698.0], [6.4, 12709.0], [6.5, 12733.0], [6.6, 12737.0], [6.7, 12745.0], [6.8, 12748.0], [6.9, 12755.0], [7.0, 12780.0], [7.1, 12792.0], [7.2, 12828.0], [7.3, 12852.0], [7.4, 12871.0], [7.5, 12876.0], [7.6, 12880.0], [7.7, 12891.0], [7.8, 12937.0], [7.9, 12944.0], [8.0, 12957.0], [8.1, 12969.0], [8.2, 12974.0], [8.3, 13011.0], [8.4, 13034.0], [8.5, 13044.0], [8.6, 13072.0], [8.7, 13099.0], [8.8, 13102.0], [8.9, 13112.0], [9.0, 13115.0], [9.1, 13124.0], [9.2, 13147.0], [9.3, 13155.0], [9.4, 13164.0], [9.5, 13177.0], [9.6, 13207.0], [9.7, 13212.0], [9.8, 13222.0], [9.9, 13223.0], [10.0, 13227.0], [10.1, 13227.0], [10.2, 13269.0], [10.3, 13270.0], [10.4, 13303.0], [10.5, 13313.0], [10.6, 13342.0], [10.7, 13347.0], [10.8, 13358.0], [10.9, 13373.0], [11.0, 13389.0], [11.1, 13395.0], [11.2, 13416.0], [11.3, 13428.0], [11.4, 13439.0], [11.5, 13460.0], [11.6, 13473.0], [11.7, 13504.0], [11.8, 13513.0], [11.9, 13517.0], [12.0, 13525.0], [12.1, 13526.0], [12.2, 13533.0], [12.3, 13539.0], [12.4, 13548.0], [12.5, 13557.0], [12.6, 13595.0], [12.7, 13642.0], [12.8, 13678.0], [12.9, 13686.0], [13.0, 13692.0], [13.1, 13693.0], [13.2, 13700.0], [13.3, 13727.0], [13.4, 13748.0], [13.5, 13755.0], [13.6, 13775.0], [13.7, 13777.0], [13.8, 13783.0], [13.9, 13790.0], [14.0, 13803.0], [14.1, 13830.0], [14.2, 13844.0], [14.3, 13865.0], [14.4, 13868.0], [14.5, 13868.0], [14.6, 13877.0], [14.7, 13937.0], [14.8, 13986.0], [14.9, 14001.0], [15.0, 14031.0], [15.1, 14032.0], [15.2, 14035.0], [15.3, 14041.0], [15.4, 14054.0], [15.5, 14070.0], [15.6, 14095.0], [15.7, 14107.0], [15.8, 14123.0], [15.9, 14148.0], [16.0, 14167.0], [16.1, 14191.0], [16.2, 14192.0], [16.3, 14209.0], [16.4, 14212.0], [16.5, 14230.0], [16.6, 14248.0], [16.7, 14267.0], [16.8, 14275.0], [16.9, 14292.0], [17.0, 14296.0], [17.1, 14307.0], [17.2, 14327.0], [17.3, 14334.0], [17.4, 14343.0], [17.5, 14346.0], [17.6, 14350.0], [17.7, 14371.0], [17.8, 14383.0], [17.9, 14401.0], [18.0, 14407.0], [18.1, 14417.0], [18.2, 14423.0], [18.3, 14425.0], [18.4, 14428.0], [18.5, 14451.0], [18.6, 14513.0], [18.7, 14521.0], [18.8, 14529.0], [18.9, 14536.0], [19.0, 14543.0], [19.1, 14552.0], [19.2, 14552.0], [19.3, 14569.0], [19.4, 14584.0], [19.5, 14600.0], [19.6, 14605.0], [19.7, 14614.0], [19.8, 14636.0], [19.9, 14648.0], [20.0, 14666.0], [20.1, 14667.0], [20.2, 14691.0], [20.3, 14712.0], [20.4, 14726.0], [20.5, 14729.0], [20.6, 14741.0], [20.7, 14749.0], [20.8, 14755.0], [20.9, 14771.0], [21.0, 14810.0], [21.1, 14810.0], [21.2, 14832.0], [21.3, 14852.0], [21.4, 14873.0], [21.5, 14917.0], [21.6, 14951.0], [21.7, 14960.0], [21.8, 15006.0], [21.9, 15014.0], [22.0, 15018.0], [22.1, 15029.0], [22.2, 15032.0], [22.3, 15076.0], [22.4, 15081.0], [22.5, 15086.0], [22.6, 15088.0], [22.7, 15097.0], [22.8, 15128.0], [22.9, 15130.0], [23.0, 15161.0], [23.1, 15186.0], [23.2, 15195.0], [23.3, 15211.0], [23.4, 15222.0], [23.5, 15251.0], [23.6, 15265.0], [23.7, 15270.0], [23.8, 15308.0], [23.9, 15330.0], [24.0, 15374.0], [24.1, 15387.0], [24.2, 15419.0], [24.3, 15422.0], [24.4, 15438.0], [24.5, 15450.0], [24.6, 15455.0], [24.7, 15501.0], [24.8, 15506.0], [24.9, 15519.0], [25.0, 15557.0], [25.1, 15558.0], [25.2, 15564.0], [25.3, 15570.0], [25.4, 15573.0], [25.5, 15613.0], [25.6, 15616.0], [25.7, 15628.0], [25.8, 15648.0], [25.9, 15670.0], [26.0, 15682.0], [26.1, 15705.0], [26.2, 15722.0], [26.3, 15768.0], [26.4, 15770.0], [26.5, 15775.0], [26.6, 15780.0], [26.7, 15828.0], [26.8, 15867.0], [26.9, 15899.0], [27.0, 15902.0], [27.1, 15931.0], [27.2, 15934.0], [27.3, 15937.0], [27.4, 15969.0], [27.5, 15976.0], [27.6, 15981.0], [27.7, 15993.0], [27.8, 15996.0], [27.9, 16004.0], [28.0, 16010.0], [28.1, 16042.0], [28.2, 16059.0], [28.3, 16096.0], [28.4, 16104.0], [28.5, 16116.0], [28.6, 16129.0], [28.7, 16129.0], [28.8, 16144.0], [28.9, 16166.0], [29.0, 16167.0], [29.1, 16179.0], [29.2, 16204.0], [29.3, 16216.0], [29.4, 16226.0], [29.5, 16242.0], [29.6, 16244.0], [29.7, 16278.0], [29.8, 16282.0], [29.9, 16282.0], [30.0, 16304.0], [30.1, 16313.0], [30.2, 16321.0], [30.3, 16354.0], [30.4, 16390.0], [30.5, 16408.0], [30.6, 16411.0], [30.7, 16421.0], [30.8, 16437.0], [30.9, 16447.0], [31.0, 16453.0], [31.1, 16454.0], [31.2, 16460.0], [31.3, 16465.0], [31.4, 16484.0], [31.5, 16508.0], [31.6, 16516.0], [31.7, 16538.0], [31.8, 16556.0], [31.9, 16558.0], [32.0, 16559.0], [32.1, 16567.0], [32.2, 16568.0], [32.3, 16570.0], [32.4, 16609.0], [32.5, 16638.0], [32.6, 16649.0], [32.7, 16667.0], [32.8, 16720.0], [32.9, 16725.0], [33.0, 16759.0], [33.1, 16779.0], [33.2, 16793.0], [33.3, 16799.0], [33.4, 16810.0], [33.5, 16812.0], [33.6, 16818.0], [33.7, 16882.0], [33.8, 16898.0], [33.9, 16932.0], [34.0, 16946.0], [34.1, 16952.0], [34.2, 16958.0], [34.3, 16991.0], [34.4, 16995.0], [34.5, 17000.0], [34.6, 17005.0], [34.7, 17018.0], [34.8, 17020.0], [34.9, 17045.0], [35.0, 17068.0], [35.1, 17071.0], [35.2, 17089.0], [35.3, 17104.0], [35.4, 17119.0], [35.5, 17163.0], [35.6, 17179.0], [35.7, 17216.0], [35.8, 17221.0], [35.9, 17247.0], [36.0, 17250.0], [36.1, 17273.0], [36.2, 17302.0], [36.3, 17308.0], [36.4, 17371.0], [36.5, 17393.0], [36.6, 17420.0], [36.7, 17426.0], [36.8, 17443.0], [36.9, 17479.0], [37.0, 17482.0], [37.1, 17488.0], [37.2, 17491.0], [37.3, 17533.0], [37.4, 17555.0], [37.5, 17561.0], [37.6, 17573.0], [37.7, 17581.0], [37.8, 17593.0], [37.9, 17598.0], [38.0, 17632.0], [38.1, 17638.0], [38.2, 17641.0], [38.3, 17645.0], [38.4, 17655.0], [38.5, 17665.0], [38.6, 17672.0], [38.7, 17680.0], [38.8, 17720.0], [38.9, 17722.0], [39.0, 17737.0], [39.1, 17743.0], [39.2, 17746.0], [39.3, 17751.0], [39.4, 17765.0], [39.5, 17766.0], [39.6, 17769.0], [39.7, 17798.0], [39.8, 17822.0], [39.9, 17823.0], [40.0, 17824.0], [40.1, 17849.0], [40.2, 17862.0], [40.3, 17882.0], [40.4, 17899.0], [40.5, 17921.0], [40.6, 17954.0], [40.7, 17956.0], [40.8, 17993.0], [40.9, 17996.0], [41.0, 18001.0], [41.1, 18007.0], [41.2, 18013.0], [41.3, 18027.0], [41.4, 18033.0], [41.5, 18034.0], [41.6, 18069.0], [41.7, 18089.0], [41.8, 18093.0], [41.9, 18114.0], [42.0, 18131.0], [42.1, 18132.0], [42.2, 18144.0], [42.3, 18148.0], [42.4, 18155.0], [42.5, 18187.0], [42.6, 18203.0], [42.7, 18257.0], [42.8, 18274.0], [42.9, 18281.0], [43.0, 18294.0], [43.1, 18303.0], [43.2, 18309.0], [43.3, 18329.0], [43.4, 18336.0], [43.5, 18349.0], [43.6, 18356.0], [43.7, 18356.0], [43.8, 18358.0], [43.9, 18370.0], [44.0, 18376.0], [44.1, 18382.0], [44.2, 18436.0], [44.3, 18442.0], [44.4, 18453.0], [44.5, 18455.0], [44.6, 18456.0], [44.7, 18482.0], [44.8, 18486.0], [44.9, 18505.0], [45.0, 18510.0], [45.1, 18515.0], [45.2, 18529.0], [45.3, 18553.0], [45.4, 18554.0], [45.5, 18599.0], [45.6, 18607.0], [45.7, 18623.0], [45.8, 18627.0], [45.9, 18633.0], [46.0, 18637.0], [46.1, 18650.0], [46.2, 18654.0], [46.3, 18659.0], [46.4, 18664.0], [46.5, 18681.0], [46.6, 18692.0], [46.7, 18708.0], [46.8, 18785.0], [46.9, 18796.0], [47.0, 18801.0], [47.1, 18804.0], [47.2, 18809.0], [47.3, 18826.0], [47.4, 18835.0], [47.5, 18843.0], [47.6, 18858.0], [47.7, 18885.0], [47.8, 18926.0], [47.9, 18932.0], [48.0, 18934.0], [48.1, 18940.0], [48.2, 18948.0], [48.3, 18952.0], [48.4, 18965.0], [48.5, 19020.0], [48.6, 19026.0], [48.7, 19044.0], [48.8, 19062.0], [48.9, 19062.0], [49.0, 19079.0], [49.1, 19085.0], [49.2, 19116.0], [49.3, 19127.0], [49.4, 19140.0], [49.5, 19172.0], [49.6, 19173.0], [49.7, 19177.0], [49.8, 19193.0], [49.9, 19215.0], [50.0, 19238.0], [50.1, 19245.0], [50.2, 19254.0], [50.3, 19309.0], [50.4, 19338.0], [50.5, 19347.0], [50.6, 19385.0], [50.7, 19390.0], [50.8, 19432.0], [50.9, 19434.0], [51.0, 19442.0], [51.1, 19443.0], [51.2, 19443.0], [51.3, 19479.0], [51.4, 19481.0], [51.5, 19528.0], [51.6, 19540.0], [51.7, 19568.0], [51.8, 19583.0], [51.9, 19588.0], [52.0, 19596.0], [52.1, 19671.0], [52.2, 19696.0], [52.3, 19720.0], [52.4, 19725.0], [52.5, 19754.0], [52.6, 19760.0], [52.7, 19781.0], [52.8, 19782.0], [52.9, 19843.0], [53.0, 19851.0], [53.1, 19853.0], [53.2, 19871.0], [53.3, 19877.0], [53.4, 19882.0], [53.5, 19884.0], [53.6, 19913.0], [53.7, 19923.0], [53.8, 19927.0], [53.9, 19933.0], [54.0, 19967.0], [54.1, 19975.0], [54.2, 20002.0], [54.3, 20019.0], [54.4, 20039.0], [54.5, 20044.0], [54.6, 20049.0], [54.7, 20055.0], [54.8, 20067.0], [54.9, 20068.0], [55.0, 20080.0], [55.1, 20091.0], [55.2, 20098.0], [55.3, 20111.0], [55.4, 20117.0], [55.5, 20122.0], [55.6, 20135.0], [55.7, 20152.0], [55.8, 20156.0], [55.9, 20159.0], [56.0, 20175.0], [56.1, 20185.0], [56.2, 20190.0], [56.3, 20193.0], [56.4, 20195.0], [56.5, 20196.0], [56.6, 20214.0], [56.7, 20215.0], [56.8, 20218.0], [56.9, 20227.0], [57.0, 20232.0], [57.1, 20234.0], [57.2, 20248.0], [57.3, 20249.0], [57.4, 20252.0], [57.5, 20256.0], [57.6, 20278.0], [57.7, 20308.0], [57.8, 20310.0], [57.9, 20312.0], [58.0, 20313.0], [58.1, 20342.0], [58.2, 20355.0], [58.3, 20356.0], [58.4, 20356.0], [58.5, 20386.0], [58.6, 20388.0], [58.7, 20390.0], [58.8, 20401.0], [58.9, 20415.0], [59.0, 20423.0], [59.1, 20425.0], [59.2, 20434.0], [59.3, 20437.0], [59.4, 20438.0], [59.5, 20439.0], [59.6, 20444.0], [59.7, 20491.0], [59.8, 20514.0], [59.9, 20532.0], [60.0, 20540.0], [60.1, 20554.0], [60.2, 20563.0], [60.3, 20571.0], [60.4, 20572.0], [60.5, 20572.0], [60.6, 20579.0], [60.7, 20587.0], [60.8, 20596.0], [60.9, 20599.0], [61.0, 20600.0], [61.1, 20625.0], [61.2, 20659.0], [61.3, 20662.0], [61.4, 20663.0], [61.5, 20675.0], [61.6, 20676.0], [61.7, 20693.0], [61.8, 20694.0], [61.9, 20707.0], [62.0, 20715.0], [62.1, 20728.0], [62.2, 20735.0], [62.3, 20755.0], [62.4, 20756.0], [62.5, 20770.0], [62.6, 20793.0], [62.7, 20797.0], [62.8, 20816.0], [62.9, 20817.0], [63.0, 20835.0], [63.1, 20861.0], [63.2, 20868.0], [63.3, 20870.0], [63.4, 20893.0], [63.5, 20895.0], [63.6, 20911.0], [63.7, 20951.0], [63.8, 20977.0], [63.9, 20979.0], [64.0, 20979.0], [64.1, 21022.0], [64.2, 21031.0], [64.3, 21045.0], [64.4, 21096.0], [64.5, 21105.0], [64.6, 21135.0], [64.7, 21153.0], [64.8, 21155.0], [64.9, 21156.0], [65.0, 21169.0], [65.1, 21206.0], [65.2, 21214.0], [65.3, 21240.0], [65.4, 21269.0], [65.5, 21291.0], [65.6, 21308.0], [65.7, 21340.0], [65.8, 21344.0], [65.9, 21352.0], [66.0, 21363.0], [66.1, 21369.0], [66.2, 21435.0], [66.3, 21450.0], [66.4, 21450.0], [66.5, 21457.0], [66.6, 21484.0], [66.7, 21554.0], [66.8, 21592.0], [66.9, 21640.0], [67.0, 21645.0], [67.1, 21670.0], [67.2, 21675.0], [67.3, 21691.0], [67.4, 21696.0], [67.5, 21697.0], [67.6, 21730.0], [67.7, 21733.0], [67.8, 21751.0], [67.9, 21787.0], [68.0, 21789.0], [68.1, 21797.0], [68.2, 21803.0], [68.3, 21828.0], [68.4, 21832.0], [68.5, 21886.0], [68.6, 21928.0], [68.7, 21956.0], [68.8, 22005.0], [68.9, 22014.0], [69.0, 22050.0], [69.1, 22063.0], [69.2, 22081.0], [69.3, 22087.0], [69.4, 22142.0], [69.5, 22210.0], [69.6, 22223.0], [69.7, 22286.0], [69.8, 22316.0], [69.9, 22390.0], [70.0, 22619.0], [70.1, 22835.0], [70.2, 23047.0], [70.3, 23081.0], [70.4, 23319.0], [70.5, 23335.0], [70.6, 23370.0], [70.7, 23430.0], [70.8, 23466.0], [70.9, 23524.0], [71.0, 23543.0], [71.1, 23590.0], [71.2, 23631.0], [71.3, 23860.0], [71.4, 23897.0], [71.5, 23934.0], [71.6, 24005.0], [71.7, 24010.0], [71.8, 24029.0], [71.9, 24068.0], [72.0, 24298.0], [72.1, 24341.0], [72.2, 24580.0], [72.3, 24588.0], [72.4, 24605.0], [72.5, 24645.0], [72.6, 24673.0], [72.7, 24687.0], [72.8, 24688.0], [72.9, 24717.0], [73.0, 24718.0], [73.1, 24817.0], [73.2, 24839.0], [73.3, 24849.0], [73.4, 24973.0], [73.5, 25006.0], [73.6, 25063.0], [73.7, 25106.0], [73.8, 25148.0], [73.9, 25150.0], [74.0, 25158.0], [74.1, 25205.0], [74.2, 25226.0], [74.3, 25240.0], [74.4, 25255.0], [74.5, 25277.0], [74.6, 25277.0], [74.7, 25294.0], [74.8, 25315.0], [74.9, 25338.0], [75.0, 25340.0], [75.1, 25383.0], [75.2, 25432.0], [75.3, 25440.0], [75.4, 25440.0], [75.5, 25449.0], [75.6, 25469.0], [75.7, 25483.0], [75.8, 25511.0], [75.9, 25513.0], [76.0, 25521.0], [76.1, 25578.0], [76.2, 25601.0], [76.3, 25604.0], [76.4, 25609.0], [76.5, 25615.0], [76.6, 25616.0], [76.7, 25620.0], [76.8, 25630.0], [76.9, 25670.0], [77.0, 25688.0], [77.1, 25688.0], [77.2, 25689.0], [77.3, 25721.0], [77.4, 25726.0], [77.5, 25760.0], [77.6, 25768.0], [77.7, 25790.0], [77.8, 25798.0], [77.9, 25836.0], [78.0, 25868.0], [78.1, 25889.0], [78.2, 25931.0], [78.3, 25935.0], [78.4, 25940.0], [78.5, 25958.0], [78.6, 25960.0], [78.7, 25981.0], [78.8, 25984.0], [78.9, 25989.0], [79.0, 26023.0], [79.1, 26032.0], [79.2, 26035.0], [79.3, 26044.0], [79.4, 26056.0], [79.5, 26075.0], [79.6, 26079.0], [79.7, 26090.0], [79.8, 26092.0], [79.9, 26100.0], [80.0, 26103.0], [80.1, 26103.0], [80.2, 26103.0], [80.3, 26113.0], [80.4, 26137.0], [80.5, 26161.0], [80.6, 26163.0], [80.7, 26197.0], [80.8, 26228.0], [80.9, 26252.0], [81.0, 26283.0], [81.1, 26286.0], [81.2, 26287.0], [81.3, 26311.0], [81.4, 26341.0], [81.5, 26361.0], [81.6, 26370.0], [81.7, 26395.0], [81.8, 26417.0], [81.9, 26428.0], [82.0, 26443.0], [82.1, 26460.0], [82.2, 26469.0], [82.3, 26470.0], [82.4, 26478.0], [82.5, 26493.0], [82.6, 26494.0], [82.7, 26497.0], [82.8, 26534.0], [82.9, 26539.0], [83.0, 26555.0], [83.1, 26565.0], [83.2, 26567.0], [83.3, 26571.0], [83.4, 26580.0], [83.5, 26586.0], [83.6, 26615.0], [83.7, 26623.0], [83.8, 26632.0], [83.9, 26655.0], [84.0, 26670.0], [84.1, 26685.0], [84.2, 26690.0], [84.3, 26713.0], [84.4, 26716.0], [84.5, 26723.0], [84.6, 26729.0], [84.7, 26745.0], [84.8, 26760.0], [84.9, 26762.0], [85.0, 26767.0], [85.1, 26778.0], [85.2, 26784.0], [85.3, 26788.0], [85.4, 26790.0], [85.5, 26810.0], [85.6, 26816.0], [85.7, 26832.0], [85.8, 26833.0], [85.9, 26835.0], [86.0, 26838.0], [86.1, 26842.0], [86.2, 26848.0], [86.3, 26854.0], [86.4, 26858.0], [86.5, 26858.0], [86.6, 26867.0], [86.7, 26877.0], [86.8, 26885.0], [86.9, 26894.0], [87.0, 26901.0], [87.1, 26926.0], [87.2, 26949.0], [87.3, 26949.0], [87.4, 26967.0], [87.5, 26971.0], [87.6, 26977.0], [87.7, 26988.0], [87.8, 26991.0], [87.9, 27012.0], [88.0, 27039.0], [88.1, 27043.0], [88.2, 27043.0], [88.3, 27044.0], [88.4, 27046.0], [88.5, 27050.0], [88.6, 27058.0], [88.7, 27064.0], [88.8, 27067.0], [88.9, 27070.0], [89.0, 27089.0], [89.1, 27090.0], [89.2, 27090.0], [89.3, 27092.0], [89.4, 27103.0], [89.5, 27111.0], [89.6, 27113.0], [89.7, 27113.0], [89.8, 27116.0], [89.9, 27117.0], [90.0, 27117.0], [90.1, 27122.0], [90.2, 27125.0], [90.3, 27127.0], [90.4, 27129.0], [90.5, 27130.0], [90.6, 27133.0], [90.7, 27139.0], [90.8, 27141.0], [90.9, 27142.0], [91.0, 27144.0], [91.1, 27147.0], [91.2, 27149.0], [91.3, 27152.0], [91.4, 27155.0], [91.5, 27164.0], [91.6, 27172.0], [91.7, 27173.0], [91.8, 27196.0], [91.9, 27203.0], [92.0, 27210.0], [92.1, 27215.0], [92.2, 27218.0], [92.3, 27219.0], [92.4, 27222.0], [92.5, 27228.0], [92.6, 27235.0], [92.7, 27243.0], [92.8, 27246.0], [92.9, 27247.0], [93.0, 27254.0], [93.1, 27256.0], [93.2, 27267.0], [93.3, 27273.0], [93.4, 27278.0], [93.5, 27278.0], [93.6, 27293.0], [93.7, 27299.0], [93.8, 27301.0], [93.9, 27316.0], [94.0, 27320.0], [94.1, 27331.0], [94.2, 27345.0], [94.3, 27346.0], [94.4, 27351.0], [94.5, 27383.0], [94.6, 27393.0], [94.7, 27396.0], [94.8, 27397.0], [94.9, 27406.0], [95.0, 27409.0], [95.1, 27410.0], [95.2, 27422.0], [95.3, 27432.0], [95.4, 27435.0], [95.5, 27441.0], [95.6, 27442.0], [95.7, 27451.0], [95.8, 27456.0], [95.9, 27469.0], [96.0, 27472.0], [96.1, 27480.0], [96.2, 27481.0], [96.3, 27486.0], [96.4, 27545.0], [96.5, 27546.0], [96.6, 27547.0], [96.7, 27557.0], [96.8, 27580.0], [96.9, 27583.0], [97.0, 27583.0], [97.1, 27585.0], [97.2, 27585.0], [97.3, 27589.0], [97.4, 27590.0], [97.5, 27597.0], [97.6, 27600.0], [97.7, 27601.0], [97.8, 27607.0], [97.9, 27609.0], [98.0, 27612.0], [98.1, 27621.0], [98.2, 27622.0], [98.3, 27624.0], [98.4, 27625.0], [98.5, 27627.0], [98.6, 27627.0], [98.7, 27631.0], [98.8, 27636.0], [98.9, 27641.0], [99.0, 27643.0], [99.1, 27645.0], [99.2, 27650.0], [99.3, 27652.0], [99.4, 27654.0], [99.5, 27665.0], [99.6, 27674.0], [99.7, 27674.0], [99.8, 27767.0], [99.9, 27816.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 10100.0, "maxY": 25.0, "series": [{"data": [[10100.0, 1.0], [10200.0, 1.0], [10400.0, 1.0], [10500.0, 1.0], [10700.0, 2.0], [11200.0, 1.0], [11300.0, 1.0], [11400.0, 1.0], [11500.0, 3.0], [11800.0, 3.0], [11900.0, 6.0], [12000.0, 4.0], [12100.0, 2.0], [12200.0, 6.0], [12300.0, 7.0], [12400.0, 7.0], [12500.0, 5.0], [12600.0, 12.0], [12700.0, 8.0], [12900.0, 5.0], [12800.0, 6.0], [13000.0, 5.0], [13100.0, 8.0], [13200.0, 8.0], [13300.0, 8.0], [13400.0, 5.0], [13500.0, 10.0], [13600.0, 5.0], [13700.0, 8.0], [13800.0, 7.0], [14000.0, 8.0], [14100.0, 6.0], [13900.0, 2.0], [14200.0, 8.0], [14300.0, 8.0], [14400.0, 7.0], [14500.0, 8.0], [14600.0, 8.0], [14800.0, 5.0], [14700.0, 7.0], [15000.0, 10.0], [14900.0, 3.0], [15100.0, 5.0], [15200.0, 5.0], [15300.0, 4.0], [15400.0, 5.0], [15500.0, 8.0], [15600.0, 6.0], [15700.0, 6.0], [15800.0, 3.0], [15900.0, 9.0], [16000.0, 5.0], [16100.0, 8.0], [16200.0, 8.0], [16300.0, 5.0], [17200.0, 5.0], [16500.0, 9.0], [16400.0, 10.0], [16600.0, 4.0], [16700.0, 6.0], [16800.0, 5.0], [16900.0, 6.0], [17000.0, 8.0], [17100.0, 4.0], [17300.0, 4.0], [17400.0, 7.0], [18200.0, 5.0], [17500.0, 7.0], [17600.0, 8.0], [17700.0, 10.0], [17800.0, 7.0], [17900.0, 5.0], [18000.0, 9.0], [18100.0, 7.0], [18300.0, 11.0], [18400.0, 7.0], [19200.0, 4.0], [18500.0, 7.0], [18600.0, 11.0], [18800.0, 8.0], [18900.0, 7.0], [19000.0, 7.0], [19100.0, 7.0], [18700.0, 3.0], [19300.0, 5.0], [19400.0, 7.0], [19700.0, 6.0], [19500.0, 6.0], [19800.0, 7.0], [19900.0, 6.0], [20000.0, 11.0], [20100.0, 13.0], [20200.0, 11.0], [20300.0, 11.0], [20400.0, 10.0], [19600.0, 2.0], [21300.0, 6.0], [20600.0, 9.0], [20500.0, 12.0], [20700.0, 9.0], [20800.0, 8.0], [20900.0, 5.0], [21000.0, 4.0], [21100.0, 6.0], [21200.0, 5.0], [21400.0, 5.0], [21500.0, 2.0], [21600.0, 7.0], [21700.0, 6.0], [21800.0, 4.0], [21900.0, 2.0], [22000.0, 6.0], [22100.0, 1.0], [22200.0, 3.0], [22300.0, 2.0], [22600.0, 1.0], [22800.0, 1.0], [23000.0, 2.0], [23300.0, 3.0], [23400.0, 2.0], [23500.0, 3.0], [23600.0, 1.0], [23800.0, 2.0], [24000.0, 4.0], [23900.0, 1.0], [24200.0, 1.0], [24300.0, 1.0], [24500.0, 2.0], [24700.0, 2.0], [24600.0, 5.0], [24800.0, 3.0], [24900.0, 1.0], [25000.0, 2.0], [25100.0, 4.0], [25200.0, 7.0], [25300.0, 4.0], [25400.0, 7.0], [25500.0, 4.0], [25700.0, 6.0], [25600.0, 11.0], [25800.0, 3.0], [25900.0, 8.0], [26000.0, 9.0], [26100.0, 9.0], [26200.0, 5.0], [26300.0, 5.0], [26400.0, 10.0], [26500.0, 8.0], [26600.0, 7.0], [27400.0, 15.0], [26700.0, 12.0], [26800.0, 15.0], [26900.0, 9.0], [27000.0, 15.0], [27100.0, 25.0], [27200.0, 19.0], [27300.0, 11.0], [27500.0, 12.0], [27600.0, 22.0], [27700.0, 1.0], [27800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 381.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 619.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 619.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 381.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.55500000000075, "minX": 1.6224885E12, "maxY": 500.55500000000075, "series": [{"data": [[1.6224885E12, 500.55500000000075]], "isOverall": false, "label": "oracleADW", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6224885E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10101.0, "minX": 1.0, "maxY": 27816.0, "series": [{"data": [[2.0, 27631.0], [3.0, 27627.0], [4.0, 27607.0], [5.0, 27674.0], [6.0, 27590.0], [7.0, 27652.0], [8.0, 27600.0], [9.0, 27641.0], [10.0, 27597.0], [11.0, 27636.0], [12.0, 27625.0], [13.0, 27622.0], [14.0, 27624.0], [15.0, 27609.0], [16.0, 27767.0], [17.0, 27589.0], [18.0, 27585.0], [19.0, 27583.0], [20.0, 27665.0], [21.0, 27650.0], [22.0, 27643.0], [23.0, 27674.0], [24.0, 27627.0], [25.0, 27654.0], [26.0, 27621.0], [27.0, 27612.0], [28.0, 27645.0], [29.0, 27585.0], [30.0, 27580.0], [31.0, 27583.0], [33.0, 27601.0], [32.0, 27557.0], [35.0, 27546.0], [34.0, 27547.0], [37.0, 27472.0], [36.0, 27486.0], [39.0, 27320.0], [38.0, 27481.0], [41.0, 27406.0], [40.0, 27396.0], [43.0, 27243.0], [42.0, 27410.0], [45.0, 27545.0], [44.0, 27480.0], [47.0, 27456.0], [46.0, 27469.0], [49.0, 27422.0], [48.0, 27451.0], [50.0, 27432.0], [53.0, 27142.0], [52.0, 27254.0], [54.0, 27435.0], [57.0, 27150.666666666668], [59.0, 27113.0], [58.0, 27122.0], [61.0, 27409.0], [60.0, 27254.0], [62.0, 27113.0], [67.0, 27116.0], [66.0, 27172.0], [65.0, 27191.5], [64.0, 27117.0], [71.0, 27247.0], [70.0, 27235.0], [69.0, 27383.0], [68.0, 27111.0], [75.0, 27272.5], [73.0, 27393.0], [72.0, 27273.0], [79.0, 27210.0], [78.0, 27297.0], [76.0, 27345.0], [83.0, 27331.0], [82.0, 27397.0], [81.0, 27299.0], [80.0, 27441.0], [87.0, 27067.0], [86.0, 27246.0], [85.0, 27316.0], [84.0, 27219.0], [91.0, 27141.0], [90.0, 27144.0], [89.0, 27346.0], [88.0, 27173.0], [95.0, 27301.0], [94.0, 27103.0], [93.0, 27117.0], [92.0, 27351.0], [99.0, 27218.0], [98.0, 27196.0], [97.0, 27278.0], [96.0, 27070.0], [103.0, 27170.0], [100.0, 27125.0], [107.0, 27043.0], [106.0, 27203.0], [105.0, 27187.5], [111.0, 27129.0], [110.0, 27130.0], [109.0, 26832.0], [108.0, 27089.0], [114.0, 26967.0], [113.0, 27092.0], [112.0, 27050.0], [119.0, 27058.0], [118.0, 27090.0], [117.0, 27030.5], [116.0, 26977.0], [123.0, 27039.0], [122.0, 27044.0], [121.0, 27046.0], [120.0, 27043.0], [127.0, 26901.0], [126.0, 26991.0], [125.0, 27064.0], [124.0, 27012.0], [135.0, 26848.0], [133.0, 26858.0], [132.0, 26949.0], [131.0, 26949.0], [130.0, 26877.0], [129.0, 26885.0], [128.0, 26988.0], [143.0, 26848.0], [142.0, 26854.0], [141.0, 26867.0], [140.0, 26842.0], [139.0, 26852.0], [137.0, 26816.0], [136.0, 26926.0], [151.0, 26778.0], [150.0, 26766.5], [148.0, 26760.0], [147.0, 26767.0], [146.0, 26833.0], [145.0, 26835.0], [144.0, 26790.0], [159.0, 26729.0], [158.0, 26723.0], [157.0, 26713.0], [156.0, 26670.0], [155.0, 26685.0], [154.0, 26784.0], [153.0, 26716.0], [152.0, 26762.0], [167.0, 26555.0], [166.0, 26567.0], [165.0, 26690.0], [164.0, 26655.0], [163.0, 26580.0], [162.0, 26586.0], [161.0, 26615.0], [160.0, 26632.0], [175.0, 26571.0], [174.0, 26470.0], [173.0, 26493.0], [172.0, 26495.5], [170.0, 26623.0], [169.0, 26534.0], [168.0, 26539.0], [183.0, 26283.0], [182.0, 26469.0], [181.0, 26469.0], [179.0, 26361.0], [178.0, 26565.0], [177.0, 26417.0], [176.0, 26443.0], [191.0, 26236.0], [189.0, 26252.0], [188.0, 26341.0], [187.0, 26197.0], [186.0, 26370.0], [185.0, 26395.0], [184.0, 26428.0], [199.0, 26286.0], [198.0, 26090.0], [197.0, 26103.0], [196.0, 26228.0], [195.0, 26103.0], [194.0, 26137.0], [193.0, 26113.0], [192.0, 26287.0], [207.0, 26032.0], [206.0, 26044.0], [205.0, 26075.0], [204.0, 26092.0], [203.0, 26079.0], [202.0, 26100.0], [201.0, 26103.0], [200.0, 26163.0], [215.0, 25958.0], [214.0, 25984.0], [213.0, 25960.0], [212.0, 25981.0], [211.0, 25989.0], [210.0, 26035.0], [209.0, 26056.0], [208.0, 26023.0], [223.0, 25798.0], [222.0, 25790.0], [221.0, 25836.0], [220.0, 25868.0], [219.0, 25889.0], [218.0, 25931.0], [217.0, 25940.0], [216.0, 25935.0], [231.0, 25688.0], [230.0, 25670.0], [229.0, 25726.0], [228.0, 25689.0], [227.0, 25688.0], [226.0, 25721.0], [225.0, 25760.0], [224.0, 25768.0], [239.0, 25511.0], [238.0, 25604.0], [237.0, 25609.0], [236.0, 25616.0], [235.0, 25601.0], [234.0, 25578.0], [233.0, 25620.0], [232.0, 25630.0], [247.0, 25440.0], [246.0, 25478.0], [245.0, 25449.0], [244.0, 25469.0], [243.0, 25483.0], [242.0, 25521.0], [241.0, 25513.0], [240.0, 25615.0], [255.0, 25277.0], [254.0, 25294.0], [253.0, 25315.0], [252.0, 25340.0], [251.0, 25338.0], [250.0, 25383.0], [249.0, 25440.0], [248.0, 25432.0], [270.0, 24839.0], [271.0, 24718.0], [269.0, 24817.0], [268.0, 24849.0], [267.0, 24973.0], [266.0, 25006.0], [265.0, 25105.5], [263.0, 25150.0], [257.0, 25255.0], [256.0, 25277.0], [259.0, 25240.0], [258.0, 25226.0], [262.0, 25106.0], [261.0, 25158.0], [260.0, 25205.0], [286.0, 24005.0], [287.0, 23897.0], [285.0, 23934.0], [284.0, 24010.0], [283.0, 24029.0], [282.0, 24068.0], [281.0, 24298.0], [280.0, 24341.0], [279.0, 24605.0], [273.0, 24717.0], [272.0, 24687.0], [275.0, 24688.0], [274.0, 24673.0], [278.0, 24580.0], [277.0, 24588.0], [276.0, 24645.0], [302.0, 21828.0], [303.0, 21803.0], [301.0, 21832.0], [300.0, 22835.0], [299.0, 23081.0], [298.0, 23047.0], [297.0, 23335.0], [296.0, 23319.0], [295.0, 23466.0], [289.0, 23590.0], [288.0, 23860.0], [291.0, 23631.0], [290.0, 23543.0], [294.0, 23370.0], [293.0, 23524.0], [292.0, 23430.0], [318.0, 22316.0], [319.0, 22223.0], [317.0, 21554.0], [316.0, 22390.0], [315.0, 21592.0], [314.0, 21640.0], [313.0, 21670.0], [312.0, 21675.0], [311.0, 21691.0], [305.0, 22619.0], [304.0, 21797.0], [307.0, 21751.0], [306.0, 21789.0], [310.0, 21696.5], [308.0, 21730.0], [334.0, 21308.0], [335.0, 21291.0], [333.0, 22050.0], [332.0, 21354.5], [331.0, 22142.0], [329.0, 21344.0], [328.0, 21352.0], [327.0, 21363.0], [321.0, 22286.0], [320.0, 21484.0], [323.0, 21457.0], [322.0, 22210.0], [326.0, 21435.0], [325.0, 21450.0], [324.0, 21450.0], [350.0, 21153.0], [351.0, 21135.0], [349.0, 21155.0], [348.0, 21156.0], [347.0, 21956.0], [346.0, 21169.0], [345.0, 22005.0], [344.0, 21928.0], [343.0, 21206.0], [337.0, 21269.0], [336.0, 22087.0], [339.0, 22081.0], [338.0, 22063.0], [342.0, 21614.0], [340.0, 21240.0], [366.0, 20895.0], [367.0, 20870.0], [365.0, 20893.0], [364.0, 20911.0], [363.0, 21733.0], [362.0, 20951.0], [361.0, 20978.0], [359.0, 20979.0], [353.0, 21096.0], [352.0, 21105.0], [355.0, 21045.0], [354.0, 21886.0], [358.0, 21787.0], [357.0, 21022.0], [356.0, 21031.0], [382.0, 20675.0], [383.0, 20663.0], [381.0, 20676.0], [380.0, 20693.0], [379.0, 20715.0], [378.0, 20728.0], [377.0, 20735.0], [376.0, 20756.0], [375.0, 20755.0], [369.0, 20861.0], [368.0, 20868.0], [371.0, 20835.0], [370.0, 21645.0], [374.0, 20793.0], [373.0, 20817.0], [372.0, 20816.0], [398.0, 20415.0], [399.0, 20390.0], [397.0, 20423.0], [396.0, 20434.0], [395.0, 20439.0], [394.0, 20444.0], [393.0, 20491.0], [392.0, 20514.0], [391.0, 20563.0], [384.0, 20662.0], [386.0, 20625.0], [385.0, 20659.0], [390.0, 20571.0], [389.0, 20579.0], [388.0, 20597.5], [414.0, 20159.0], [415.0, 20152.0], [413.0, 20175.0], [412.0, 20214.5], [410.0, 20227.0], [409.0, 20232.0], [408.0, 20234.0], [407.0, 20249.0], [403.0, 20355.666666666668], [400.0, 20386.0], [406.0, 20252.0], [405.0, 20312.0], [404.0, 20342.0], [430.0, 19884.0], [431.0, 19877.0], [429.0, 20572.0], [428.0, 20587.0], [427.0, 20694.0], [426.0, 20770.0], [425.0, 19967.0], [424.0, 20002.0], [423.0, 20019.0], [417.0, 20098.0], [416.0, 20122.0], [419.0, 20080.0], [418.0, 20091.0], [422.0, 20707.0], [421.0, 20797.0], [420.0, 20067.0], [446.0, 20278.0], [447.0, 19671.0], [445.0, 20425.0], [444.0, 20438.0], [443.0, 19696.0], [442.0, 20401.0], [441.0, 20437.0], [440.0, 20084.5], [438.0, 20540.0], [433.0, 20532.0], [432.0, 19853.0], [435.0, 20600.0], [434.0, 19843.0], [437.0, 20554.0], [436.0, 20572.0], [462.0, 20193.0], [463.0, 20190.0], [461.0, 20196.0], [460.0, 19481.0], [459.0, 20111.0], [458.0, 20256.0], [457.0, 20195.0], [456.0, 19540.0], [455.0, 20202.0], [449.0, 20218.0], [448.0, 20310.0], [451.0, 19583.0], [450.0, 20308.0], [453.0, 20313.0], [452.0, 20185.0], [478.0, 19913.0], [479.0, 19933.0], [477.0, 19254.0], [476.0, 19927.0], [475.0, 19975.0], [474.0, 20039.0], [473.0, 20049.0], [472.0, 19338.0], [471.0, 20044.0], [465.0, 20117.0], [464.0, 19443.0], [467.0, 19390.0], [466.0, 20135.0], [470.0, 20061.5], [468.0, 19385.0], [494.0, 19720.0], [495.0, 19044.0], [493.0, 19079.0], [492.0, 19754.0], [491.0, 19127.0], [490.0, 19760.0], [489.0, 19140.0], [488.0, 19782.0], [487.0, 19871.0], [481.0, 19548.5], [483.0, 19851.0], [482.0, 19923.0], [486.0, 19173.0], [485.0, 19177.0], [484.0, 19193.0], [510.0, 19442.0], [511.0, 19432.0], [509.0, 19479.0], [508.0, 19528.0], [507.0, 18885.0], [506.0, 18932.0], [505.0, 18940.0], [504.0, 18926.0], [503.0, 19588.0], [497.0, 19026.0], [496.0, 19725.0], [499.0, 19596.0], [498.0, 19020.0], [502.0, 18934.0], [501.0, 19568.0], [500.0, 18965.0], [540.0, 18382.0], [543.0, 18948.0], [529.0, 19085.0], [528.0, 18623.0], [531.0, 18510.0], [530.0, 18515.0], [533.0, 19062.0], [532.0, 19116.0], [542.0, 18349.0], [541.0, 18356.0], [539.0, 18952.0], [538.0, 18436.0], [537.0, 18453.0], [536.0, 19062.0], [527.0, 19172.0], [513.0, 18826.0], [512.0, 18835.0], [515.0, 19434.0], [514.0, 19443.0], [517.0, 18785.0], [516.0, 18796.0], [519.0, 19347.0], [518.0, 19309.0], [526.0, 19245.0], [525.0, 18627.0], [524.0, 18633.0], [523.0, 18637.0], [522.0, 18654.0], [521.0, 19238.0], [520.0, 18708.0], [535.0, 18482.0], [534.0, 18486.0], [569.0, 18456.0], [574.0, 17899.0], [575.0, 18376.0], [561.0, 18034.0], [560.0, 18603.0], [563.0, 18027.0], [562.0, 18033.0], [565.0, 18529.0], [564.0, 18554.0], [573.0, 18412.5], [571.0, 17921.0], [570.0, 18442.0], [568.0, 18505.0], [551.0, 18804.0], [550.0, 18809.0], [549.0, 18257.0], [548.0, 18274.0], [547.0, 18281.0], [546.0, 18858.0], [545.0, 18843.0], [544.0, 18329.0], [558.0, 18664.0], [557.0, 18659.0], [556.0, 18144.0], [555.0, 18692.0], [554.0, 18650.0], [553.0, 18681.0], [552.0, 18801.0], [567.0, 18553.0], [566.0, 18013.0], [604.0, 18001.0], [607.0, 17954.0], [593.0, 17655.0], [592.0, 17665.0], [595.0, 18114.0], [594.0, 17641.0], [597.0, 18131.0], [596.0, 18089.0], [606.0, 17956.0], [605.0, 17996.0], [603.0, 18007.0], [602.0, 17993.0], [601.0, 17533.0], [600.0, 18069.0], [591.0, 18159.5], [577.0, 18358.0], [576.0, 17882.0], [579.0, 18336.0], [578.0, 17862.0], [581.0, 18309.0], [580.0, 18356.0], [583.0, 17766.0], [582.0, 18303.0], [589.0, 18155.0], [588.0, 18203.0], [587.0, 18148.0], [586.0, 17720.0], [585.0, 17737.0], [584.0, 18294.0], [599.0, 17555.0], [598.0, 18093.0], [636.0, 17005.0], [639.0, 16995.0], [625.0, 17163.0], [624.0, 17632.0], [627.0, 17598.0], [626.0, 17581.0], [629.0, 17561.0], [628.0, 17593.0], [638.0, 17000.0], [637.0, 17443.0], [635.0, 17482.0], [634.0, 17479.0], [633.0, 17491.0], [632.0, 17045.0], [623.0, 17638.0], [608.0, 17823.0], [610.0, 17822.0], [609.0, 17849.0], [613.0, 17769.0], [612.0, 17794.5], [615.0, 17273.0], [614.0, 17798.0], [622.0, 17680.0], [621.0, 17672.0], [620.0, 17645.0], [619.0, 17746.0], [618.0, 17751.0], [617.0, 17743.0], [616.0, 17722.0], [631.0, 17488.0], [630.0, 17573.0], [668.0, 16952.0], [671.0, 16538.0], [657.0, 16720.0], [656.0, 17216.0], [659.0, 17119.0], [658.0, 17179.0], [661.0, 16649.0], [660.0, 17104.0], [670.0, 16946.0], [669.0, 16556.0], [667.0, 16991.0], [666.0, 17018.0], [665.0, 17020.0], [664.0, 17068.0], [655.0, 17247.0], [641.0, 17393.0], [640.0, 17426.0], [643.0, 17420.0], [642.0, 16958.0], [645.0, 17371.0], [644.0, 16932.0], [647.0, 17302.0], [646.0, 17308.0], [654.0, 17250.0], [653.0, 16779.0], [652.0, 17221.0], [651.0, 16799.0], [650.0, 16810.0], [649.0, 16812.0], [648.0, 16818.0], [663.0, 17071.0], [662.0, 17089.0], [700.0, 16408.0], [703.0, 16104.0], [689.0, 16244.0], [688.0, 16638.0], [691.0, 16568.0], [690.0, 16242.0], [693.0, 16204.0], [692.0, 16567.0], [702.0, 16116.0], [701.0, 16421.0], [699.0, 16508.0], [698.0, 16460.0], [697.0, 16453.0], [696.0, 16166.0], [687.0, 16559.0], [673.0, 16898.0], [672.0, 16516.0], [675.0, 16484.0], [674.0, 16882.0], [677.0, 16437.0], [676.0, 16447.0], [679.0, 16454.0], [678.0, 16465.0], [686.0, 16282.0], [685.0, 16609.0], [684.0, 16667.0], [683.0, 16725.0], [682.0, 16759.0], [681.0, 16390.0], [680.0, 16793.0], [695.0, 16558.0], [694.0, 16570.0], [732.0, 15969.0], [735.0, 15613.0], [720.0, 16167.0], [723.0, 16129.0], [722.0, 16094.0], [725.0, 16010.0], [724.0, 15768.0], [734.0, 15937.0], [733.0, 15867.0], [731.0, 15981.0], [730.0, 15931.0], [729.0, 16004.0], [728.0, 15682.0], [719.0, 16096.0], [705.0, 16042.0], [704.0, 16411.0], [707.0, 16321.0], [706.0, 16304.0], [709.0, 15993.0], [708.0, 16354.0], [711.0, 15976.0], [710.0, 16313.0], [718.0, 16144.0], [717.0, 16179.0], [716.0, 16226.0], [715.0, 16216.0], [714.0, 16282.0], [713.0, 15934.0], [712.0, 16278.0], [727.0, 15705.0], [726.0, 15996.0], [762.0, 15460.0], [766.0, 15161.0], [767.0, 15130.0], [753.0, 15616.0], [752.0, 15628.0], [755.0, 15265.0], [754.0, 15308.0], [757.0, 15558.0], [756.0, 15557.0], [765.0, 15186.0], [764.0, 15455.0], [763.0, 15195.0], [760.0, 15519.0], [742.0, 15722.0], [741.0, 15828.0], [740.0, 15770.0], [739.0, 15564.0], [738.0, 15570.0], [737.0, 15902.0], [736.0, 15899.0], [751.0, 15330.0], [750.0, 15573.0], [749.0, 15648.0], [748.0, 15670.0], [747.0, 15422.0], [746.0, 15438.0], [745.0, 15612.5], [744.0, 15780.0], [759.0, 15211.0], [758.0, 15506.0], [793.0, 14749.0], [797.0, 14712.0], [799.0, 14666.5], [784.0, 14873.0], [787.0, 14954.0], [785.0, 14852.0], [789.0, 15018.0], [788.0, 14810.0], [796.0, 14726.0], [795.0, 14729.0], [794.0, 14741.0], [792.0, 15029.0], [775.0, 15270.0], [774.0, 15032.0], [773.0, 15374.0], [772.0, 15081.0], [771.0, 15086.0], [770.0, 15088.0], [769.0, 15097.0], [768.0, 15387.0], [783.0, 14917.0], [782.0, 15128.0], [781.0, 14951.0], [780.0, 14960.0], [779.0, 15222.0], [778.0, 15251.0], [777.0, 15006.0], [776.0, 15014.0], [791.0, 14755.0], [790.0, 14771.0], [828.0, 14212.0], [831.0, 14192.0], [817.0, 14383.0], [816.0, 14401.0], [819.0, 14350.0], [818.0, 14600.0], [821.0, 14343.0], [820.0, 14346.0], [830.0, 14451.0], [829.0, 14417.0], [827.0, 14371.0], [826.0, 14513.0], [825.0, 14275.0], [824.0, 14543.0], [815.0, 14542.333333333334], [800.0, 14648.0], [802.0, 14605.0], [801.0, 14614.0], [804.0, 14552.0], [803.0, 14569.0], [807.0, 14529.0], [806.0, 14673.0], [812.0, 14423.0], [811.0, 14425.0], [810.0, 14428.0], [809.0, 14691.0], [808.0, 14521.0], [823.0, 14327.0], [822.0, 14334.0], [857.0, 13830.0], [862.0, 13776.0], [863.0, 13748.0], [848.0, 13986.0], [850.0, 13937.0], [849.0, 14167.0], [852.0, 13877.0], [851.0, 14123.0], [860.0, 13783.0], [859.0, 13790.0], [858.0, 14032.0], [856.0, 13868.0], [839.0, 14292.0], [838.0, 14070.0], [837.0, 14230.0], [836.0, 14107.0], [835.0, 14307.0], [834.0, 14148.0], [833.0, 14296.0], [832.0, 14191.0], [847.0, 14001.0], [846.0, 14209.0], [845.0, 14033.0], [843.0, 14041.0], [842.0, 14267.0], [841.0, 14248.0], [840.0, 14054.0], [855.0, 13980.0], [853.0, 13868.0], [892.0, 13428.0], [895.0, 13460.0], [881.0, 13517.0], [880.0, 13525.0], [883.0, 13504.0], [882.0, 13513.0], [885.0, 13439.0], [884.0, 13473.0], [894.0, 13303.0], [893.0, 13313.0], [891.0, 13342.0], [890.0, 13347.0], [889.0, 13358.0], [888.0, 13389.0], [879.0, 13526.0], [865.0, 13844.0], [864.0, 13700.0], [867.0, 13686.0], [866.0, 13693.0], [869.0, 13803.0], [868.0, 13678.0], [871.0, 13595.0], [870.0, 13642.0], [878.0, 13533.0], [877.0, 13539.0], [876.0, 13548.0], [875.0, 13692.0], [874.0, 13557.0], [873.0, 13755.0], [872.0, 13727.0], [887.0, 13395.0], [886.0, 13416.0], [921.0, 12880.0], [926.0, 12852.0], [927.0, 12828.0], [913.0, 13011.0], [912.0, 13133.0], [915.0, 12974.0], [914.0, 13155.0], [917.0, 13112.0], [916.0, 12969.0], [925.0, 12957.0], [924.0, 12871.0], [923.0, 12955.0], [920.0, 12891.0], [903.0, 13373.0], [902.0, 13207.0], [901.0, 13222.0], [900.0, 13223.0], [899.0, 13227.0], [898.0, 13227.0], [897.0, 13269.0], [896.0, 13270.0], [910.0, 13044.0], [909.0, 13212.0], [908.0, 13072.0], [907.0, 13115.0], [906.0, 13124.0], [905.0, 13147.0], [904.0, 13177.0], [919.0, 13099.0], [918.0, 12937.0], [956.0, 12496.0], [959.0, 12416.0], [945.0, 12698.0], [944.0, 12581.0], [947.0, 12628.0], [946.0, 12629.0], [949.0, 12603.0], [948.0, 12615.0], [958.0, 12426.0], [957.0, 12436.0], [955.0, 12461.0], [954.0, 12483.0], [953.0, 12560.0], [952.0, 12554.0], [943.0, 12609.0], [928.0, 12944.0], [930.0, 12780.0], [929.0, 12792.0], [933.0, 12746.5], [931.0, 12755.0], [935.0, 12709.0], [934.0, 12737.0], [942.0, 12606.0], [941.0, 12733.0], [940.0, 12652.0], [939.0, 12666.0], [938.0, 12664.0], [937.0, 12665.0], [936.0, 12690.0], [951.0, 12553.0], [950.0, 12587.0], [988.0, 11823.0], [991.0, 11508.0], [977.0, 12079.0], [976.0, 12150.0], [979.0, 11979.0], [978.0, 12080.0], [981.0, 12043.0], [980.0, 11923.0], [990.0, 11526.0], [989.0, 11534.0], [987.0, 11866.0], [986.0, 11861.0], [985.0, 11948.0], [984.0, 11999.0], [975.0, 12035.0], [961.0, 12365.0], [960.0, 12450.0], [963.0, 12380.0], [962.0, 12382.0], [965.0, 12320.0], [964.0, 12376.0], [967.0, 12317.0], [966.0, 12340.0], [974.0, 12138.0], [973.0, 12237.0], [972.0, 12253.0], [971.0, 12227.0], [970.0, 12242.0], [969.0, 12232.0], [968.0, 12254.0], [983.0, 11956.0], [982.0, 11979.0], [1000.0, 10101.0], [999.0, 10280.0], [998.0, 10448.0], [997.0, 10583.0], [996.0, 10774.0], [995.0, 10785.0], [994.0, 11346.0], [993.0, 11288.0], [992.0, 11448.0], [1.0, 27816.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.55500000000075, 19801.346999999976]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3800.0, "minX": 1.6224885E12, "maxY": 268297.05, "series": [{"data": [[1.6224885E12, 268297.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6224885E12, 3800.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6224885E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19801.346999999976, "minX": 1.6224885E12, "maxY": 19801.346999999976, "series": [{"data": [[1.6224885E12, 19801.346999999976]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6224885E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19518.873, "minX": 1.6224885E12, "maxY": 19518.873, "series": [{"data": [[1.6224885E12, 19518.873]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6224885E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11113.133999999995, "minX": 1.6224885E12, "maxY": 11113.133999999995, "series": [{"data": [[1.6224885E12, 11113.133999999995]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6224885E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10101.0, "minX": 1.6224885E12, "maxY": 27816.0, "series": [{"data": [[1.6224885E12, 27816.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6224885E12, 27301.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6224885E12, 27653.6]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6224885E12, 27583.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6224885E12, 10101.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6224885E12, 22063.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6224885E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10785.0, "minX": 2.0, "maxY": 27293.0, "series": [{"data": [[2.0, 18955.5], [34.0, 12061.5], [13.0, 23860.0], [55.0, 20579.5], [57.0, 25688.0], [58.0, 18850.5], [61.0, 15023.5], [63.0, 13100.5], [65.0, 15953.0], [66.0, 17581.0], [68.0, 14188.0], [70.0, 20052.0], [71.0, 22056.5], [76.0, 26619.0], [20.0, 23081.0], [23.0, 24817.0], [7.0, 10785.0], [123.0, 27293.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[65.0, 15570.0], [66.0, 16818.0], [34.0, 12276.0], [68.0, 13696.5], [70.0, 19175.0], [71.0, 21031.0], [20.0, 21730.0], [55.0, 20249.0], [58.0, 18467.5], [61.0, 14712.0], [63.0, 12780.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 123.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10509.0, "minX": 2.0, "maxY": 27004.0, "series": [{"data": [[2.0, 18666.5], [34.0, 11783.0], [13.0, 23556.0], [55.0, 20293.5], [57.0, 25407.0], [58.0, 18572.0], [61.0, 14731.5], [63.0, 12815.5], [65.0, 15671.5], [66.0, 17295.0], [68.0, 13905.5], [70.0, 19770.0], [71.0, 21774.0], [76.0, 26333.0], [20.0, 22784.0], [23.0, 24532.0], [7.0, 10509.0], [123.0, 27004.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[65.0, 15290.0], [66.0, 16535.0], [34.0, 11991.5], [68.0, 13407.5], [70.0, 18892.0], [71.0, 20749.0], [20.0, 21448.0], [55.0, 19971.0], [58.0, 18185.0], [61.0, 14426.0], [63.0, 12500.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 123.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6224885E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6224885E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6224885E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.35, "minX": 1.6224885E12, "maxY": 10.316666666666666, "series": [{"data": [[1.6224885E12, 10.316666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6224885E12, 6.35]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6224885E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.35, "minX": 1.6224885E12, "maxY": 10.316666666666666, "series": [{"data": [[1.6224885E12, 10.316666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6224885E12, 6.35]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6224885E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.35, "minX": 1.6224885E12, "maxY": 10.316666666666666, "series": [{"data": [[1.6224885E12, 10.316666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6224885E12, 6.35]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6224885E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

